(function(){ try {var elementStyle = document.createElement('style'); elementStyle.appendChild(document.createTextNode("@charset \"UTF-8\";.relation-graph{box-sizing:border-box;position:relative}.relation-graph .rel-map svg.rg-icon{height:100%;width:100%}.relation-graph .rel-lines-svg{overflow:visible}.relation-graph .rel-linediv{overflow:visible;position:absolute;z-index:40;width:100%;top:0px;left:0px;--stroke: url(#lineStyle);--markerEnd: url(#arrow-default);--markerStart: url(#start-arrow-default);--markerEndChecked: url(#arrow-checked);--markerStartChecked: url(#start-arrow-checked)}.relation-graph .rel-linediv svg{overflow:visible}.relation-graph .rel-linediv-el-lines{z-index:60}.relation-graph .rel-lines-svg-el-lines{overflow:visible;width:1px;height:1px;position:absolute;left:0px;top:0px}.relation-graph .rel-map{background-color:#fff;overflow:hidden;cursor:default;user-select:none}.relation-graph .rel-map-background-norepeat{background-repeat:no-repeat;background-position:right bottom}.relation-graph .rel-nodediv-for-webkit{position:absolute;width:100%;top:0px;left:0px;z-index:50}.relation-graph .rel-map-canvas{position:relative;top:0px;left:0px;border:0px;z-index:3;overflow:visible}.relation-graph .rel-canvas-slot{overflow:visible}.relation-graph .rel-canvas-slot-behind{z-index:30;overflow:visible;position:absolute;top:0px;left:0px}.relation-graph .rel-canvas-slot-above{z-index:70;overflow:visible;position:absolute;top:0px;left:0px}.relation-graph .rel-map ::v-deep img{-webkit-user-drag:none;-webkit-user-select:none}.relation-graph .c-rg-line-text{fill:#888;font-size:12px}.relation-graph .c-rg-line-text-checked{stroke:#fd8b374d;stroke-width:2}.relation-graph .c-rg-line{fill-rule:nonzero}.relation-graph .rg-line-dashtype-1{stroke-dasharray:2,2,2;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-2{stroke-dasharray:5,5,5;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-3{stroke-dasharray:9,9,9;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}.relation-graph .rg-line-dashtype-4{stroke-dasharray:5,5,15;stroke-dashoffset:3px;stroke-linecap:butt;stroke-linejoin:bevel}@keyframes ACTRGLineChecked{0%{stroke-dashoffset:352px;stroke-dasharray:5,5,5}50%{stroke-dasharray:5,5,5;stroke-dashoffset:3px}to{stroke-dashoffset:352px;stroke-dasharray:5,5,5}}@keyframes rg-line-anm2{0%{stroke-dashoffset:0;stroke-dasharray:4,4,4}to{stroke-dashoffset:10px;stroke-dasharray:20,20,20}}@keyframes rg-line-anm3{0%{stroke-opacity:1}50%{stroke-opacity:.2}to{stroke-opacity:1}}@keyframes rg-line-anm4{0%{stroke-dasharray:0,100%}to{stroke-dasharray:100%,0}}.relation-graph .rg-line-anm-1{animation:ACTRGLineChecked 10s infinite}.relation-graph .rg-line-anm-2{animation:rg-line-anm2 3s infinite}.relation-graph .rg-line-anm-3{animation:rg-line-anm3 1s infinite}.relation-graph .rg-line-anm-4{animation:rg-line-anm4 3s infinite}.relation-graph .c-rg-line-checked{z-index:100}.relation-graph .c-rg-line-checked-bg{stroke:#fd8b374d;stroke-linecap:round}@keyframes deform1{0%{stroke-dashoffset:0}to{stroke-dashoffset:100%}}.relation-graph .rg-icon{width:19px;height:19px;vertical-align:0px;fill:currentColor;overflow:hidden}.relation-graph .el-icon-remove,.relation-graph .el-icon-circle-plus{cursor:pointer}.relation-graph .relation-graph-node{position:absolute}.relation-graph .rel-node-peel{clear:both;padding:8px;position:absolute;font-size:14px}.relation-graph .rel-node-peel-checked{z-index:100}.relation-graph .rel-node{text-align:center}.relation-graph .rg-center-items{display:flex;place-items:center}.relation-graph .rel-node-shape-0{width:80px;height:80px;border-radius:50%}.relation-graph .rel-node-shape-1{border-radius:5px}.relation-graph .c-node-text{height:100%;width:100%;display:flex;align-items:center;justify-content:center}.relation-graph .rel-node-shape-1 .c-node-text{padding-left:5px;padding-right:5px}.relation-graph .rel-node-type-button{border-radius:25px;color:#00f;cursor:pointer}.relation-graph .rel-node-checked{transition:background-color .2s ease,outline .2s ease,color .2s ease,-webkit-box-shadow .2s ease;box-shadow:0 0 0 8px #fd8b374d}.relation-graph .rel-node-dragging{z-index:400}.relation-graph .rel-node-selected{border:#025098 solid 2px;border-radius:5px}.relation-graph .rel-node-flashing{animation:ACTRGNodeFlashing 2s infinite}.relation-graph .rel-node-vtree-2{transform-origin:0 0;transform:rotate(30deg) translate(0)}.relation-graph .rel-node-vtree{width:130px;height:45px;text-align:left}.relation-graph .c-btn-open-close{position:absolute;height:100%;width:19px;display:flex;align-items:center;justify-content:center;user-select:none;pointer-events:none;cursor:pointer}.relation-graph .c-btn-open-close span{width:19px;height:19px;display:inline-block;text-align:center;border-radius:15px;color:#fff;cursor:pointer;font-size:19px;line-height:16px;background-size:100% 100%;pointer-events:all}.relation-graph .c-expanded{background-image:url(data:image/svg+xml;%20charset=utf8,%3Csvg%20t=%221606310217820%22%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20p-id=%223373%22%20width=%2232%22%20height=%2232%22%3E%3Cpath%20d=%22M853.333333%20480H544V170.666667c0-17.066667-14.933333-32-32-32s-32%2014.933333-32%2032v309.333333H170.666667c-17.066667%200-32%2014.933333-32%2032s14.933333%2032%2032%2032h309.333333V853.333333c0%2017.066667%2014.933333%2032%2032%2032s32-14.933333%2032-32V544H853.333333c17.066667%200%2032-14.933333%2032-32s-14.933333-32-32-32z%22%20p-id=%223374%22%20fill=%22white%22%3E%3C/path%3E%3C/svg%3E)}.relation-graph .c-collapsed{background-image:url(data:image/svg+xml;%20charset=utf8,%3Csvg%20t=%221606310454619%22%20class=%22icon%22%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20p-id=%223662%22%20width=%22128%22%20height=%22128%22%3E%3Cpath%20d=%22M853.333333%20554.666667H170.666667c-23.466667%200-42.666667-19.2-42.666667-42.666667s19.2-42.666667%2042.666667-42.666667h682.666666c23.466667%200%2042.666667%2019.2%2042.666667%2042.666667s-19.2%2042.666667-42.666667%2042.666667z%22%20p-id=%223663%22%20fill=%22white%22%3E%3C/path%3E%3C/svg%3E)}.relation-graph .c-expand-positon-left{margin-top:-8px;margin-left:-25px}.relation-graph .c-expand-positon-right{height:100%;width:100%;justify-content:center}.relation-graph .c-expand-positon-right span{margin-top:-18px;margin-right:-18px;margin-left:100%}.relation-graph .c-expand-positon-bottom{height:100%;width:100%;margin-top:7px;margin-left:-8px;align-items:flex-end;justify-content:center}.relation-graph .c-expand-positon-top{height:18px;width:100%;margin-top:-20px;margin-left:-6px;align-items:flex-end;justify-content:center}@keyframes ACTRGNodeInit{0%{box-shadow:0 0 15px #fd8b37}50%{box-shadow:0 0 1px #2e4e8f}to{box-shadow:0 0 15px #fd8b37}to{box-shadow:0 0 15px #fd8b37}}@keyframes ACTRGNodeFlashing{0%{box-shadow:0 0 15px #fd8b37}40%{box-shadow:0 0 1px #2e4e8f}70%{box-shadow:0 0 8px #fd8b37}to{box-shadow:0 0 #fd8b37}}.relation-graph .rel-diy-node{padding:0}.relation-graph .c-setting-panel{--height: 300px;--width: 200px;width:300px;height:200px;position:absolute;margin-left:10px;margin-top:5px;font-size:12px;color:#3a5bb2;padding:60px 10px 10px;overflow:hidden;box-shadow:0 0 5px #999;border-radius:5px;z-index:1000;background-color:#fff;border:#999999 solid 1px}.relation-graph .c-setting-panel-button{height:35px;width:35px;font-size:8px;line-height:35px;text-align:center;border-radius:50%;position:absolute;margin-left:25px;margin-top:20px;background-color:#3a5bb2;color:#fff;cursor:pointer;z-index:1001;box-shadow:0 0 8px #999}.relation-graph .c-setting-panel-button:hover{box-shadow:0 0 20px #ffa20a;border:#ffffff solid 1px;color:#ffa20a;-moz-transform:rotate(-89deg) translateX(-190px);animation-timing-function:linear;animation:flashButton 2s infinite}.relation-graph .c-fixedLayout{position:fixed;top:125px}@keyframes flashButton{0%{box-shadow:0 0 8px #2e4e8f}30%{box-shadow:0 0 20px #ffa20a}to{box-shadow:0 0 8px #2e4e8f}}.relation-graph .c-debug-tools-row{text-align:left}.relation-graph .rel-operate{position:absolute;top:0px;left:0px;width:100%;height:100%;z-index:180}.relation-graph .rel-selection{position:absolute;background-color:#0e7a7b4d;border:rgb(14,122,123) solid 1px}.relation-graph .rel-graph-loading{position:absolute;z-index:200;left:0px;top:0px;height:100%;width:100%;background-color:#fff}.relation-graph .rel-graph-loading .c-graph-loading-icon{width:16px;height:16px;vertical-align:-3px;fill:currentColor;overflow:hidden;animation:turn 1s linear infinite}.relation-graph .rel-graph-loading .rel-graph-loading-message{position:absolute;width:200px;height:30px;line-height:30px;text-align:center;left:calc((100% - 200px)/2);top:calc((100% - 30px)/2);border-radius:5px;background-color:#4444444d;color:#fff}.relation-graph .rel-graph-loading-hide{display:none}@keyframes slowHide{0%{opacity:1}to{opacity:0;display:none}}.relation-graph .rel-toolbar{position:absolute;z-index:300;background-color:#dcdcdc33;color:#999;box-shadow:0 0 2px #ccc;box-sizing:border-box;border-radius:5px;padding:3px}.relation-graph .rel-toolbar .rg-icon{width:16px;height:16px;vertical-align:-3px;fill:currentColor;overflow:hidden}.relation-graph .rel-toolbar .c-mb-button svg{margin:auto}.relation-graph .rel-toolbar .c-mb-button-on{color:#2e74b5}.relation-graph .rel-toolbar .c-mb-button:hover{background-color:#dcdcdc80}.relation-graph .rel-toolbar .c-loading-icon{animation:turn 1s linear infinite}@keyframes turn{0%{-webkit-transform:rotate(0deg)}25%{-webkit-transform:rotate(90deg)}50%{-webkit-transform:rotate(180deg)}75%{-webkit-transform:rotate(270deg)}to{-webkit-transform:rotate(360deg)}}.relation-graph .rel-toolbar .c-current-zoom{margin-top:0;height:20px;color:#262626;font-size:10px;text-align:center;line-height:20px;border-radius:3px}.relation-graph .rel-toolbar .c-mb-button{height:40px;margin-top:0;opacity:1;text-align:center;padding-top:3px;cursor:pointer;font-size:18px;box-sizing:border-box;line-height:21px;display:flex;align-items:center;border-radius:3px}.relation-graph .rel-toolbar-v{width:45px;max-height:270px}.relation-graph .rel-toolbar-h{height:45px;width:300px}.relation-graph .rel-toolbar-h .c-mb-button{width:40px;height:100%;float:left}.relation-graph .rel-toolbar-h .c-current-zoom{width:40px;height:100%;float:left;line-height:40px}.relation-graph .rel-toolbar-h-right{right:15px}.relation-graph .rel-toolbar-h-left{left:15px}.relation-graph .rel-toolbar-h-center{left:calc((100% - 260px)/2)}.relation-graph .rel-toolbar-v-top{top:15px}.relation-graph .rel-toolbar-v-bottom{bottom:15px}.relation-graph .rel-toolbar-v-center{top:calc((100% - 260px)/2)}")); document.head.appendChild(elementStyle);} catch(e) {console.error('vite-plugin-css-injected-by-js', e);} })();var lt = Object.defineProperty;
var rt = (i, n, e) => n in i ? lt(i, n, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[n] = e;
var x = (i, n, e) => (rt(i, typeof n != "symbol" ? n + "" : n, e), e);
import { defineComponent as J, openBlock as L, createElementBlock as k, normalizeClass as U, createElementVNode as C, normalizeStyle as j, withModifiers as ae, ref as pe, inject as W, computed as B, onMounted as we, onUpdated as ct, onBeforeUnmount as Ye, withDirectives as ht, unref as p, renderSlot as G, createVNode as fe, createCommentVNode as T, vShow as dt, toDisplayString as xe, Fragment as oe, renderList as he, createBlock as re, withCtx as K, createTextVNode as Xe, reactive as Fe, provide as Ne } from "vue";
import * as ft from "screenfull";
import de from "screenfull";
import * as ut from "html2canvas";
import pt from "html2canvas";
const je = "2.1.20", gn = Symbol("INSTALLED_KEY"), ie = "graphInstance", Ue = "graphData", Q = "graph", yt = !function(i) {
  var n, e, t, o, s, a, c = '<svg><symbol id="icon-iconset0444" viewBox="0 0 1024 1024"><path d="M960 682.666667l-106.666667 0C844.8 569.6 763.733333 42.666667 64 42.666667 51.2 42.666667 42.666667 51.2 42.666667 64c0 12.8 8.533333 21.333333 21.333333 21.333333 219.733333 0 377.6 106.666667 465.066667 315.733333 51.2 123.733333 64 236.8 66.133333 281.6L490.666667 682.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333 0 6.4 2.133333 10.666667 6.4 14.933333l234.666667 256c4.266667 4.266667 8.533333 6.4 14.933333 6.4 6.4 0 10.666667-2.133333 14.933333-6.4l234.666667-256c4.266667-4.266667 6.4-8.533333 6.4-14.933333C981.333333 691.2 972.8 682.666667 960 682.666667zM725.333333 928 539.733333 725.333333 618.666667 725.333333c12.8 0 21.333333-8.533333 21.333333-21.333333l0-21.333333c-4.266667-87.466667-38.4-396.8-273.066667-554.666667C755.2 251.733333 804.266667 588.8 810.666667 682.666667l0 21.333333c0 12.8 8.533333 21.333333 21.333333 21.333333l78.933333 0L725.333333 928z"  ></path></symbol><symbol id="icon-iconset0445" viewBox="0 0 1024 1024"><path d="M974.933333 305.066667l-234.666667-256C736 44.8 731.733333 42.666667 725.333333 42.666667c-6.4 0-10.666667 2.133333-14.933333 6.4l-234.666667 256C471.466667 309.333333 469.333333 313.6 469.333333 320c0 12.8 8.533333 21.333333 21.333333 21.333333l104.533333 0c-2.133333 44.8-14.933333 157.866667-66.133333 281.6C441.6 832 283.733333 938.666667 64 938.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333 0 12.8 8.533333 21.333333 21.333333 21.333333 699.733333 0 780.8-526.933333 789.333333-640l106.666667 0c12.8 0 21.333333-8.533333 21.333333-21.333333C981.333333 313.6 979.2 309.333333 974.933333 305.066667zM832 298.666667c-12.8 0-21.333333 8.533333-21.333333 21.333333l0 21.333333c-6.4 93.866667-55.466667 430.933333-443.733333 554.666667 234.666667-157.866667 268.8-467.2 273.066667-554.666667l0-21.333333c0-12.8-8.533333-21.333333-21.333333-21.333333l-78.933333 0L725.333333 96l185.6 202.666667L832 298.666667z"  ></path></symbol><symbol id="icon-yuanquanfenxiang" viewBox="0 0 1024 1024"><path d="M751.148705 578.773799c-61.987796 0-117.066229 30.121018-151.388942 76.488045L398.287145 536.382317c1.991354-10.171664 3.046383-20.673855 3.046383-31.419594 0-18.776645-3.196809-36.817534-9.058306-53.621245l193.486736-107.492176c31.949666 58.566884 94.104261 98.391914 165.386748 98.391914 103.803157 0 188.254571-84.450391 188.254571-188.254571S854.951863 65.73105 751.148705 65.73105c-103.804181 0-188.255595 84.450391-188.255595 188.254571 0 14.246469 1.600451 28.125571 4.613064 41.4746L368.032074 406.279167c-29.841655-39.193651-76.976162-64.544015-129.927141-64.544015-90.004897 0-163.228595 73.223698-163.228595 163.228595 0 90.003873 73.223698 163.228595 163.228595 163.228595 60.882626 0 114.078175-33.510208 142.134161-83.049484L575.173808 700.16452c-7.925507 20.788465-12.280698 43.325761-12.280698 66.86385 0 103.803157 84.450391 188.254571 188.255595 188.254571 103.803157 0 188.254571-84.450391 188.254571-188.254571S854.951863 578.773799 751.148705 578.773799zM751.148705 116.89636c75.590606 0 137.089261 61.498656 137.089261 137.089261s-61.498656 137.089261-137.089261 137.089261c-75.591629 0-137.090285-61.498656-137.090285-137.089261S675.557076 116.89636 751.148705 116.89636zM238.105956 617.026008c-61.791321 0-112.063285-50.27094-112.063285-112.063285 0-61.791321 50.27094-112.063285 112.063285-112.063285s112.063285 50.27094 112.063285 112.063285C350.168218 566.755068 299.897278 617.026008 238.105956 617.026008zM751.148705 904.117632c-75.591629 0-137.090285-61.498656-137.090285-137.089261s61.498656-137.089261 137.090285-137.089261c75.590606 0 137.089261 61.498656 137.089261 137.089261S826.739311 904.117632 751.148705 904.117632z"  ></path></symbol><symbol id="icon-hj2" viewBox="0 0 1024 1024"><path d="M963.66 256.607c0-0.244 0-0.607-0.126-0.851 0-0.369 0-0.614-0.119-0.978 0-0.369-0.119-0.733-0.119-1.104 0-0.244 0-0.487-0.126-0.725 0-0.369-0.119-0.859-0.244-1.222 0-0.244-0.119-0.369-0.119-0.613-0.126-0.365-0.126-0.852-0.245-1.216 0-0.244-0.126-0.369-0.126-0.613-0.119-0.365-0.244-0.734-0.364-1.222-0.126-0.244-0.126-0.49-0.244-0.609l-0.369-1.095c-0.119-0.245-0.119-0.49-0.244-0.734-0.121-0.369-0.245-0.613-0.365-0.978-0.126-0.244-0.244-0.613-0.369-0.851-0.119-0.244-0.238-0.613-0.364-0.859-0.119-0.364-0.244-0.607-0.364-0.977l-0.371-0.734c-0.119-0.364-0.364-0.725-0.487-0.971-0.119-0.245-0.244-0.371-0.364-0.614-0.244-0.364-0.369-0.733-0.614-1.097-0.119-0.126-0.244-0.369-0.364-0.487l-0.733-1.097c-0.119-0.126-0.244-0.369-0.365-0.487-0.244-0.369-0.487-0.733-0.733-0.978-0.126-0.244-0.244-0.369-0.487-0.613-0.245-0.238-0.49-0.607-0.734-0.851-0.244-0.245-0.487-0.49-0.607-0.734-0.244-0.244-0.369-0.487-0.614-0.733-0.851-0.972-1.829-1.83-2.681-2.682-0.245-0.244-0.49-0.369-0.734-0.614-0.244-0.244-0.487-0.487-0.733-0.607-0.245-0.244-0.614-0.487-0.859-0.733-0.238-0.121-0.364-0.365-0.607-0.49-0.365-0.244-0.734-0.487-0.978-0.733-0.119-0.119-0.364-0.244-0.487-0.365l-1.097-0.733c-0.119-0.119-0.364-0.244-0.487-0.364-0.365-0.244-0.734-0.369-1.097-0.614-0.244-0.119-0.369-0.244-0.613-0.364-0.365-0.126-0.734-0.369-0.972-0.487l-0.734-0.369c-0.369-0.121-0.613-0.245-0.977-0.365-0.244-0.126-0.614-0.244-0.859-0.369-0.244-0.119-0.607-0.238-0.851-0.364-0.365-0.119-0.609-0.244-0.978-0.364-0.244-0.126-0.487-0.126-0.733-0.245l-1.097-0.369c-0.244-0.119-0.487-0.119-0.609-0.244-0.369-0.119-0.733-0.244-1.22-0.364-0.245 0-0.371-0.126-0.614-0.126-0.364-0.119-0.851-0.244-1.216-0.244-0.244 0-0.487-0.121-0.613-0.121-0.364-0.126-0.852-0.126-1.222-0.244-0.244 0-0.482-0.126-0.725-0.126-0.369 0-0.734-0.119-1.104-0.119-0.364 0-0.607 0-0.978-0.126-0.244 0-0.607 0-0.851-0.119h-242.407c-21.604 0-39.062 17.456-39.062 39.062 0 21.604 17.458 39.055 39.062 39.055h146.102l-3.171 3.177-217.27 217.265 0.369 0.369-49.676 49.676-155.87-155.87c-7.694-7.689-17.827-11.472-27.953-11.472-10.13-0.126-20.263 3.659-27.952 11.472l-282.446 282.322c-15.258 15.258-15.258 40.041 0 55.298 15.258 15.258 40.033 15.258 55.291 0l255.108-255.11 155.746 155.751c7.813 7.815 17.945 11.593 28.076 11.474 10.126 0.119 20.382-3.659 28.070-11.474l182.964-182.969c0.734-0.734 1.347-1.342 1.956-2.075l111.564-111.564v146.109c0 21.604 17.451 39.060 39.055 39.060s39.062-17.456 39.062-39.060v-235.085c0-0.244 0.126-0.49 0.126-0.614 0-0.244 0.119-0.487 0.119-0.733 0-0.364 0.119-0.734 0.119-1.097s0-0.607 0.126-0.977c0-0.245 0-0.609 0.119-0.852-0.122-1.466-0.122-2.807-0.122-4.030v0zM963.66 256.607z"  ></path></symbol><symbol id="icon-circleyuanquan" viewBox="0 0 1024 1024"><path d="M150.1184 150.1184C250.2656 50.0736 370.8928 0 512 0c141.1072 0 261.7344 50.0736 361.8816 150.1184C973.9264 250.2656 1024 370.8928 1024 512c0 141.2096-50.0736 261.8368-150.1184 361.8816C773.7344 973.9264 653.1072 1024 512 1024c-141.1072 0-261.7344-50.0736-361.8816-150.1184C50.0736 773.8368 0 653.2096 0 512 0 370.8928 50.0736 250.2656 150.1184 150.1184zM512 41.8816c-85.2992 0-164.1472 20.8896-236.3392 62.7712C203.4688 146.432 146.432 203.4688 104.6528 275.6608 62.7712 347.9552 41.8816 426.7008 41.8816 512c0 129.6384 45.9776 240.4352 137.8304 332.288C271.5648 936.2432 382.3616 982.1184 512 982.1184c129.6384 0 240.4352-45.8752 332.288-137.8304C936.2432 752.4352 982.1184 641.6384 982.1184 512c0-129.6384-45.9776-240.3328-137.8304-332.288C752.4352 87.7568 641.6384 41.8816 512 41.8816zM512 256c-36.1472 0-70.144 7.0656-102.1952 20.8896C377.856 290.9184 349.4912 309.3504 324.9152 332.288c-22.9376 24.576-41.472 52.9408-55.3984 84.8896S248.6272 483.328 248.6272 519.3728c0 36.1472 6.9632 70.144 20.8896 102.1952s32.4608 60.3136 55.3984 84.8896C349.4912 729.4976 377.856 747.9296 409.8048 761.856 441.856 775.7824 475.8528 782.7456 512 782.7456c36.1472 0 70.144-6.9632 102.1952-20.8896C646.144 747.9296 674.5088 729.4976 699.0848 706.4576c22.9376-24.576 41.472-52.9408 55.3984-84.8896s20.8896-66.048 20.8896-102.1952c0-36.0448-6.9632-70.144-20.8896-102.1952S722.0224 356.9664 699.0848 332.288C674.5088 309.3504 646.144 290.9184 614.1952 276.8896 582.144 263.0656 548.1472 256 512 256z"  ></path></symbol><symbol id="icon-bhjlink" viewBox="0 0 1024 1024"><path d="M901.920618 465.785468c-50.993571 0-94.522533 32.698367-110.688942 78.273953L702.244627 544.059421c1.764013-10.590222 2.890616-21.423121 2.890616-32.694527 0-72.177856-40.480145-134.923579-99.898281-166.857822l34.099901-112.776268c8.829281 2.126492 18.1347 3.327588 27.724265 3.327588 64.833817 0 117.472367-52.597848 117.472367-117.589097C784.532727 52.594008 731.894177 0 667.06036 0c-64.911381 0-117.509229 52.594008-117.509229 117.470063 0 49.305587 30.248562 91.349307 73.177745 108.842756l-33.419485 110.692013c-22.548956-9.588797-47.462473-14.807112-73.540224-14.807112-49.18732 0-93.841349 18.658451-127.540374 49.309426L213.348053 196.583401l-1.886119 2.008226c19.940183-21.103648 32.256788-49.588197 32.256788-81.003297 0-64.872983-52.517212-117.470063-117.470063-117.470063-64.913685 0-117.511533 52.59708-117.511533 117.470063 0 65.034255 52.59708 117.592169 117.511533 117.592169 31.412796 0 59.898881-12.358075 80.921125-32.335888l-6.179038 6.056931 174.960609 174.879973c-30.729308 33.66293-49.506025 78.47516-49.506025 127.661712 0 43.008283 14.401627 82.685138 38.593258 114.501114l-149.845117 120.999625c-21.503757-28.044506-55.285722-46.218372-93.357532-46.218372-64.874519 0-117.430897 52.719186-117.430897 117.592169 0 64.833049 52.556378 117.470063 117.430897 117.470063 64.872983 0 117.549163-52.637014 117.549163-117.470063 0-20.541499-5.335813-39.878062-14.602834-56.68956l151.369526-122.203792c34.584487 37.633303 84.29095 61.384123 139.618142 61.384123 28.082136 0 54.602234-6.057699 78.553492-17.091805l52.716114 119.514383c-35.585143 20.222026-59.497236 58.335306-59.497236 102.106945 0 64.912149 52.637014 117.549163 117.592169 117.549163 64.872983 0 117.388659-52.637014 117.388659-117.549163 0-64.833049-52.516444-117.513069-117.388659-117.513069-15.047485 0-29.248673 2.929782-42.446133 7.903885l-52.798286-120.034294c42.807844-24.554878 75.182898-65.518073 88.46253-114.221576l88.222926 0c-1.405374 7.018422-1.96522 14.241123-1.96522 21.743362 0 64.872983 52.557914 117.509997 117.387123 117.509997 64.995089 0 117.596009-52.637014 117.596009-117.509997C1019.508947 518.383316 966.994039 465.785468 901.920618 465.785468L901.920618 465.785468zM901.920618 465.785468"  ></path></symbol><symbol id="icon-lianjie_connecting5" viewBox="0 0 1024 1024"><path d="M801.25952 251.74016l-28.9792-28.99968-150.79424 150.8352-35.1232-35.10272-99.14368 99.16416 99.14368 99.16416 99.16416-99.16416-35.10272-35.1232zM487.19872 476.8768l-29.94176 29.94176-19.61984-19.61984-99.16416 99.16416 35.10272 35.1232-150.8352 150.79424 28.95872 28.95872 150.8352-150.79424 35.10272 35.10272 99.14368-99.14368-19.61984-19.64032 29.96224-29.96224-59.92448-59.92448z m-15.48288 44.4416l15.4624-15.4624 30.98624 30.98624-15.4624 15.44192-30.98624-30.96576z" fill="" ></path></symbol><symbol id="icon-xiazai" viewBox="0 0 1024 1024"><path d="M840.5 900.3h-657c-16.5 0-29.9 13.4-29.9 29.9s13.4 29.9 29.9 29.9h657.1c16.5 0 29.9-13.4 29.9-29.9-0.1-16.6-13.5-29.9-30-29.9zM631.5 123.7V541.8H763.1L512 769.9l-251.2-228h131.7V123.7h239m0-59.7h-239c-33 0-59.7 26.7-59.7 59.7v358.4H183.5c-26.6 0-39.9 32.2-21.1 51l328.5 298.2c5.8 5.8 13.5 8.7 21.1 8.7s15.3-2.9 21.1-8.7l328.5-298.2c18.8-18.8 5.5-51-21.1-51H691.2V123.7c0-33-26.7-59.7-59.7-59.7z"  ></path></symbol><symbol id="icon-ico_reset" viewBox="0 0 1024 1024"><path d="M925.97087933 277.33133334a479.997 479.997 0 1 0 54.33566 255.9984H916.05094133a415.9974 415.9974 0 1 1-64.191599-255.9984h74.047537z"  ></path><path d="M978.64255033 61.01268534L725.33213333 371.09074734h297.59814z"  ></path></symbol><symbol id="icon-fangda" viewBox="0 0 1024 1024"><path d="M768 448a320 320 0 1 0-320 320 320 320 0 0 0 320-320z m64 0A384 384 0 1 1 448 64a384 384 0 0 1 384 384z"  ></path><path d="M681.28 726.72a32 32 0 0 1 45.44-45.44l160 160a32 32 0 0 1-45.44 45.44zM320 480a32 32 0 0 1 0-64h256a32 32 0 0 1 0 64z"  ></path><path d="M480 576a32 32 0 0 1-64 0V320a32 32 0 0 1 64 0z"  ></path></symbol><symbol id="icon-zidong" viewBox="0 0 1024 1024"><path d="M131.3 363.3c-19.2 47.3-28.9 97.3-28.9 148.7 0 51.3 9.7 101.3 28.9 148.7 7 17.2 15.1 33.8 24.3 49.7l15.8-49.1 42.8 13.8-39.8 123.8-42.8-13.9-80.9-26 13.8-42.8 52.3 16.8c-98-168.4-74.8-387.9 69.4-532.1C342.4 44.7 586.9 30.5 759.1 158.3l-32.2 32.2c-25.1-18-52.1-32.9-80.9-44.6-47.3-19.2-97.3-28.9-148.7-28.9-51.3 0-101.3 9.7-148.7 28.9-49 19.9-92.9 49.1-130.6 86.8s-66.9 81.7-86.7 130.6z m828.3-60.2l13.8-42.8-80.9-26-42.8-13.8-39.8 123.8 42.8 13.8 15-46.7c9.8 16.6 18.4 34 25.8 52.1 19.2 47.3 28.9 97.3 28.9 148.7 0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6C768.9 829 725 858.2 676 878.1c-47.3 19.2-97.3 28.9-148.7 28.9-51.3 0-101.3-9.7-148.7-28.9-28.8-11.7-55.9-26.6-80.9-44.6l-32.2 32.2c126.3 93.7 382.6 147.7 572.9-42.6 145.8-145.8 167.9-368.6 66.1-537.7l55.1 17.7zM474 241.2L295 730.4h64.8l50.5-148.2h195.3l54 148.2h70.3L539.6 241.2H474z m-45.9 288.3L479.8 386c11-30.9 19.4-62.1 25.4-93.4 6.9 26 17.9 59.9 32.8 101.5l48.2 135.5H428.1z" fill="" ></path></symbol><symbol id="icon-quanping" viewBox="0 0 1024 1024"><path d="M795.5 192H581c-19.6 0-35.6 15.7-36 35.3-0.4 20.3 16.4 36.7 36.7 36.7h128.4L581 393.1c-14 14-14 36.9 0 50.9s36.9 14 50.9 0L760 315.9v129c0 19.6 15.8 35.6 35.3 36 20.2 0.4 36.7-16.4 36.7-36.7V228.5c0-20.1-16.3-36.5-36.5-36.5zM442.2 760H313.8L443 630.9c14-14 14-36.9 0-50.9s-36.9-14-50.9 0L264 708.1V579c0-19.6-15.8-35.6-35.3-36-20.2-0.4-36.7 16.4-36.7 36.7v215.6c0 20.3 16.4 36.7 36.7 36.7H443c19.6 0 35.6-15.7 36-35.3 0.3-20.3-16.5-36.7-36.8-36.7z"  ></path><path d="M838 136c27.6 0 50 22.4 50 50v652c0 27.6-22.4 50-50 50H186c-27.6 0-50-22.4-50-50V186c0-27.6 22.4-50 50-50h652m0-72H186c-16.4 0-32.4 3.2-47.5 9.6-14.5 6.1-27.6 14.9-38.8 26.1-11.2 11.2-20 24.2-26.1 38.8-6.4 15.1-9.6 31.1-9.6 47.5v652c0 16.4 3.2 32.4 9.6 47.5 6.1 14.5 14.9 27.6 26.1 38.8 11.2 11.2 24.2 20 38.8 26.1 15.1 6.4 31.1 9.6 47.5 9.6h652c16.4 0 32.4-3.2 47.5-9.6 14.5-6.1 27.6-14.9 38.8-26.1 11.2-11.2 20-24.2 26.1-38.8 6.4-15.1 9.6-31.1 9.6-47.5V186c0-16.4-3.2-32.4-9.6-47.5-6.1-14.5-14.9-27.6-26.1-38.8-11.2-11.2-24.2-20-38.8-26.1-15.1-6.4-31.1-9.6-47.5-9.6z"  ></path></symbol><symbol id="icon-lianjieliu" viewBox="0 0 1024 1024"><path d="M280.224 425.856h348.608a29.536 29.536 0 1 0 0-59.072H280.224c-52.448 0-93.152-34.304-93.152-73.856s40.704-73.856 93.152-73.856h140.128C432.096 258.816 468.448 288 512 288s79.904-29.184 91.648-68.928h178.08a29.536 29.536 0 1 0 0-59.072h-179.584C588.896 122.784 553.728 96 512 96s-76.896 26.784-90.112 64H280.224C197.184 160 128 218.272 128 292.928s69.184 132.928 152.224 132.928z"  ></path><path d="M895.936 415.2A96 96 0 1 0 800 512c30.656 0 57.632-14.624 75.2-36.992 10.56 12.064 16.832 26.56 16.832 41.92 0 39.552-40.704 73.856-93.152 73.856H306.016A95.584 95.584 0 0 0 224 544a95.68 95.68 0 0 0-95.232 88.352C89.888 656.224 64 695.424 64 740.928c0 74.656 69.184 132.928 152.224 132.928h241.728A95.808 95.808 0 0 0 544 928a96 96 0 1 0 0-192 95.904 95.904 0 0 0-94.272 78.752H216.224c-52.448 0-93.152-34.304-93.152-73.856 0-17.504 8.32-33.792 21.76-46.72A95.808 95.808 0 0 0 224 736a95.68 95.68 0 0 0 95.008-86.144h479.84c83.072 0 152.224-58.272 152.224-132.928 0.032-41.536-21.824-77.568-55.136-101.728z"  ></path></symbol><symbol id="icon-shuaxin" viewBox="0 0 1024 1024"><path d="M512 919.552c-224.768 0-407.552-182.784-407.552-407.552 0-8.704 0.512-17.408 1.024-26.112l71.68 4.608c-0.512 7.168-0.512 14.336-0.512 21.504 0 185.344 150.528 335.872 335.872 335.872 86.528 0 168.448-32.768 230.912-92.16l49.152 52.224C716.288 880.128 616.96 919.552 512 919.552zM919.552 512h-71.68c0-11.776-0.512-23.552-2.048-35.328-17.92-171.52-161.28-300.544-334.336-300.544-67.584 0-132.096 19.968-187.904 57.344L284.16 174.08c67.072-45.568 145.92-69.632 227.84-69.632 209.408 0 384 156.672 405.504 365.056 1.536 13.824 2.048 28.16 2.048 42.496z" fill="#707070" ></path><path d="M140.288 290.816L28.16 491.52c-3.072 5.12 1.024 11.776 6.656 11.776H258.56c6.144 0 9.728-6.144 6.656-11.776L153.6 290.816c-3.072-5.632-10.752-5.632-13.312 0zM870.4 675.84L758.272 475.136c-3.072-5.12 1.024-11.776 6.656-11.776h223.744c6.144 0 9.728 6.144 6.656 11.776L883.712 675.84c-2.56 5.12-10.24 5.12-13.312 0zM270.336 202.24a35.84 35.84 0 1 0 71.68 0 35.84 35.84 0 1 0-71.68 0zM728.576 784.896a35.84 35.84 0 1 0 71.68 0 35.84 35.84 0 1 0-71.68 0z" fill="#707070" ></path></symbol><symbol id="icon-resize-" viewBox="0 0 1024 1024"><path d="M410.816 673.514667L230.997333 853.333333H384v85.333334H85.333333V640h85.333334v153.002667l179.818666-179.84 60.330667 60.373333z m-53.632-256L170.666667 230.997333V384H85.333333V85.333333h298.666667v85.333334h-153.002667l186.517334 186.517333-60.330667 60.330667z m234.666667-45.696L793.002667 170.666667H640V85.333333h298.666667v298.666667h-85.333334v-153.002667l-201.152 201.173334-60.330666-60.373334z m67.029333 226.709333L853.333333 793.002667V640h85.333334v298.666667H640v-85.333334h153.002667l-194.474667-194.453333 60.352-60.352z"  ></path></symbol><symbol id="icon-guanxitu" viewBox="0 0 1024 1024"><path d="M209.003789 401.084632l29.749895-44.948211 107.843369 71.464421-29.749895 44.894316zM682.469053 546.600421l-14.551579-51.846737 124.496842-35.031579 14.551579 51.846737zM315.068632 812.840421l-40.367158-35.678316 85.692631-96.902737 40.421053 35.732211zM597.962105 390.251789l-46.672842-26.947368 43.11579-74.64421 46.672842 26.947368zM615.639579 728.764632l41.121684-34.816 83.536842 98.735157-41.121684 34.816z" fill="#444A5C" ></path><path d="M501.221053 765.305263c-118.568421 0-215.578947-97.010526-215.578948-215.578947s97.010526-215.578947 215.578948-215.578948 215.578947 97.010526 215.578947 215.578948-97.010526 215.578947-215.578947 215.578947z m0-377.263158c-91.621053 0-161.684211 70.063158-161.684211 161.684211s70.063158 161.684211 161.684211 161.68421 161.684211-70.063158 161.68421-161.68421-75.452632-161.684211-161.68421-161.684211zM167.073684 452.715789c-59.284211 0-107.789474-48.505263-107.789473-107.789473s48.505263-107.789474 107.789473-107.789474 107.789474 48.505263 107.789474 107.789474-48.505263 107.789474-107.789474 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894737 53.894737-21.557895 53.894737-53.894737-26.947368-53.894737-53.894737-53.894737zM253.305263 948.547368c-59.284211 0-107.789474-48.505263-107.789474-107.789473s48.505263-107.789474 107.789474-107.789474 107.789474 48.505263 107.789474 107.789474-48.505263 107.789474-107.789474 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894737 53.894737-21.557895 53.894737-53.894737-21.557895-53.894737-53.894737-53.894737zM856.926316 576.673684c-59.284211 0-107.789474-48.505263-107.789474-107.789473s48.505263-107.789474 107.789474-107.789474 107.789474 48.505263 107.789473 107.789474-48.505263 107.789474-107.789473 107.789473z m0-161.68421c-32.336842 0-53.894737 21.557895-53.894737 53.894737s21.557895 53.894737 53.894737 53.894736 53.894737-21.557895 53.894737-53.894736-21.557895-53.894737-53.894737-53.894737zM662.905263 350.315789C592.842105 350.315789 528.168421 291.031579 528.168421 215.578947s59.284211-134.736842 134.736842-134.736842 134.736842 59.284211 134.736842 134.736842-59.284211 134.736842-134.736842 134.736842z m0-215.578947c-43.115789 0-80.842105 37.726316-80.842105 80.842105s37.726316 80.842105 80.842105 80.842106 80.842105-37.726316 80.842105-80.842106-32.336842-80.842105-80.842105-80.842105zM749.136842 921.6c-43.115789 0-80.842105-37.726316-80.842105-80.842105s37.726316-80.842105 80.842105-80.842106 80.842105 37.726316 80.842105 80.842106-37.726316 80.842105-80.842105 80.842105z m0-107.789474c-16.168421 0-26.947368 10.778947-26.947368 26.947369s10.778947 26.947368 26.947368 26.947368 26.947368-10.778947 26.947369-26.947368-10.778947-26.947368-26.947369-26.947369z" fill="#444A5C" ></path></symbol><symbol id="icon-tupian" viewBox="0 0 1024 1024"><path d="M938.666667 553.92V768c0 64.8-52.533333 117.333333-117.333334 117.333333H202.666667c-64.8 0-117.333333-52.533333-117.333334-117.333333V256c0-64.8 52.533333-117.333333 117.333334-117.333333h618.666666c64.8 0 117.333333 52.533333 117.333334 117.333333v297.92z m-64-74.624V256a53.333333 53.333333 0 0 0-53.333334-53.333333H202.666667a53.333333 53.333333 0 0 0-53.333334 53.333333v344.48A290.090667 290.090667 0 0 1 192 597.333333a286.88 286.88 0 0 1 183.296 65.845334C427.029333 528.384 556.906667 437.333333 704 437.333333c65.706667 0 126.997333 16.778667 170.666667 41.962667z m0 82.24c-5.333333-8.32-21.130667-21.653333-43.648-32.917333C796.768 511.488 753.045333 501.333333 704 501.333333c-121.770667 0-229.130667 76.266667-270.432 188.693334-2.730667 7.445333-7.402667 20.32-13.994667 38.581333-7.68 21.301333-34.453333 28.106667-51.370666 13.056-16.437333-14.634667-28.554667-25.066667-36.138667-31.146667A222.890667 222.890667 0 0 0 192 661.333333c-14.464 0-28.725333 1.365333-42.666667 4.053334V768a53.333333 53.333333 0 0 0 53.333334 53.333333h618.666666a53.333333 53.333333 0 0 0 53.333334-53.333333V561.525333zM320 480a96 96 0 1 1 0-192 96 96 0 0 1 0 192z m0-64a32 32 0 1 0 0-64 32 32 0 0 0 0 64z"  ></path></symbol><symbol id="icon-juhejiedian" viewBox="0 0 1024 1024"><path d="M533.333333 725.333333a64 64 0 1 1-64 64 64 64 0 0 1 64-64m0-85.333333a149.333333 149.333333 0 1 0 149.333334 149.333333 149.333333 149.333333 0 0 0-149.333334-149.333333z" fill="#666666" ></path><path d="M533.333333 277.333333m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M277.333333 320m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M789.333333 320m-106.666666 0a106.666667 106.666667 0 1 0 213.333333 0 106.666667 106.666667 0 1 0-213.333333 0Z" fill="#666666" ></path><path d="M512 341.333333h42.666667v384h-42.666667z" fill="#666666" ></path><path d="M741.290667 357.504l30.165333 30.165333-225.066667 225.066667-30.165333-30.165333z" fill="#666666" ></path><path d="M558.08 582.016l-30.165333 30.165333-228.693334-228.693333 30.165334-30.165333z" fill="#666666" ></path></symbol><symbol id="icon-ziyuan" viewBox="0 0 1024 1024"><path d="M236.615854 752.86913h-0.484162A241.500139 241.500139 0 0 1 0.538332 527.733676a238.78883 238.78883 0 0 1 64.684079-180.011531 242.081134 242.081134 0 0 1 149.025146-74.367324 298.534454 298.534454 0 0 1 596.003751 25.951097V300.95207a221.262156 221.262156 0 0 1 213.031398 233.075715 222.714643 222.714643 0 0 1-221.262156 209.1581h-3.098639a27.500417 27.500417 0 0 1 0-54.904001h2.711309A167.520145 167.520145 0 0 0 968.378705 531.219644a166.261323 166.261323 0 0 0-166.16449-175.363573 151.058627 151.058627 0 0 0-18.204502 1.065157 27.500417 27.500417 0 0 1-30.211725-30.308558 240.822312 240.822312 0 0 0 1.549319-27.306752 243.727285 243.727285 0 0 0-487.357738 0 27.500417 27.500417 0 0 1-27.403584 27.500417 185.627813 185.627813 0 0 0-185.240484 197.538205A186.30564 186.30564 0 0 0 237.100016 697.965129a27.500417 27.500417 0 0 1-0.484162 54.904001z"  ></path><path d="M513.266174 1021.869686a27.500417 27.500417 0 0 1-27.500417-27.403584v-484.162268a27.500417 27.500417 0 1 1 54.904001 0v484.162268a27.403584 27.403584 0 0 1-27.403584 27.403584z"  ></path><path d="M513.266174 1024a27.500417 27.500417 0 0 1-19.366491-8.037094L342.260061 864.129619a27.500417 27.500417 0 1 1 38.732981-38.732981L513.266174 957.766602l130.530147-130.336483a27.500417 27.500417 0 0 1 38.732981 38.732982L532.632664 1015.962906a27.403584 27.403584 0 0 1-19.36649 8.037094z"  ></path></symbol><symbol id="icon-add-select" viewBox="0 0 1024 1024"><path d="M544 213.333333v266.666667H810.666667v64H544V810.666667h-64V544H213.333333v-64h266.666667V213.333333z"  ></path></symbol><symbol id="icon-sami-select" viewBox="0 0 1024 1024"><path d="M810.666667 480v64H213.333333v-64z"  ></path></symbol><symbol id="icon-icon_shuaxin" viewBox="0 0 1024 1024"><path d="M512 938.666667c-55.371852 0-109.226667-10.903704-159.857778-32.237037-48.924444-20.66963-92.823704-50.251852-130.465185-87.988149-37.736296-37.736296-67.318519-81.635556-87.988148-130.465185-21.428148-50.631111-32.237037-104.391111-32.237037-159.857777s10.903704-109.226667 32.237037-159.857778c20.66963-48.924444 50.251852-92.823704 87.988148-130.465185 37.736296-37.736296 81.635556-67.318519 130.465185-87.988149 50.631111-21.428148 104.391111-32.237037 159.857778-32.237037 63.81037 0 125.060741 14.222222 181.854815 42.382223 54.139259 26.832593 102.684444 66.085926 140.325926 113.682963 7.300741 9.197037 5.783704 22.660741-3.508148 29.961481-9.197037 7.300741-22.660741 5.783704-29.961482-3.508148-70.257778-88.936296-175.502222-139.946667-288.711111-139.946667-202.808889 0-367.881481 165.072593-367.881481 367.881482s165.072593 367.881481 367.881481 367.881481 367.881481-165.072593 367.881481-367.881481c0-11.757037 9.576296-21.333333 21.333334-21.333334S922.548148 516.361481 922.548148 528.118519c0 55.371852-10.903704 109.226667-32.237037 159.857777-20.66963 48.924444-50.251852 92.823704-87.988148 130.465185-37.736296 37.736296-81.635556 67.318519-130.465185 87.988149-50.631111 21.428148-104.485926 32.237037-159.857778 32.237037z"  ></path><path d="M817.398519 308.242963c-11.757037 0-21.333333-9.576296-21.333334-21.333333V106.666667c0-11.757037 9.576296-21.333333 21.333334-21.333334s21.333333 9.576296 21.333333 21.333334v180.242963c0 11.757037-9.481481 21.333333-21.333333 21.333333z"  ></path><path d="M817.398519 308.242963H637.155556c-11.757037 0-21.333333-9.576296-21.333334-21.333333s9.576296-21.333333 21.333334-21.333334h180.242963c11.757037 0 21.333333 9.576296 21.333333 21.333334s-9.481481 21.333333-21.333333 21.333333z"  ></path></symbol><symbol id="icon-lianjiezhong" viewBox="0 0 1024 1024"><path d="M883.396923 298.141538a99.721846 99.721846 0 0 1-142.414769 0 103.187692 103.187692 0 0 1 0-144.423384 99.721846 99.721846 0 0 1 142.414769 0 103.187692 103.187692 0 0 1 0 144.423384zM285.144615 760.438154a87.276308 87.276308 0 0 0-124.652307 0 90.269538 90.269538 0 0 0 0 126.385231c34.422154 34.894769 90.230154 34.894769 124.652307 0a90.269538 90.269538 0 0 0 0-126.424616z m482.579693 108.307692a64.472615 64.472615 0 0 1 0-90.269538 62.345846 62.345846 0 0 1 89.00923 0c24.576 24.930462 24.576 65.378462 0 90.269538a62.345846 62.345846 0 0 1-89.00923 0zM294.006154 298.141538a103.187692 103.187692 0 0 0 0-144.423384 99.721846 99.721846 0 0 0-142.454154 0 103.187692 103.187692 0 0 0 0 144.423384 99.721846 99.721846 0 0 0 142.454154 0z m324.214154-196.01723c0 56.438154-45.095385 102.163692-100.745846 102.163692-55.611077 0-100.706462-45.725538-100.706462-102.163692C416.768 45.725538 461.863385 0 517.474462 0c55.650462 0 100.745846 45.725538 100.745846 102.124308zM517.474462 870.793846c-41.747692 0-75.539692 34.264615-75.539693 76.603077 0 42.299077 33.831385 76.603077 75.539693 76.603077 41.747692 0 75.539692-34.264615 75.539692-76.603077 0-42.299077-33.792-76.603077-75.539692-76.603077z m416.768-294.990769c-27.805538 0-50.333538-22.843077-50.333539-51.042462 0-28.199385 22.528-51.042462 50.333539-51.042461 27.844923 0 50.412308 22.843077 50.372923 51.042461 0 28.199385-22.567385 51.081846-50.372923 51.081847zM201.452308 524.8c0-56.398769-45.095385-102.124308-100.745846-102.124308C45.095385 422.596923 0 468.283077 0 524.760615c0 56.398769 45.095385 102.124308 100.706462 102.124308 55.650462 0 100.745846-45.686154 100.745846-102.124308z"  ></path></symbol><symbol id="icon-loading" viewBox="0 0 1024 1024"><path d="M563.2 819.2a102.4 102.4 0 1 1 0 204.8 102.4 102.4 0 0 1 0-204.8z m-320.4608-153.6a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m592.7936 25.6a102.4 102.4 0 1 1 0 204.8 102.4 102.4 0 0 1 0-204.8zM947.2 477.1328a76.8 76.8 0 1 1 0 153.6 76.8 76.8 0 0 1 0-153.6zM128 307.2a128 128 0 1 1 0 256 128 128 0 0 1 0-256z m782.6432-40.6016a51.2 51.2 0 1 1 0 102.4 51.2 51.2 0 0 1 0-102.4zM409.6 0a153.6 153.6 0 1 1 0 307.2 153.6 153.6 0 0 1 0-307.2z m384 153.6a25.6 25.6 0 1 1 0 51.2 25.6 25.6 0 0 1 0-51.2z" fill="#555555" ></path></symbol><symbol id="icon-tupushujuyuan" viewBox="0 0 1024 1024"><path d="M851.456 588.288c-13.312 0-25.6 2.048-37.888 5.12l-90.112-155.648 55.296-31.744c18.944 17.92 44.032 29.184 72.192 29.184 57.344 0 103.936-46.592 103.936-103.936s-46.592-103.936-103.936-103.936c-57.344 0-103.936 46.592-103.936 103.936 0 5.12 0.512 10.24 1.536 15.36l-58.368 33.792-82.944-143.872c26.112-25.088 41.984-59.904 41.984-98.816 0-75.776-61.44-137.216-137.216-137.216s-137.216 61.44-137.216 137.216c0 38.912 15.872 73.728 41.984 98.816l-84.992 146.944-56.832-32.768c1.024-6.144 2.048-12.8 2.048-19.456 0-57.344-46.592-103.936-103.936-103.936-57.344 0-103.936 46.592-103.936 103.936s46.592 103.936 103.936 103.936c26.624 0 51.2-10.24 69.12-26.624l56.32 32.768-88.064 152.576c-11.776-3.584-24.576-5.12-37.888-5.12-75.776 0-137.216 61.44-137.216 137.216s61.44 137.216 137.216 137.216c64.512 0 118.272-44.544 133.12-103.936h173.056v61.44c-40.96 13.824-70.656 52.736-70.656 98.816 0 57.344 46.592 103.936 103.936 103.936s103.936-46.592 103.936-103.936c0-46.08-29.696-84.48-70.656-98.816v-61.44h173.056c14.848 59.904 69.12 103.936 133.12 103.936 75.776 0 137.216-61.44 137.216-137.216s-61.44-137.728-137.216-137.728z m-410.112-450.048c0-38.912 31.744-70.656 70.656-70.656s70.656 31.744 70.656 70.656c0 13.824-4.096 26.624-10.752 37.376-12.288 19.456-33.28 32.256-57.856 33.28h-5.12c-24.576-1.024-45.568-13.824-57.856-33.28-6.144-10.752-9.728-24.064-9.728-37.376z m32.768 132.096c11.776 3.584 24.576 5.12 37.888 5.12s25.6-2.048 37.888-5.12l82.944 143.872-124.416 72.192-118.784-68.608 84.48-147.456z m-301.568 526.336c-38.912 0-70.656-31.744-70.656-70.656 0-38.912 31.744-70.656 70.656-70.656h2.56c24.576 1.024 45.568 13.824 57.856 33.28 1.024 1.536 1.536 2.56 2.56 4.096 5.12 9.728 8.192 20.992 8.192 33.28 0 11.776-3.072 23.552-8.192 33.28-12.288 22.016-35.84 37.376-62.976 37.376z m133.12-103.936c-6.144-25.6-19.456-48.128-37.888-65.536l88.064-152.576 122.88 70.656v146.944h-173.056z m239.616-151.552l120.832-69.632 90.112 155.648c-18.432 17.408-31.744 39.936-37.888 65.536h-173.056v-151.552z m306.176 255.488c-27.136 0-50.688-15.36-62.464-37.376-5.12-9.728-8.192-21.504-8.192-33.28 0-12.288 3.072-23.552 8.192-33.28 0.512-1.536 1.536-3.072 2.56-4.096 12.288-19.456 33.28-32.768 57.856-33.28h2.56c38.912 0 70.656 31.744 70.656 70.656-0.512 38.912-32.256 70.656-71.168 70.656z"  ></path></symbol><symbol id="icon-jiedian" viewBox="0 0 1024 1024"><path d="M882.1914 744.849921c-60.501005 0-112.097749 38.645092-131.425292 92.560342H244.912146c-80.468136 0-145.955927-62.61964-145.955926-139.570043 0-77.000371 65.487791-139.570043 145.955926-139.570043h136.312143c19.497433 53.585462 70.934281 91.950735 131.205434 91.950735 60.241173 0 111.688014-38.375266 131.205434-91.950735h136.452052C914.210763 558.280171 1023.340425 453.92743 1023.340425 325.660102S914.210763 93.040033 780.077216 93.040033H273.093982c-19.197627-54.165089-70.944274-93.040033-131.595182-93.040033C64.508422 0 1.928757 62.569672 1.928757 139.560049c0 76.950403 62.579665 139.570043 139.570043 139.570043 60.640915 0 112.377569-38.894931 131.585189-93.040033h506.993227c80.468136 0 145.955927 62.61964 145.955927 139.570043 0 77.000371-65.487791 139.570043-145.955927 139.570043H644.414655c-18.887826-54.734722-70.924287-94.139324-131.974938-94.139325-61.090625 0-113.097105 39.394609-131.974938 94.139325H244.912146c-134.133547 0-243.263209 104.352741-243.263209 232.620069 0 128.267328 109.129663 232.620069 243.263209 232.620069h505.524174c19.057717 54.394941 70.9043 93.529717 131.75508 93.529717 76.950403 0 139.570043-62.61964 139.570043-139.570043 0.009994-77.000371-62.61964-139.580036-139.570043-139.580036zM141.428845 207.036558c-37.166045 0-67.376574-30.230515-67.376574-67.376573 0-37.166045 30.210528-67.376574 67.376574-67.376574 37.146058 0 67.376574 30.210528 67.376573 67.376574 0 37.146058-30.230515 67.376574-67.376573 67.376573z m371.000878 236.257725c37.146058 0 67.376574 30.210528 67.376574 67.376574 0 37.146058-30.230515 67.376574-67.376574 67.376573-37.166045 0-67.376574-30.230515-67.376574-67.376573 0.009994-37.176039 30.210528-67.376574 67.376574-67.376574z m369.761677 508.502254c-37.166045 0-67.376574-30.230515-67.376574-67.376573 0-37.166045 30.210528-67.376574 67.376574-67.376574 37.146058 0 67.376574 30.210528 67.376574 67.376574 0 37.146058-30.230515 67.376574-67.376574 67.376573z"  ></path></symbol><symbol id="icon-shitujiedianxianshi" viewBox="0 0 1367 1024"><path d="M1235.403267 512.03593a130.596433 130.596433 0 0 0-42.68749 7.796802l-193.295715-290.430872A149.113837 149.113837 0 1 0 724.647767 149.48464a151.777744 151.777744 0 0 0 37.229729 97.849864l-194.920048 357.873209a220.519548 220.519548 0 0 0-55.162374-8.511508 207.914718 207.914718 0 0 0-114.807909 34.046035L240.401393 443.683967a126.763005 126.763005 0 0 0-75.564005-182.380192 127.737605 127.737605 0 1 0 12.99467 239.816633l157.625345 188.422713A213.307506 213.307506 0 1 0 643.23616 643.282096l190.956674-350.856087a164.187654 164.187654 0 0 0 39.56877 6.172468 143.591102 143.591102 0 0 0 60.555162-12.99467l192.516034 288.026859a121.760057 121.760057 0 0 0-18.582377 64.973349 128.127445 128.127445 0 1 0 127.152844-126.568085zM129.621832 448.362048a68.157044 68.157044 0 1 1 68.157044-68.092071A68.157044 68.157044 0 0 1 129.621832 448.362048z m528.948039 365.670011a145.86517 145.86517 0 1 1-145.86517-145.86517 145.86517 145.86517 0 0 1 145.86517 145.86517z m215.12676-577.937944a87.389155 87.389155 0 1 1 87.389155-87.389155 87.389155 87.389155 0 0 1-87.389155 87.389155z m365.085251 474.305451a68.157044 68.157044 0 1 1 68.222017-68.416937 68.157044 68.157044 0 0 1-68.222017 68.157044z"  ></path></symbol><symbol id="icon-shituxianshiquanbujiedian" viewBox="0 0 1367 1024"><path d="M1235.403267 512.03593a130.596433 130.596433 0 0 0-42.68749 7.796802l-193.295715-290.430872A149.113837 149.113837 0 1 0 724.647767 149.48464a151.777744 151.777744 0 0 0 37.229729 97.849864l-194.920048 357.873209a220.519548 220.519548 0 0 0-55.162374-8.511508 207.914718 207.914718 0 0 0-114.807909 34.046035L240.401393 443.683967a126.763005 126.763005 0 0 0-75.564005-182.380192 127.737605 127.737605 0 1 0 12.99467 239.816633l157.625345 188.422713A213.307506 213.307506 0 1 0 643.23616 643.282096l190.956674-350.856087a164.187654 164.187654 0 0 0 39.56877 6.172468 143.591102 143.591102 0 0 0 60.555162-12.99467l192.516034 288.026859a121.760057 121.760057 0 0 0-18.582377 64.973349 128.127445 128.127445 0 1 0 127.152844-126.568085zM129.621832 448.362048a68.157044 68.157044 0 1 1 68.157044-68.092071A68.157044 68.157044 0 0 1 129.621832 448.362048z m528.948039 365.670011a145.86517 145.86517 0 1 1-145.86517-145.86517 145.86517 145.86517 0 0 1 145.86517 145.86517z m215.12676-577.937944a87.389155 87.389155 0 1 1 87.389155-87.389155 87.389155 87.389155 0 0 1-87.389155 87.389155z m365.085251 474.305451a68.157044 68.157044 0 1 1 68.222017-68.416937 68.157044 68.157044 0 0 1-68.222017 68.157044z"  ></path></symbol><symbol id="icon-suoxiao" viewBox="0 0 1024 1024"><path d="M768 448a320 320 0 1 0-320 320 320 320 0 0 0 320-320z m64 0A384 384 0 1 1 448 64a384 384 0 0 1 384 384z"  ></path><path d="M681.28 726.72a32 32 0 0 1 45.44-45.44l160 160a32 32 0 0 1-45.44 45.44zM288 480a32 32 0 0 1 0-64h320a32 32 0 0 1 0 64z"  ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1024 1024"><path d="M922.243 97.755c11.49 11.489 11.673 30.002 0.547 41.713l-0.547 0.562-109.119 109.1c57.22 78.348 42.673 195.388-35.778 273.839l-92.83 92.585c-11.572 11.54-30.264 11.653-41.97 0.253l-45.746-44.55-18.089 18.086a29.891 29.891 0 0 1-7.171 5.3l48.764 47.489c11.947 11.638 12.06 30.804 0.248 42.585l-95.875 95.629c-77.416 77.417-192.412 92.603-270.72 38.004L144.04 928.245c-11.676 11.673-30.606 11.673-42.282 0-11.49-11.489-11.673-30.002-0.547-41.713l0.547-0.562 109.677-109.657c-55.981-78.335-41.131-194.413 36.833-272.377l92.831-92.585c11.571-11.54 30.263-11.653 41.969-0.254l42.587 41.474a29.935 29.935 0 0 1 3.678-4.741l0.548-0.562 19.54-19.538-44.11-42.957c-11.828-11.522-12.057-30.422-0.6-42.23l0.351-0.355 95.875-95.63c76.927-76.926 190.96-92.408 269.23-39.03L879.961 97.755c11.676-11.673 30.606-11.673 42.282 0zM362.451 474.49l-71.916 71.727-1.884 1.911c-61.822 63.545-67.916 156.289-16.185 208.02C324.72 808.4 418.82 801.655 482.43 738.044l74.422-74.234-194.401-189.32z m129.807-5.04l-20.096 20.094a30.035 30.035 0 0 1-4.643 3.8l63.25 61.595a29.82 29.82 0 0 1 5.113-7.308l0.547-0.561 17.532-17.531-61.703-60.089z m260.889-198.691c-52.254-52.254-146.353-45.509-209.964 18.102l-74.422 74.234 194.4 189.322 71.939-71.75 1.862-1.888c61.822-63.545 67.916-156.29 16.185-208.02z" fill="#333333" ></path></symbol><symbol id="icon-xiantiao" viewBox="0 0 1024 1024"><path d="M827.076923 157.538462a39.384615 39.384615 0 1 1-14.375385 76.051692L233.590154 812.701538a39.384615 39.384615 0 1 1-22.291692-22.291692L790.409846 211.298462A39.384615 39.384615 0 0 1 827.076923 157.538462z" fill="#333333" ></path></symbol></svg>', l = (l = document.getElementsByTagName("script"))[l.length - 1].getAttribute("data-injectcss");
  if (l && !i.__iconfont__svg__cssinject__) {
    i.__iconfont__svg__cssinject__ = !0;
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (h) {
      console && console.log(h);
    }
  }
  function r() {
    s || (s = !0, t());
  }
  n = function() {
    var h, f, d, m;
    (m = document.createElement("div")).innerHTML = c, c = null, (d = m.getElementsByTagName("svg")[0]) && (d.setAttribute("aria-hidden", "true"), d.style.position = "absolute", d.style.width = 0, d.style.height = 0, d.style.overflow = "hidden", h = d, (f = document.body).firstChild ? (m = h, (d = f.firstChild).parentNode.insertBefore(m, d)) : f.appendChild(h));
  }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(n, 0) : (e = function() {
    document.removeEventListener("DOMContentLoaded", e, !1), n();
  }, document.addEventListener("DOMContentLoaded", e, !1)) : document.attachEvent && (t = n, o = i.document, s = !1, (a = function() {
    try {
      o.documentElement.doScroll("left");
    } catch {
      return void setTimeout(a, 50);
    }
    r();
  })(), o.onreadystatechange = function() {
    o.readyState == "complete" && (o.onreadystatechange = null, r());
  });
}(window), mt = yt, gt = (i) => (i = i.replace("#", ""), i = i.replace("(", ""), i = i.replace(")", ""), i = i.replace(/,/, "-"), i), ue = (i) => {
  try {
    if ("touches" in i && i.touches || "targetTouches" in i && i.targetTouches)
      return !0;
  } catch {
  }
  return !1;
}, ze = (i) => i instanceof TouchEvent ? {
  clientX: i.touches[0].clientX,
  clientY: i.touches[0].clientY
} : {
  clientX: i.clientX,
  clientY: i.clientY
}, u = (...i) => {
  typeof window < "u" && window.relationGraphDebug && console.log("[relation-graph:debug]", ...i);
}, Ae = (i, n, e) => i ? i.classList.contains(n) ? i : i.classList.contains(e) ? null : Ae(i.parentElement, n, e) : null, vt = async (i) => new Promise((n, e) => {
  setTimeout(() => {
    n();
  }, i);
}), X = (i) => typeof i == "string" ? Number.parseInt(i) : i, _t = (i) => {
  console.log(
    `%c relation-graph${i ? "" : "/" + i} %c Version v${je} %c More info: https://github.com/seeksdream/relation-graph %c`,
    "background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff",
    "background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff",
    "background:#fff ; padding: 1px; border-radius: 0 3px 3px 0;  color: #41b883",
    "background:transparent"
  ), ft || console.error(
    "[relation-graph]Please introduce component screenfull, for example:https://cdnjs.cloudflare.com/ajax/libs/screenfull.js/5.1.0/screenfull.min.js"
  ), ut || console.error(
    "[relation-graph]Please introduce component html2canvas, for example:https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"
  );
}, Re = (i) => ({
  onNodeClick: i.onNodeClick,
  onNodeExpand: i.onNodeExpand,
  onNodeDragging: i.onNodeDragging,
  onNodeDragStart: i.onNodeDragStart,
  onNodeDragEnd: i.onNodeDragEnd,
  onNodeCollapse: i.onNodeCollapse,
  onLineClick: i.onLineClick,
  onImageDownload: i.onImageDownload,
  onCanvasDragEnd: i.onCanvasDragEnd,
  beforeChangeLayout: i.beforeChangeLayout,
  onContextmenu: i.onContextmenu,
  onCanvasClick: i.onCanvasClick,
  onCanvasSelectionEnd: i.onCanvasSelectionEnd,
  onImageSaveAsFile: i.onImageSaveAsFile
}), Ce = (i) => {
  if (i.id === void 0)
    throw console.log("node must has id:", i), new Error("node must has option[id]:");
  const n = {
    id: i.id,
    text: i.text !== void 0 ? i.text : "",
    type: i.type !== void 0 ? i.type : "node",
    isShow: !0,
    isHide: i.isHide !== void 0 ? i.isHide : !1,
    expanded: i.expanded !== void 0 ? i.expanded : !0,
    junctionPoint: i.junctionPoint !== void 0 ? i.junctionPoint : void 0,
    alignItems: i.alignItems !== void 0 ? i.alignItems : void 0,
    selected: i.selected !== void 0 ? i.selected : !1,
    flashing: void 0,
    dragging: !1,
    styleClass: i.styleClass !== void 0 ? i.styleClass : "",
    className: i.className !== void 0 ? i.className : "",
    targetNodes: [],
    targetFrom: [],
    targetTo: [],
    nodeShape: i.nodeShape !== void 0 ? i.nodeShape : void 0,
    borderWidth: i.borderWidth !== void 0 ? i.borderWidth : void 0,
    borderColor: i.borderColor !== void 0 ? i.borderColor : void 0,
    fontColor: i.fontColor !== void 0 ? i.fontColor : void 0,
    color: i.color !== void 0 ? i.color : void 0,
    opacity: i.opacity !== void 0 ? i.opacity : 1,
    fixed: i.fixed !== void 0 ? i.fixed : !1,
    width: i.width !== void 0 ? i.width : void 0,
    height: i.height !== void 0 ? i.height : void 0,
    force_weight: i.force_weight,
    x: i.x !== void 0 ? i.x : 0,
    y: i.y !== void 0 ? i.y : 0,
    Fx: 0,
    Fy: 0,
    offset_x: i.offset_x !== void 0 ? i.offset_x : 0,
    offset_y: i.offset_y !== void 0 ? i.offset_y : 0,
    expandHolderPosition: i.expandHolderPosition !== void 0 ? i.expandHolderPosition : void 0,
    innerHTML: i.innerHTML !== void 0 ? i.innerHTML : void 0,
    html: i.html !== void 0 ? i.html : void 0,
    disableDefaultClickEffect: i.disableDefaultClickEffect !== void 0 ? i.disableDefaultClickEffect : void 0,
    disableDrag: i.disableDrag !== void 0 ? i.disableDrag : !1,
    singleNode: !1,
    data: i.data !== void 0 ? i.data : {}
  };
  return n.lot = {
    childs: [],
    parent: void 0,
    eached: !1,
    strength: 0
  }, n.el === void 0 && (n.el = { offsetWidth: 50, offsetHeight: 50 }), n.width !== void 0 && (n.el.offsetWidth = n.width), n.height !== void 0 && (n.el.offsetHeight = n.height), n;
}, xt = [
  "Fx",
  "Fy",
  "appended",
  "el",
  "targetFrom",
  "targetNodes",
  "targetTo",
  "type",
  "lot",
  "seeks_id"
], Te = (i) => {
  if (!i)
    return;
  const n = {};
  return Object.keys(i).forEach((e) => {
    xt.includes(e) || i[e] !== void 0 && (n[e] = i[e]);
  }), n;
}, Lt = {
  json2Node: Ce,
  transNodeToJson: Te
}, wt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json2Node: Ce,
  transNodeToJson: Te,
  default: Lt
}, Symbol.toStringTag, { value: "Module" })), Le = (i) => {
  if (i.from === void 0)
    throw console.log("error,line must has option[from]:", i), new Error("error,line must has option[from]:");
  if (i.to === void 0)
    throw console.log("error,line must has option[to]:", i), new Error("error,line must has option[to]:");
  if (typeof i.from != "string")
    throw console.log("error line from, must be string:", i), new TypeError("error line from, must be string:");
  if (typeof i.to != "string")
    throw console.log("error line to, must be string:", i), new TypeError("error line to, must be string:");
  const n = {
    from: i.from,
    to: i.to,
    text: i.text !== void 0 ? i.text : "",
    textOffset_x: i.textOffset_x !== void 0 ? i.textOffset_x : void 0,
    textOffset_y: i.textOffset_y !== void 0 ? i.textOffset_y : void 0,
    color: i.color !== void 0 ? i.color : void 0,
    opacity: i.opacity !== void 0 ? i.opacity : 1,
    fontColor: i.fontColor !== void 0 ? i.fontColor : void 0,
    lineWidth: i.lineWidth !== void 0 ? i.lineWidth : void 0,
    lineShape: i.lineShape !== void 0 ? i.lineShape : void 0,
    styleClass: i.styleClass !== void 0 ? i.styleClass : void 0,
    isHide: i.isHide !== void 0 ? i.isHide : !1,
    arrow: i.arrow !== void 0 ? i.arrow : void 0,
    animation: i.animation !== void 0 ? i.animation : 0,
    dashType: i.dashType !== void 0 ? i.dashType : 0,
    disableDefaultClickEffect: i.disableDefaultClickEffect !== void 0 ? i.disableDefaultClickEffect : !1,
    showStartArrow: i.showStartArrow !== void 0 ? i.showStartArrow : !1,
    showEndArrow: i.showEndArrow !== void 0 ? i.showEndArrow : !0,
    useTextPath: i.useTextPath !== void 0 ? i.useTextPath : void 0,
    forDisplayOnly: i.forDisplayOnly || i.from === i.to,
    fromJunctionPoint: i.fromJunctionPoint,
    toJunctionPoint: i.toJunctionPoint,
    isHideArrow: i.isHideArrow !== void 0 ? i.isHideArrow : void 0,
    hidden: !1,
    lineDirection: i.lineDirection !== void 0 ? i.lineDirection : void 0,
    reverseText: i.reverseText !== void 0 ? i.reverseText : void 0,
    data: i.data !== void 0 ? i.data : {}
  };
  return n.isHideArrow && (n.showEndArrow = !1, n.isHideArrow = !1), n;
}, Ct = ["arrow", "id", "reverseText", "isReverse"], $e = (i, n) => {
  !i || i.relations.forEach((e) => {
    const t = {};
    Object.keys(e).forEach((o) => {
      Ct.includes(o) || e[o] !== void 0 && (t[o] = e[o]);
    }), n.push(t);
  });
}, se = {
  border: "border",
  ltrb: "ltrb",
  tb: "tb",
  lr: "lr",
  left: "left",
  right: "right",
  top: "top",
  bottom: "bottom"
}, kt = {
  json2Line: Le,
  transLinkToJson: $e
}, bt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json2Line: Le,
  transLinkToJson: $e,
  JUNCTION_POINT_STYLE: se,
  default: kt
}, Symbol.toStringTag, { value: "Module" })), _ = {
  analysisNodes(i, n, e, t) {
    n.length > t.max_length && (t.max_length = n.length), e > t.max_deep && (t.max_deep = e);
    const o = {
      level: e,
      all_size: n.length,
      all_strength: 0
    };
    e === 0 && n.forEach((a) => {
      a.lot.parent = void 0;
    });
    const s = [];
    n.forEach((a) => {
      i.push(a), a.targetNodes && a.targetNodes.forEach((c) => {
        i.includes(c) || (i.push(c), c.lot.parent = a, s.push(c));
      });
    }), o.all_strength > t.max_strength && (t.max_strength = o.all_strength), s.length > 0 && _.analysisNodes(i, s, e + 1, t);
  },
  analysisNodes4Didirectional(i, n, e, t, o) {
    n.length > t.max_length && (t.max_length = n.length), e > t.max_deep && (t.max_deep = e);
    const s = {
      level: e,
      all_size: n.length,
      all_strength: 0
    }, a = [];
    n.forEach((l) => {
      l.lot || (l.lot = { childs: [] }), l.lot.eached = !0, l.lot.subling = s, l.lot.level = e, i.push(l);
    });
    let c = 0;
    n.forEach((l) => {
      let r = 0;
      if (o === 0) {
        let h = 0;
        l.targetNodes.forEach((f) => {
          f.lot || (f.lot = { eached: !1, childs: [] }), f.lot.eached || (_.isAllowShowNode(f) ? (f.lot.eached = !0, f.lot.parent = l, f.lot.index_of_parent = h++, l.lot.childs.push(f), a.push(f), r++) : l.lot.childs.push(f));
        });
      } else if (o === -1) {
        let h = 0;
        l.targetFrom.forEach((f) => {
          f.lot || (f.lot = { eached: !1, childs: [] }), f.lot.eached || (_.isAllowShowNode(f) ? (f.lot.eached = !0, f.lot.parent = l, f.lot.index_of_parent = h++, l.lot.childs.push(f), a.push(f), r++) : l.lot.childs.push(f));
        });
      } else {
        let h = 0;
        l.targetTo.forEach((f) => {
          f.lot || (f.lot = { eached: !1, childs: [] }), f.lot.eached || (_.isAllowShowNode(f) ? (f.lot.eached = !0, f.lot.parent = l, f.lot.index_of_parent = h++, l.lot.childs.push(f), a.push(f), r++) : l.lot.childs.push(f));
        });
      }
      l.lot.strength = r > 0 ? r : 1, s.all_strength += l.lot.strength, l.lot.strength_plus = s.all_strength, l.lot.index_of_level = c, l.lot.childs_size = r, c++;
    }), s.all_strength > t.max_strength && (t.max_strength = s.all_strength), a.length > 0 ? _.analysisNodes4Didirectional(i, a, e + (o === -1 ? -1 : 1), t, o) : (i.forEach((l) => {
      l.lot.childs_size > 0 && (l.lot.strengthWithChilds = 0);
    }), i.forEach((l) => {
      l.lot.childs_size === 0 && (l.lot.strengthWithChilds = 1, _.conductStrengthToParents(l));
    }), _.analysisDataTree([i[0]], 0, o));
  },
  conductStrengthToParents(i) {
    i.lot.parent && Math.abs(i.lot.level) - 1 === Math.abs(i.lot.parent.lot.level) && (i.lot.parent.lot.strengthWithChilds += 1, _.conductStrengthToParents(i.lot.parent));
  },
  analysisDataTree(i, n, e) {
    e === void 0 && (e = 1);
    const t = [];
    let o = 0;
    i.forEach((s) => {
      (s.lot.level === 0 || e === (s.lot.level < 0 ? -1 : 1)) && (s.lot.childs_size > 0 && s.lot.childs.forEach((a) => {
        t.push(a);
      }), s.lot.parent && o < s.lot.parent.lot.strengthWithChilds_from && (o = s.lot.parent.lot.strengthWithChilds_from), s.lot.strengthWithChilds_from = o, o += s.lot.strengthWithChilds);
    }), t.length > 0 && _.analysisDataTree(t, n + e, e);
  },
  isAllowShowNode(i, n = 0) {
    return n > 15 ? !0 : (!i.lot || !i.lot.parent || _.isAllowShowNode(i.lot.parent, n + 1) && i.lot.parent.expanded !== !1) && i.isShow && i.isHide !== !0;
  },
  getNodeWidth(i, n) {
    return i.el.offsetWidth || i.width || n && n.defaultNodeWidth || 50;
  },
  getNodeHeight(i, n) {
    return i.el.offsetHeight || i.height || n && n.defaultNodeHeight || 50;
  },
  getNodeXByLotX(i, n) {
    return (n.offset_x || 0) + this.getNodeXByCenterX(i, n, n.lot.x || 0);
  },
  getNodeYByLotY(i, n) {
    return (n.offset_y || 0) + this.getNodeYByCenterY(i, n, n.lot.y || 0);
  },
  getNodeXByCenterX(i, n, e) {
    return n.alignItems === "right" ? e - _.getNodeWidth(n, i) : n.alignItems === "left" ? e : e - _.getNodeWidth(n, i) / 2;
  },
  getNodeYByCenterY(i, n, e) {
    return n.alignItems === "top" ? e : n.alignItems === "bottom" ? e - _.getNodeHeight(n, i) : e - _.getNodeHeight(n, i) / 2;
  },
  getCenterXByNodeX(i, n, e) {
    return e + _.getNodeHeight(n, i) / 2;
  },
  getCenterYByNodeY(i, n, e) {
    return e + _.getNodeHeight(n, i) / 2;
  },
  getLotXByNodeX(i, n) {
    const e = n.offset_x || 0;
    return this.getCenterXByNodeX(i, n, n.x || 0) - e;
  },
  getLotYByNodeY(i, n) {
    const e = n.offset_y || 0;
    return this.getCenterYByNodeY(i, n, n.y || 0) - e;
  },
  isRectangleOverlap(i, n) {
    const e = i.x + H, t = n.x + H, o = i.el.offsetWidth - H * 2, s = n.el.offsetWidth - H * 2, a = i.y + H, c = n.y + H, l = i.el.offsetHeight - H * 2, r = n.el.offsetHeight - H * 2;
    return !(t >= e + o || t + s <= e || c >= a + l || c + r <= a);
  },
  isXOverlap(i, n, e, t) {
    return !(n >= i + e || n + t <= i);
  },
  isYOverlap(i, n, e, t) {
    return !(n >= i + e || n + t <= i);
  },
  shapesOverlap(i, n, e = 1, t = 1) {
    return this.isRectangleOverlap(i, n);
  },
  getNoOverlapLimitedPosition(i, n, e, t) {
    const o = i.x + H, s = i.y + H, a = n + H, c = t.x + H, l = i.el.offsetWidth - H * 2, r = t.el.offsetWidth - H * 2, h = e + H, f = t.y + H, d = i.el.offsetHeight - H * 2, m = t.el.offsetHeight - H * 2;
    let y = i.x, v = i.y;
    const g = this.isXOverlap(o, c, l, r), M = this.isYOverlap(s, f, d, m);
    return g ? h < f ? (y = n, v = f - d - H) : h > f && (y = n, v = f + m - H) : M && (a < c ? (y = c - l - H, v = e) : a > c && (y = c + r - H, v = e)), { x: y, y: v };
  }
}, H = 8, le = _, Mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  RGNodesAnalytic: _,
  default: le
}, Symbol.toStringTag, { value: "Module" }));
class St {
  constructor(n, e) {
    x(this, "graphOptions");
    x(this, "layoutOptions");
    x(this, "allNodes", []);
    x(this, "isMainLayouer", !0);
    x(this, "requireLinks", !1);
    x(this, "allLinks", []);
    x(this, "rootNode");
    x(this, "currentAnimationStep", 1);
    x(this, "allAnimationStep", 30);
    this.layoutOptions = n, this.graphOptions = e;
  }
  setLinks(n) {
    u("setLinks:", n.length), this.allLinks = n;
  }
  refresh() {
    this.placeNodes(this.allNodes, this.rootNode);
  }
  placeNodes(n, e) {
    this.allNodes = n, this.rootNode = e;
  }
  snapshotBeforeAnimation() {
    this.allNodes.forEach((n) => {
      !le.isAllowShowNode(n) || (n.lot.to_x = le.getNodeXByLotX(this.graphOptions, n), n.lot.to_y = le.getNodeYByLotY(this.graphOptions, n), n.lot.from_x = n.x || 0, n.lot.from_y = n.y || 0, n.lot.placed = !0);
    });
  }
  async animationLayout(n = !0) {
    n && this.snapshotBeforeAnimation();
    const e = this.rootNode;
    e && u("debug0910:create rootNode coordinates:2.1", e.x, e.y), this.currentAnimationStep = 1, this.allAnimationStep = 10, u("[LayoutAnimationEffect]start play...");
    let t = !1;
    return new Promise((o, s) => {
      this.playAnimation(() => {
        t || (t = !0, u("[LayoutAnimationEffect]played!"), this.allNodes.forEach((a) => {
          !le.isAllowShowNode(a) || (a.lot.from_x = a.x, a.lot.from_y = a.y, a.x = a.lot.to_x, a.y = a.lot.to_y);
        }), o());
      });
    });
  }
  playAnimation(n) {
    if (u("[LayoutAnimationEffect]", this.currentAnimationStep, this.allAnimationStep), this.currentAnimationStep > this.allAnimationStep) {
      n();
      return;
    }
    this.allNodes.forEach((e) => {
      if (!e.lot.placed)
        return;
      const { from_x: t, from_y: o, to_x: s, to_y: a } = e.lot;
      if (t !== void 0 && o !== void 0 && s !== void 0 && a !== void 0) {
        const c = (s - t) / this.allAnimationStep, l = (a - o) / this.allAnimationStep, r = Math.floor(t + this.currentAnimationStep * c), h = Math.floor(o + this.currentAnimationStep * l);
        (e.x !== r || e.y !== h) && (e.x = r, e.y = h);
      }
    }), this.currentAnimationStep++, requestAnimationFrame(this.playAnimation.bind(this, n));
  }
}
const ke = St;
class Et extends ke {
  constructor(e, t) {
    super(e, t);
    x(this, "enableGatherNodes", !1);
    x(this, "layoutOptions");
    x(this, "levelDistanceArr", []);
    this.layoutOptions = e, u("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((o) => Number.parseInt(o)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.enableGatherNodes = this.layoutOptions.enableGatherNodes;
  }
  async refresh() {
    u("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), await this.placeNodes(this.allNodes, this.rootNode);
  }
  analysisNodes4Didirectional(e, t, o, s, a) {
    u(`${a} level ${o} size: ${t.length}`), t.length > s.max_length && (s.max_length = t.length), o > s.max_deep && (s.max_deep = o);
    const c = {
      level: o,
      all_size: t.length,
      all_strength: 0
    }, l = [];
    t.forEach((h) => {
      h.lot || (h.lot = { childs: [] }), h.lot.eached = !0, h.lot.subling = c, h.lot.level = o, e.push(h);
    });
    let r = 0;
    t.forEach((h) => {
      let f = 0, d = a === -1 ? h.targetFrom : h.targetTo;
      o !== 0 && (d = h.targetNodes);
      let m = 0;
      d.forEach((y) => {
        y.lot || (y.lot = { eached: !1, childs: [] }), y.lot.eached || (y.lot.parent = h, _.isAllowShowNode(y) ? (y.lot.eached = !0, y.lot.index_of_parent = m++, h.lot.childs.push(y), l.push(y), f++) : h.lot.childs.push(y));
      }), h.lot.strength = f > 0 ? f : 1, c.all_strength += h.lot.strength, h.lot.strength_plus = c.all_strength, h.lot.index_of_level = r, h.lot.childs_size = f, r++;
    }), c.all_strength > s.max_strength && (s.max_strength = c.all_strength), l.length > 0 ? this.analysisNodes4Didirectional(e, l, o + a, s, a) : (e.forEach((h) => {
      h.lot.childs_size > 0 && (h.lot.strengthWithChilds = 0);
    }), e.forEach((h) => {
      h.lot.childs_size === 0 && (h.lot.strengthWithChilds = 1, _.conductStrengthToParents(h));
    }), _.analysisDataTree([e[0]], 0, a));
  }
  async placeNodes(e, t) {
    if (u("SeeksBidirectionalTreeLayouter:placeNodes"), t)
      u("layout by root:", t);
    else {
      console.error("root is null");
      return;
    }
    this.rootNode = t, this.allNodes = e, u("allNodes:", e.length), e.forEach((a) => {
      a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.strengthWithChilds_from = 0, a.lot.strengthWithChilds = 0, a.lot.placed = !1;
    });
    let o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    _.analysisNodes(o, [this.rootNode], 0, s), o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, s, -1), this.placeNodesPosition(this.rootNode, o, s), o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, s, 1), this.placeNodesPosition(this.rootNode, o, s), u("allNodes:", o.length), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout(), u("create rootNode coordinates:3", t.x, t.y)) : (this.allNodes.forEach((a) => {
      if (a.fixed === !0) {
        a.lot.placed = !0;
        return;
      }
      !_.isAllowShowNode(a) || (Number.isNaN(a.lot.x) && (u("bad lot x:", a.text, a.lot.x), a.lot.x = 0), Number.isNaN(a.lot.y) && (u("bad lot y:", a.text, a.lot.y), a.lot.y = 0), a.x = _.getNodeXByLotX(this.graphOptions, a), a.y = _.getNodeYByLotY(this.graphOptions, a), a.lot.placed = !0);
    }), u("create rootNode coordinates:1", t.x, t.y));
  }
  placeNodesPosition(e, t, o) {
    if (e.fixed !== !0) {
      const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      e.lot.x = s, e.lot.y = a, this.layoutOptions.fixedRootNode ? (e.lot.x = _.getLotXByNodeX(this.graphOptions, e), e.lot.y = _.getLotYByNodeY(this.graphOptions, e)) : this.layoutOptions.from === "top" ? e.lot.y -= this.graphOptions.viewSize.height / 2 - 100 : this.layoutOptions.from === "bottom" ? e.lot.y += this.graphOptions.viewSize.height / 2 - 200 : this.layoutOptions.from === "right" ? e.lot.x += this.graphOptions.viewSize.width / 2 - 100 : e.lot.x -= this.graphOptions.viewSize.width / 2 - 100, u("debug0910:Graph center:", e.lot.x, e.lot.y, { _center_offset_x: s, _center_offset_y: a });
    } else
      e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", e.text, e.x, e.y);
    e.lot.placed = !0, this.placeRelativePosition(e, t, o);
  }
  placeRelativePosition(e, t, o) {
    const s = this.graphOptions.viewSize;
    if (this.layoutOptions.from === "left" || this.layoutOptions.from === "right") {
      const a = X(this.layoutOptions.min_per_height) || 80, c = X(this.layoutOptions.max_per_height) || 400, l = X(this.layoutOptions.min_per_width) || 430, r = X(this.layoutOptions.max_per_width) || 650;
      let h = Math.round((s.width - 10) / (o.max_deep + 2));
      h < l && (h = l), h > r && (h = r);
      let f = Math.round(s.height / (o.max_strength + 1));
      f < a && (f = a), f > c && (f = c), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "right" ? d.lot.x = e.lot.x - this.getLevelDistance(d, d.lot.subling.level, h) : d.lot.x = e.lot.x + this.getLevelDistance(d, d.lot.subling.level, h));
      }), t.forEach((d) => {
        d.fixed !== !0 && d.lot.level !== 0 && (d.lot.y = e.lot.y + f * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      }), this.gatherNodes(t, "h", f);
    } else {
      const a = X(this.layoutOptions.min_per_height) || 350, c = X(this.layoutOptions.max_per_height) || 400, l = X(this.layoutOptions.min_per_width) || 250, r = X(this.layoutOptions.max_per_width) || 500;
      let h = Math.round((s.width - 10) / (o.max_strength + 2));
      h < l && (h = l), h > r && (h = r);
      let f = Math.round((s.height - 10) / (o.max_deep + 2));
      f < a && (f = a), f > c && (f = c), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "bottom" ? d.lot.y = e.lot.y - this.getLevelDistance(d, d.lot.subling.level, f) : d.lot.y = e.lot.y + this.getLevelDistance(d, d.lot.subling.level, f));
      }), t.forEach((d) => {
        d.fixed !== !0 && d.lot.level !== 0 && (d.lot.x = e.lot.x + h * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      }), this.gatherNodes(t, "v", h);
    }
  }
  gatherNodes(e, t, o) {
    if (!this.enableGatherNodes)
      return;
    const s = {};
    e.forEach((a) => {
      const c = a.lot.level + "";
      s[c] || (s[c] = []), s[c].push(a), a.lot.movedNodeSizeBefore = 1, a.lot.movedNodeSizeAfter = 1;
    }), e.forEach((a) => {
      if (a.fixed !== !0 && a.lot.level !== 0) {
        const c = a.lot.level + "", l = s[c];
        if (a.lot.strengthWithChilds === 1 && a.lot.childs_size <= 1) {
          const r = this.getBloomingNearByParent(a, a.lot.parent, l, t);
          r && (console.log(a.text, "bloomingNode:", r.text, r.lot.y, o), t === "h" ? a.lot.y - r.lot.y > 0 ? (a.lot.y = r.lot.y + o * r.lot.movedNodeSizeAfter, r.lot.movedNodeSizeAfter++) : (a.lot.y = r.lot.y - o * r.lot.movedNodeSizeBefore, r.lot.movedNodeSizeBefore++) : a.lot.x - r.lot.x > 0 ? (a.lot.x = r.lot.x + o * r.lot.movedNodeSizeAfter, r.lot.movedNodeSizeAfter++) : (a.lot.x = r.lot.x - o * r.lot.movedNodeSizeBefore, r.lot.movedNodeSizeBefore++));
        }
      }
    });
  }
  getBloomingNearByParent(e, t, o, s) {
    let a = 9999, c;
    for (const l of o)
      if (l.lot.childs_size > 1 && l.lot.parent === t) {
        const r = s === "h" ? l.lot.y - t.lot.y : l.lot.x - t.lot.x;
        Math.abs(r) < a && (a = Math.abs(r), c = l);
      }
    if (c && c !== e)
      return c;
  }
  getLevelDistance(e, t, o) {
    const s = Math.abs(t);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let c = 0; c < s; c++) {
        const l = this.levelDistanceArr[c] || 100;
        a += l;
      }
      return t > 0 ? a : a * -1;
    } else
      return t * o;
  }
}
const Ze = Et, Ge = 0;
function Ot(i, n, e, t, o, s, a, c, l) {
  const r = o - i, h = s - n, f = Math.sqrt(r * r + h * h), d = l * h / f, m = -(l * r) / f, y = i + d, v = n + m, g = i - e / 2, M = i + e / 2, N = n - t / 2, S = n + t / 2;
  let P = [];
  if (r !== 0) {
    let D = (g - y) / r, w = v + D * h;
    w >= N && w <= S && P.push({ x: g, y: w });
    let z = (M - y) / r, I = v + z * h;
    I >= N && I <= S && P.push({ x: M, y: I });
  }
  if (h !== 0) {
    let D = (N - v) / h, w = y + D * r;
    w >= g && w <= M && P.push({ x: w, y: N });
    let z = (S - v) / h, I = y + z * r;
    I >= g && I <= M && P.push({ x: I, y: S });
  }
  let $ = null, A = 1 / 0;
  return P.forEach((D) => {
    const w = Math.sqrt((D.x - o) ** 2 + (D.y - s) ** 2);
    w < A && (A = w, $ = D);
  }), $;
}
const Je = {
  getRectPoint(i, n, e, t, o, s, a, c, l = !1, r = 1, h = 1) {
    l && (h = r - h - 1);
    const f = h - (r - 1) / 2, d = i + o / 2, m = n + s / 2, y = e + a / 2, v = t + c / 2;
    if (r > 1) {
      const w = 14 * f, z = Ot(
        d,
        m,
        o,
        s,
        y,
        v,
        a,
        c,
        w
      );
      if (z)
        return z;
    }
    const g = d < y ? 1 : -1, M = m < v ? 1 : -1;
    if (v === m)
      return { x: d + g * o / 2, y: m };
    const N = Math.abs((y - d) / (v - m)), S = o / s;
    let P = 0, $ = 0;
    N < S ? (P = g * s / 2 * N + M * S, $ = M * s / 2) : (P = g * o / 2, $ = M * o / 2 / N + g * S);
    const A = d + P, D = m + $;
    return { x: A, y: D };
  },
  getRectPointBasic(i, n, e, t, o, s, a, c) {
    const l = i + o / 2, r = n + s / 2, h = e + a / 2, f = t + c / 2;
    let d = f === r ? 0 : (h - l) / (f - r);
    d === 0 && (d = (h - l) / (f - r + 1));
    const m = o / c;
    let y = 0, v = 0, g = "1";
    return -1 * m < d && d < m ? (g = "2", r < f ? (y = s / 2 * d, v = s / 2) : (y = -1 * s / 2 * d, v = -1 * s / 2)) : (l < h ? (y = 1 * o / 2, v = 1 * o / 2 / d) : (y = -1 * o / 2, v = -1 * o / 2 / d), g = "3"), { x: l + y, y: r + v, _case: g };
  },
  getRectJoinPoint(i, n, e, t, o, s, a, c) {
    const l = i + o / 2, r = n + s / 2, h = e + a / 2, f = t + c / 2, d = Math.round(Math.atan2(f - r, h - l) * 180 / 3.14) + 135;
    return d >= 0 && d < 90 ? { x: i + o / 2, y: n - 5 } : d >= 90 && d < 180 ? { x: i + o + 5, y: n + s / 2 } : d >= 180 && d < 270 ? { x: i + o / 2, y: n + s + 5 } : { x: i - 5, y: n + s / 2 };
  },
  getRectHJoinPoint(i, n, e, t, o, s, a) {
    const c = s / 2;
    return i + o < e ? { x: i + o + 5, y: n + c } : i + o < e + a ? { x: i - 5, y: n + c } : { x: i - 5, y: n + c };
  },
  getRectLeftJoinPoint(i, n, e, t, o, s, a) {
    const c = s / 2;
    return { x: i - 5, y: n + c };
  },
  getRectRightJoinPoint(i, n, e, t, o, s, a) {
    const c = s / 2;
    return { x: i + o + 5, y: n + c };
  },
  getRectTopJoinPoint(i, n, e, t, o, s, a) {
    return { x: i + o / 2, y: n - 5 };
  },
  getRectBottomJoinPoint(i, n, e, t, o, s, a) {
    return { x: i + o / 2, y: n + s + 5 };
  },
  getRectVJoinPoint(i, n, e, t, o, s, a, c) {
    const l = o / 2;
    return n + s < t ? { y: n + s + 5, x: i + l } : n + s < t + c ? { y: n - 5, x: i + l } : { y: n - 5, x: i + l };
  },
  getBorderPoint(i, n, e, t, o, s, a, c, l) {
    return l === 0 ? this.getCirclePoint(i, n, e, t, o, s, a, c) : this.getRectPoint(i, n, e, t, o, s, a, c);
  },
  getBorderPoint4MultiLine(i, n, e, t, o, s, a, c, l, r, h, f) {
    return l === 0 ? this.getCirclePoint4MultiLine(i, n, e, t, o, s, a, c, r, h, f) : this.getRectPoint(i, n, e, t, o, s, a, c, r, h, f);
  },
  getCirclePoint(i, n, e, t, o, s, a, c) {
    const l = e + a / 2, r = t + c / 2, h = i + o / 2, f = n + s / 2, d = l - h;
    if (d === 0)
      return { x: h, y: f - s / 2 * (r < f ? 1 : -1) };
    const y = (r - f) / d, v = Math.sqrt(1 / (1 / (o / 2) ** 2 + y ** 2 / (s / 2) ** 2)) * (l < h ? 1 : -1), g = y * v;
    return { x: h - v, y: f - g };
  },
  getCirclePoint4MultiLine(i, n, e, t, o, s, a, c, l, r, h) {
    l && (h = r - h - 1);
    const f = e + a / 2, d = t + c / 2, m = i + o / 2, y = n + s / 2, v = f - m;
    if (v === 0)
      return { x: m, y: y - s / 2 * (d < y ? 1 : -1) };
    const M = (h - (r - 1) / 2) * 14, N = d - y, S = Math.sqrt(v ** 2 + N ** 2) * M / v, P = N / v, $ = o / 2, A = s / 2, D = f < m ? 1 : -1, w = (-1 * $ ** 2 * P * S + $ * A * Math.sqrt(A ** 2 + P ** 2 * $ ** 2 - S ** 2) / D) / (A ** 2 + $ ** 2 * P ** 2), z = P * w + S;
    return { x: m - w, y: y - z };
  },
  getCirclePointBasic(i, n, e, t, o, s, a, c, l) {
    const r = i + o / 2, h = n + s / 2, f = e + a / 2, d = t + c / 2, m = f - r, y = d - h, v = Math.sqrt(m * m + y * y), g = v - l, M = g * m / v * -1, N = g * y / v * -1;
    return { x: f + M, y: d + N };
  },
  getCirclePointPlus(i, n, e, t, o, s, a, c) {
    const l = i + o / 2, r = n + s / 2, h = e + a / 2, f = t + c / 2, d = h - l, m = f - r, y = Math.sqrt(d * d + m * m), v = (y - o / 2) * d / y * -1, g = (y - s / 2) * m / y * -1;
    return { x: h + v, y: f + g };
  },
  getOvalPoint(i, n, e, t, o) {
    return {
      x: i + e * Math.sin((Ge + t * (360 / o) + 0) * Math.PI / 180),
      y: n + e * Math.cos((Ge + t * (360 / o) + 0) * Math.PI / 180) * -1
    };
  },
  getAngleType(i, n) {
    if (i >= 0 && n >= 0)
      return 1;
    if (i < 0 && n >= 0)
      return 2;
    if (i < 0 && n < 0)
      return 3;
    if (i >= 0 && n < 0)
      return 4;
  },
  getTextAngle(i, n, e, t) {
    let o = Math.atan2(t - n, e - i) * 180 / Math.PI;
    return o < 0 && (o += 360), o > 90 && o <= 270 && (o += 180), o >= 360 && (o -= 360), Math.round(o);
  },
  getTreePointFromTop(i, n, e, t, o, s) {
    return i ? {
      x: i - 300 + Math.max(600 / ((o === 1 ? 2 : o) - 1), 80) * t,
      y: n + e
    } : {
      x: (s.canvas_width - s.node_width) / 2,
      y: (s.canvas_height - s.node_height) / 2 - 200
    };
  },
  getTreePointFromRight(i, n, e, t, o, s) {
    return i ? {
      x: i - e,
      y: n - 200 + Math.max(400 / ((o === 1 ? 2 : o) - 1), 80) * t
    } : {
      x: (s.canvas_width - s.node_width) / 2 + 300,
      y: (s.canvas_height - s.node_height) / 2
    };
  },
  getTreePointFromBottom(i, n, e, t, o, s) {
    return i ? {
      x: i - 300 + Math.max(600 / ((o === 1 ? 2 : o) - 1), 80) * t,
      y: n - e
    } : {
      x: (s.canvas_width - s.node_width) / 2,
      y: (s.canvas_height - s.node_height) / 2 + 200
    };
  },
  getTreePointFromLeft(i, n, e, t, o, s) {
    return i ? {
      x: i + e,
      y: n - 200 + Math.max(400 / ((o === 1 ? 2 : o) - 1), 80) * t
    } : {
      x: (s.canvas_width - s.node_width) / 2 - 300,
      y: (s.canvas_height - s.node_height) / 2
    };
  }
}, Z = Je;
class Nt extends ke {
  constructor(e, t) {
    super(e, t);
    x(this, "layoutOptions");
    x(this, "fastStart", !1);
    x(this, "maxLayoutTimes", 300);
    x(this, "byNode", !0);
    x(this, "byLine", !0);
    x(this, "lockX", !1);
    x(this, "lockY", !1);
    x(this, "force_node_repulsion", 1);
    x(this, "force_line_elastic", 1);
    x(this, "justLayoutSingleNode", !1);
    x(this, "layoutTimes", 0);
    x(this, "prev10", []);
    x(this, "visibleNodes", []);
    x(this, "viewUpdate");
    x(this, "maxVaildLineLength", 400);
    x(this, "minVaildLineLength", 30);
    x(this, "zeroEffectNodeDistance", 400);
    x(this, "minNodeDistance", 30);
    x(this, "maxMoveSpeed", 50);
    this.layoutOptions = e, this.layoutOptions.fastStart !== void 0 && (this.fastStart = this.layoutOptions.fastStart), this.layoutOptions.maxLayoutTimes !== void 0 && (this.maxLayoutTimes = this.layoutOptions.maxLayoutTimes), this.layoutOptions.byNode !== void 0 && (this.byNode = this.layoutOptions.byNode), this.layoutOptions.byLine !== void 0 && (this.byLine = this.layoutOptions.byLine), this.layoutOptions.force_node_repulsion !== void 0 && (this.force_node_repulsion = this.layoutOptions.force_node_repulsion), this.layoutOptions.force_line_elastic !== void 0 && (this.force_line_elastic = this.layoutOptions.force_line_elastic);
  }
  refresh() {
    this.placeNodes(this.allNodes, this.rootNode);
  }
  placeNodes(e, t) {
    if (u("!!!SeeksForceLayouter.placeNodes"), t)
      u("layout by root:", t);
    else {
      u("root is null:", t);
      return;
    }
    if (this.allNodes = e, this.rootNode = t, this.layoutOptions.fixedRootNode) {
      if (!Number.isNaN(t.x) && t.x)
        t.lot.x = _.getLotXByNodeX(this.graphOptions, t), t.lot.y = _.getLotYByNodeY(this.graphOptions, t);
      else {
        const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
        t.lot.x = 0 + s, t.lot.y = 0 + a;
      }
      const o = this.easyAnalysisNodes(t);
      this.easyPlaceRelativePosition(t, o), o.forEach((s) => {
        if (s.fixed === !0 || !_.isAllowShowNode(s))
          return;
        const a = s.offset_x || 0, c = s.offset_y || 0;
        s.x = s.lot.x + a - _.getNodeWidth(s, this.graphOptions) / 2, s.y = s.lot.y + c - _.getNodeHeight(s, this.graphOptions) / 2, s.lot.placed = !0;
      });
    } else
      this.fastStart ? (u("!!!initNodesPosition fastStart"), this.allNodes.forEach((o) => {
        o.fixed !== !0 && (o.lot.placed || (o.x || (o.x = Math.floor(Math.random() * 200) - 100), o.x || (o.y = Math.floor(Math.random() * 200) - 100), o.lot.placed = !0));
      })) : (u("!!!initNodesPosition....."), this.easyPlaceGroupNodes(this.rootNode).forEach((s) => {
        if (s.fixed === !0 || !_.isAllowShowNode(s))
          return;
        const a = s.offset_x || 0, c = s.offset_y || 0;
        s.x = s.lot.x + a - _.getNodeWidth(s, this.graphOptions) / 2, s.y = s.lot.y + c - _.getNodeHeight(s, this.graphOptions) / 2, s.lot.placed = !0;
      }));
    if (u("Start Auto Layout....."), this.updateVisibleNodes(), this.isMainLayouer && this.graphOptions.autoLayouting) {
      u("!!!autoLayouting.....");
      return;
    }
    this.autoLayout(!0);
  }
  easyPlaceGroupNodes(e) {
    if (u("[layout canvasOffset]", this.graphOptions.viewSize, this.graphOptions.canvasSize), e) {
      e.fixed ? (e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("root fixed position:", e.lot.x, e.lot.y)) : this.layoutOptions.fixedRootNode ? (console.error("xxxxxxxx"), e.lot.x = _.getLotXByNodeX(this.graphOptions, e), e.lot.y = _.getLotYByNodeY(this.graphOptions, e)) : (e.lot.x = 0, e.lot.y = 0, u("root position:", e.lot.x, e.lot.y));
      const t = this.easyAnalysisNodes(e);
      return this.easyPlaceRelativePosition(e, t), t;
    }
    return [];
  }
  easyAnalysisNodes(e) {
    this.allNodes.forEach((s) => {
      s.lot.eached = !1, s.lot.notLeafNode = !1, s.lot.childs = [], s.lot.parent = void 0, s.lot.index_of_parent = 0, s.lot.strength = 0, s.lot.placed = !1;
    });
    const t = [], o = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    return _.analysisNodes4Didirectional(t, [e], 0, o, 0), t;
  }
  easyPlaceRelativePosition(e, t) {
    t.forEach((s) => {
      if (s.lot.subling.level === 1) {
        const a = s.lot.subling;
        if (a) {
          const c = Z.getOvalPoint(e.lot.x, e.lot.y, a.level * 50, s.lot.strength_plus - s.lot.strength / 2, a.all_strength);
          s.lot.x = c.x, s.lot.y = c.y;
        }
      }
    }), t.forEach((s) => {
      const a = s.lot.subling;
      if (a && a.level > 1) {
        const c = s.lot.parent.lot.strength_plus - s.lot.parent.lot.strength, r = (s.lot.parent.lot.strength_plus - c) / (s.lot.parent.lot.childs.length + 1) * (s.lot.index_of_parent + 1), h = Z.getOvalPoint(e.lot.x, e.lot.y, (a.level - 1) * 40 + 50, c + r, s.lot.parent.lot.subling.all_strength);
        s.lot.x = h.x, s.lot.y = h.y;
      }
    });
  }
  updateVisibleNodes(e) {
    this.visibleNodes = [], e && (this.allNodes = e), this.allNodes.forEach((t) => {
      _.isAllowShowNode(t) && (t.Fx = 0, t.Fy = 0, t.lot ? t.lot.placed = !0 : (u("node miss lot:", t.text), t.lot = {
        placed: !0,
        childs: []
      }), this.visibleNodes.push(t));
    }), u("visibleNodes:", this.visibleNodes.length);
  }
  autoLayout(e, t) {
    this.layoutTimes = 0, this.updateVisibleNodes(), this.viewUpdate = t, this.doForceLayout(0);
  }
  doForceLayout(e) {
    if (this.graphOptions.instanceDestroyed) {
      u("stop layout:instanceDestroyed");
      return;
    }
    let t = 0;
    if (e > 0) {
      if (this.prev10.length >= 10) {
        this.prev10.splice(0, 1);
        const o = this.prev10[this.prev10.length - 1] - this.prev10[0];
        t = Math.round(1e3 / (o / 10));
      }
      this.prev10.push(e);
    }
    if (u("this.layoutTimes:", this.layoutTimes, "of", this.maxLayoutTimes, "Current refresh rate:", t, "Hz", this.requireLinks, this.allLinks.length), this.layoutTimes > this.maxLayoutTimes) {
      this.isMainLayouer && (this.graphOptions.autoLayouting = !1);
      return;
    }
    if (this.isMainLayouer && (this.graphOptions.autoLayouting = !0), this.layoutTimes++, this.visibleNodes.forEach((o) => {
      o.Fx = 0, o.Fy = 0;
    }), this.byNode)
      for (const o in this.visibleNodes) {
        const s = this.visibleNodes[o];
        if (!(this.justLayoutSingleNode && !s.singleNode) && !s.fixed && s.lot.placed === !0)
          for (const a in this.visibleNodes) {
            const c = this.visibleNodes[a];
            c.lot.placed === !0 && o !== a && this.addGravityByNode(s, c);
          }
      }
    if (this.byLine)
      if (this.allLinks && this.allLinks.length > 0) {
        for (const o of this.allLinks)
          if (!o.forDisplayOnly) {
            const s = o.relations.reduce((a, c) => a + (c.force_elastic || 1), 0);
            (this.visibleNodes.includes(o.fromNode) || this.visibleNodes.includes(o.toNode)) && this.addElasticByLine(
              o.fromNode,
              o.toNode,
              s
            );
          }
      } else
        for (const o of this.visibleNodes)
          o.lot.parent && this.addElasticByLine(
            o.lot.parent,
            o
          );
    for (const o in this.visibleNodes)
      this.applyToNodePosition(this.visibleNodes[o]);
    this.viewUpdate && this.viewUpdate(), requestAnimationFrame(this.doForceLayout.bind(this));
  }
  stop() {
    u("[SeeksForceLayouter]stop:", this.graphOptions.autoLayouting), this.layoutTimes = 1e6;
  }
  getX(e) {
    const t = (e.width || e.el.offsetWidth || 60) / 2;
    return e.x + t;
  }
  getY(e) {
    const t = (e.height || e.el.offsetHeight || 60) / 2;
    return e.y + t;
  }
  addElasticByLine(e, t, o = 1) {
    let s = Math.sqrt((this.getY(e) - this.getY(t)) ** 2 + (this.getX(e) - this.getX(t)) ** 2);
    s > this.maxVaildLineLength && (s = this.maxVaildLineLength);
    const a = s < this.minVaildLineLength ? 0 : (s - this.minVaildLineLength) * 0.1 * this.force_line_elastic * o, c = a, l = a, r = (this.getX(e) - this.getX(t)) / s, h = (this.getY(e) - this.getY(t)) / s;
    this.addFtoNode(e, r * c * -1, h * c * -1), this.addFtoNode(t, r * l, h * l);
  }
  addGravityByNode(e, t) {
    const o = Math.sqrt(
      (this.getY(e) - this.getY(t)) ** 2 + (this.getX(e) - this.getX(t)) ** 2
    );
    let s = o > this.zeroEffectNodeDistance ? 0 : (this.zeroEffectNodeDistance - o) * 0.05 * this.force_node_repulsion;
    o < this.minNodeDistance && (s = s * 2);
    const a = (this.getX(e) - this.getX(t)) / o, c = (this.getY(e) - this.getY(t)) / o;
    this.addFtoNode(e, a * s, c * s), this.addFtoNode(t, a * s * -1, c * s * -1);
  }
  addFtoNode(e, t, o) {
    if (e.dragging || this.justLayoutSingleNode && !e.singleNode || Number.isNaN(t) || Number.isNaN(o))
      return;
    t = t / (e.lot.strength || 1), o = o / (e.lot.strength || 1), t > 50 && (t = 50), o > 50 && (o = 50), t < -50 && (t = -50), o < -50 && (o = -50);
    const s = e.force_weight || 1;
    this.lockX || (e.Fx += t * (1 / s)), this.lockY || (e.Fy += o * (1 / s));
  }
  applyToNodePosition(e) {
    if (e.fixed)
      return;
    let t = Math.round(e.Fx), o = Math.round(e.Fy);
    t > this.maxMoveSpeed && (t = this.maxMoveSpeed), o > this.maxMoveSpeed && (o = this.maxMoveSpeed), t < -this.maxMoveSpeed && (t = -this.maxMoveSpeed), o < -this.maxMoveSpeed && (o = -this.maxMoveSpeed), e.x = e.x + t, e.y = e.y + o, e.Fx = 0, e.Fy = 0;
  }
}
const _e = Nt;
class zt extends _e {
  constructor(e, t) {
    super(e, t);
    x(this, "layoutOptions");
    this.layoutOptions = e;
  }
  async refresh() {
    u("SeeksCenterLayouter:refresh"), await this.placeNodes(this.allNodes, this.rootNode);
  }
  async placeNodes(e, t) {
    if (u("SeeksCenterLayouter:placeNodes"), !t) {
      u("root is null:", t);
      return;
    }
    u("layout by root:", t), this.allNodes = e, this.rootNode = t, e.forEach((a) => {
      a.lot.eached = !1, a.lot.notLeafNode = !1, a.lot.childs = [], a.lot.parent = void 0, a.lot.index_of_parent = 0, a.lot.strength = 0, a.lot.placed = !1;
    });
    let o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    if (_.analysisNodes(o, [this.rootNode], 0, s), o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, _.analysisNodes4Didirectional(o, [this.rootNode], 0, s, 0), t.fixed)
      t.origin_x === void 0 && (t.origin_x = t.x, t.origin_y = t.y), t.lot.x = t.origin_x, t.lot.y = t.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", t.text, t.x, t.y);
    else if (this.layoutOptions.fixedRootNode)
      t.lot.x = _.getLotXByNodeX(this.graphOptions, t), t.lot.y = _.getLotYByNodeY(this.graphOptions, t);
    else {
      const a = this.layoutOptions.centerOffset_x || 0, c = this.layoutOptions.centerOffset_y || 0;
      t.lot.x = 0 + a, t.lot.y = 0 + c;
    }
    u("root position:", t.lot.x, t.lot.y), this.placeRelativePosition(this.rootNode, o, s), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout()) : o.forEach((a) => {
      if (a.fixed === !0 || !_.isAllowShowNode(a))
        return;
      const c = a.offset_x || 0, l = a.offset_y || 0, r = -_.getNodeWidth(a, this.graphOptions) / 2, h = -_.getNodeHeight(a, this.graphOptions) / 2;
      a.x = a.lot.x + c + r, a.y = a.lot.y + l + h, a.lot.placed = !0;
    });
  }
  placeRelativePosition(e, t, o) {
    const s = this.layoutOptions.distance_coefficient === void 0 ? 1 : this.layoutOptions.distance_coefficient;
    let a = Math.round((this.graphOptions.viewSize.height + this.graphOptions.viewSize.width) / o.max_deep * 0.2) * s;
    u("analyticResult:", o, a, this.layoutOptions.distance_coefficient), a < 150 * s && (a = 150 * s);
    let c = 0;
    t.forEach((r) => {
      const h = r.lot.subling;
      if (h && h.level === 1) {
        c = Math.round(h.all_size * 50 / Math.PI / 2), c < a && (c = a);
        const f = Z.getOvalPoint(e.lot.x, e.lot.y, h.level * c, r.lot.strength_plus - r.lot.strength / 2, h.all_strength);
        r.lot.x = f.x, r.lot.y = f.y;
      }
    });
    const l = Math.round(300 * s);
    t.forEach((r) => {
      const h = r.lot.subling;
      if (h && h.level > 1) {
        const f = r.lot.parent.lot.strength_plus - r.lot.parent.lot.strength, m = (r.lot.parent.lot.strength_plus - f) / (r.lot.parent.lot.childs_size + 1) * (r.lot.index_of_parent + 1), y = Z.getOvalPoint(e.lot.x, e.lot.y, (h.level - 1) * l + c, f + m, r.lot.parent.lot.subling.all_strength);
        r.lot.x = y.x, r.lot.y = y.y;
      }
    });
  }
}
const qe = zt;
class Pt extends _e {
  constructor(n, e) {
    super(n, e);
  }
  async refresh() {
    await this.placeNodes(this.allNodes, this.rootNode);
  }
  async placeNodes(n, e) {
    if (e)
      u("layout by root:", e);
    else {
      u("root is null:", e);
      return;
    }
    this.allNodes = n, this.rootNode = e, n.forEach((l) => {
      l.lot.eached = !1, l.lot.notLeafNode = !1, l.lot.childs = [], l.lot.parent = void 0, l.lot.index_of_p_childs = 0, l.lot.strength = 0;
    });
    const t = this.layoutOptions.centerOffset_x || 0, o = this.layoutOptions.centerOffset_y || 0, s = {
      x: t,
      y: o
    }, a = this.allNodes.length;
    let c = a * 90 / Math.PI / 2;
    c < 200 && (c = 200), c > 800 && (c = 800), this.allNodes.forEach((l, r) => {
      const h = Z.getOvalPoint(s.x, s.y, c, r, a);
      l.lot.x = h.x, l.lot.y = h.y;
    }), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout()) : this.allNodes.forEach((l) => {
      if (l.fixed === !0 || !_.isAllowShowNode(l))
        return;
      const r = l.offset_x || 0, h = l.offset_y || 0, f = -_.getNodeWidth(l, this.graphOptions) / 2, d = -_.getNodeHeight(l, this.graphOptions) / 2;
      l.x = l.lot.x + r + f, l.y = l.lot.y + h + d, l.lot.placed = !0;
    });
  }
}
const Ke = Pt;
class Bt extends ke {
  constructor(e, t) {
    super(e, t);
    x(this, "graphOptions");
    x(this, "layoutOptions");
    x(this, "allNodes", []);
    x(this, "__origin_nodes", []);
    this.layoutOptions = e, this.graphOptions = t;
  }
  refresh() {
    this.placeNodes(this.__origin_nodes, this.rootNode);
  }
  placeNodes(e, t) {
    if (t)
      u("layout by root:", t);
    else {
      u("root is null:", t);
      return;
    }
    u("allNodes:", e.length), this.__origin_nodes = e, this.rootNode = t, e.forEach((s) => {
      s.lot.eached = !1, s.lot.notLeafNode = !1, s.lot.childs = [], s.lot.parent = void 0, s.lot.index_of_parent = 0, s.lot.strength = 0, s.lot.placed = !1, s.x || (s.x = 0), s.y || (s.y = 0), Number.isNaN(s.x) && (s.x = 0), Number.isNaN(s.y) && (s.y = 0);
    }), this.allNodes = [];
    const o = {
      max_strength: 1,
      max_deep: 1,
      max_length: 1
    };
    _.analysisNodes4Didirectional(this.allNodes, [this.rootNode], 0, o, 0), u("[layout canvasOffset]", this.graphOptions.viewSize, this.graphOptions.canvasSize);
  }
}
const Qe = Bt;
class At extends ke {
  constructor(e, t) {
    super(e, t);
    x(this, "layoutOptions");
    x(this, "levelDistanceArr", []);
    this.layoutOptions = e, u("new SeeksBidirectionalTreeLayouter:", this.layoutOptions), this.layoutOptions.from || (this.layoutOptions.from = "left"), this.layoutOptions.levelDistance && (typeof this.layoutOptions.levelDistance == "string" ? this.levelDistanceArr = this.layoutOptions.levelDistance.split(",").map((o) => Number.parseInt(o)) : Array.isArray(this.layoutOptions.levelDistance) && (this.levelDistanceArr = this.layoutOptions.levelDistance)), this.requireLinks = !0;
  }
  async refresh() {
    u("SeeksBidirectionalTreeLayouter:refresh:nodes:", this.allNodes.length), await this.placeNodes(this.allNodes, this.rootNode);
  }
  analysisNodes4Didirectional(e, t, o, s) {
    this.analysisBothWay(e, t, o, s);
    const a = {};
    e.forEach((r) => {
      const h = r.lot.level + "";
      a[h] || (a[h] = []), a[h].push(r), r.lot.subling = {
        level: r.lot.level,
        all_size: 0,
        all_strength: 0
      };
    }), e.forEach((r) => {
      const h = r.lot.level + "", f = a[h], d = f.length;
      r.lot.index_of_level = f.indexOf(r), r.lot.subling.all_size = d, r.lot.subling.all_strength += r.lot.strength || 1, r.lot.strength_plus = r.lot.subling.all_strength;
    }), e.forEach((r) => {
      r.lot.childs_size > 0 && (r.lot.strengthWithChilds = 0);
    }), console.log("willLayoutNodes.length:", e.length), e.forEach((r) => {
      r.lot.childs_size === 0 && (r.lot.strengthWithChilds = 1, _.conductStrengthToParents(r));
    });
    const c = Object.keys(a).map((r) => Number.parseInt(r)).sort(), l = (r) => {
      const h = r + "", f = a[h];
      let d = 0;
      f.forEach((m) => {
        m.lot.parent && d < m.lot.parent.lot.strengthWithChilds_from && (d = m.lot.parent.lot.strengthWithChilds_from), r === 0 ? d += 1 : m.lot.strengthWithChilds_from = d, u("levels:", r, d, m.text, m.lot.strengthWithChilds), d += m.lot.strengthWithChilds;
      });
    };
    [0].forEach(l), c.filter((r) => r > 0).forEach(l), c.filter((r) => r < 0).forEach(l);
  }
  analysisBothWay(e, t, o, s) {
    u(`level ${o} size: ${t.length}`), t.length > s.max_length && (s.max_length = t.length), o > s.max_deep && (s.max_deep = o);
    const a = {
      level: o,
      all_size: t.length,
      all_strength: 0
    };
    t.forEach((l) => {
      l.lot || (l.lot = { childs: [] }), l.lot.eached = !0, l.lot.subling = a, l.lot.level = o, e.push(l);
    });
    let c = 0;
    t.forEach((l) => {
      let r = 0, h = 0, f = [];
      l.targetFrom.forEach((d) => {
        d.lot || (d.lot = { eached: !1, childs: [] }), d.lot.eached || (d.lot.parent = l, _.isAllowShowNode(d) ? (d.lot.eached = !0, d.lot.index_of_parent = h++, l.lot.childs.push(d), f.push(d), r++) : l.lot.childs.push(d));
      }), this.analysisBothWay(e, f, o - 1, s), f = [], l.targetTo.forEach((d) => {
        d.lot || (d.lot = { eached: !1, childs: [] }), d.lot.eached || (d.lot.parent = l, _.isAllowShowNode(d) ? (d.lot.eached = !0, d.lot.index_of_parent = h++, l.lot.childs.push(d), f.push(d), r++) : l.lot.childs.push(d));
      }), this.analysisBothWay(e, f, o + 1, s), l.lot.strength = r > 0 ? r : 1, a.all_strength += l.lot.strength, l.lot.strength_plus = a.all_strength, l.lot.index_of_level = c, l.lot.childs_size = r, c++;
    }), a.all_strength > s.max_strength && (s.max_strength = a.all_strength);
  }
  async placeNodes(e, t) {
    if (u("SeeksBidirectionalTreeLayouter:placeNodes"), t)
      u("layout by root:", t);
    else {
      console.error("root is null");
      return;
    }
    this.rootNode = t, this.allNodes = e, u("allNodes:", e.length), e.forEach((l) => {
      l.lot.eached = !1, l.lot.notLeafNode = !1, l.lot.childs = [], l.lot.parent = void 0, l.lot.index_of_parent = 0, l.lot.strength = 0, l.lot.strengthWithChilds_from = 0, l.lot.strengthWithChilds = 0, l.lot.placed = !1;
    });
    let o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    };
    _.analysisNodes(o, [this.rootNode], 0, s), o = [], s = {
      max_deep: 1,
      max_length: 1,
      max_strength: 1
    }, this.analysisNodes4Didirectional(o, [this.rootNode], 0, s), this.placeNodesPosition(this.rootNode, o, s), u("allNodes:", o.length), this.graphOptions.useAnimationWhenExpanded ? (u("Play layout animation....."), await this.animationLayout(), u("create rootNode coordinates:3", t.x, t.y)) : (this.allNodes.forEach((l) => {
      if (l.fixed === !0) {
        l.lot.placed = !0;
        return;
      }
      !_.isAllowShowNode(l) || (Number.isNaN(l.lot.x) && (u("bad lot x:", l.text, l.lot.x), l.lot.x = 0), Number.isNaN(l.lot.y) && (u("bad lot y:", l.text, l.lot.y), l.lot.y = 0), l.x = _.getNodeXByLotX(this.graphOptions, l), l.y = _.getNodeYByLotY(this.graphOptions, l), l.lot.placed = !0);
    }), u("create rootNode coordinates:1", t.x, t.y));
    const a = o.filter((l) => l.lot.level === 0), c = new _e({
      layoutName: "force",
      maxLayoutTimes: 100,
      force_node_repulsion: 0.1,
      force_line_elastic: 1,
      fixedRootNode: !0
    }, this.graphOptions);
    c.isMainLayouer = !1, c.requireLinks = !0, this.layoutOptions.from === "left" || this.layoutOptions.from === "right" ? c.lockX = !0 : c.lockY = !0, c.visibleNodes = a, c.setLinks(this.allLinks), c.doForceLayout(0);
  }
  placeNodesPosition(e, t, o) {
    if (e.fixed !== !0) {
      const s = this.layoutOptions.centerOffset_x || 0, a = this.layoutOptions.centerOffset_y || 0;
      e.lot.x = s, e.lot.y = a, this.layoutOptions.fixedRootNode ? (e.lot.x = _.getLotXByNodeX(this.graphOptions, e), e.lot.y = _.getLotYByNodeY(this.graphOptions, e)) : this.layoutOptions.from === "top" ? e.lot.y -= this.graphOptions.viewSize.height / 2 - 100 : this.layoutOptions.from === "bottom" ? e.lot.y += this.graphOptions.viewSize.height / 2 - 200 : this.layoutOptions.from === "right" ? e.lot.x += this.graphOptions.viewSize.width / 2 - 100 : e.lot.x -= this.graphOptions.viewSize.width / 2 - 100, u("debug0910:Graph center:", e.lot.x, e.lot.y, { _center_offset_x: s, _center_offset_y: a });
    } else
      e.origin_x === void 0 && (e.origin_x = e.x, e.origin_y = e.y), e.lot.x = e.origin_x, e.lot.y = e.origin_y, u("\u56FA\u5B9A\u4F4D\u7F6E\u7684rootNode:", e.text, e.x, e.y);
    e.lot.placed = !0, this.placeRelativePosition(e, t, o);
  }
  placeRelativePosition(e, t, o) {
    const s = this.graphOptions.viewSize;
    if (this.layoutOptions.from === "left" || this.layoutOptions.from === "right") {
      const a = X(this.layoutOptions.min_per_height) || 80, c = X(this.layoutOptions.max_per_height) || 400, l = X(this.layoutOptions.min_per_width) || 430, r = X(this.layoutOptions.max_per_width) || 650;
      let h = Math.round((s.width - 10) / (o.max_deep + 2));
      h < l && (h = l), h > r && (h = r);
      let f = Math.round(s.height / (o.max_strength + 1));
      f < a && (f = a), f > c && (f = c), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "right" ? d.lot.x = e.lot.x - this.getLevelDistance(d, d.lot.subling.level, h) : d.lot.x = e.lot.x + this.getLevelDistance(d, d.lot.subling.level, h));
      }), t.forEach((d) => {
        d.fixed !== !0 && (d.lot.level === 0 ? d !== e && (d.lot.y = e.lot.y + f * d.lot.index_of_level) : d.lot.y = e.lot.y + f * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      });
    } else {
      const a = X(this.layoutOptions.min_per_height) || 350, c = X(this.layoutOptions.max_per_height) || 400, l = X(this.layoutOptions.min_per_width) || 250, r = X(this.layoutOptions.max_per_width) || 500;
      let h = Math.round((s.width - 10) / (o.max_strength + 2));
      h < l && (h = l), h > r && (h = r);
      let f = Math.round((s.height - 10) / (o.max_deep + 2));
      f < a && (f = a), f > c && (f = c), t.forEach((d) => {
        d.fixed !== !0 && d.lot.placed !== !0 && d !== e && (this.layoutOptions.from === "bottom" ? d.lot.y = e.lot.y - this.getLevelDistance(d, d.lot.subling.level, f) : d.lot.y = e.lot.y + this.getLevelDistance(d, d.lot.subling.level, f));
      }), t.forEach((d) => {
        d.fixed !== !0 && d.lot.level !== 0 && (d.lot.x = e.lot.x + h * (o.max_strength / -2 + d.lot.strengthWithChilds_from + d.lot.strengthWithChilds / 2));
      });
    }
  }
  getLevelDistance(e, t, o) {
    const s = Math.abs(t);
    if (this.levelDistanceArr && this.levelDistanceArr.length > 0) {
      let a = 0;
      for (let c = 0; c < s; c++) {
        const l = this.levelDistanceArr[c] || 100;
        a += l;
      }
      return t > 0 ? a : a * -1;
    } else
      return t * o;
  }
}
const Me = (i, n) => {
  Se(i);
  let e = null;
  if (i.layoutName === "tree" ? e = new Ze(i, n) : i.layoutName === "center" ? e = new qe(i, n) : i.layoutName === "circle" ? e = new Ke(i, n) : i.layoutName === "force" ? e = new _e(i, n) : i.layoutName === "fixed" ? e = new Qe(i, n) : i.layoutName === "smart-tree" && (e = new At(i, n)), !e)
    throw new Error("unknown layout: " + i.layoutName);
  return n.isNeedShowAutoLayoutButton = i.allowAutoLayoutIfSupport !== !1 && e.autoLayout !== void 0, e;
}, Se = (i) => {
  if (typeof i.centerOffset_x == "string" && (i.centerOffset_x = parseInt(i.centerOffset_x)), typeof i.centerOffset_y == "string" && (i.centerOffset_y = parseInt(i.centerOffset_y)), i.layoutName === "center") {
    const n = i;
    n.layoutDirection === void 0 && (n.layoutDirection = "h"), n.centerOffset_x === void 0 && (n.centerOffset_x = 0), n.centerOffset_y === void 0 && (n.centerOffset_y = 0), n.layoutDirection = void 0;
  } else if (i.layoutName.includes("tree")) {
    const n = i;
    n.layoutDirection === void 0 && (n.layoutDirection = "h"), n.centerOffset_x === void 0 && (n.centerOffset_x = 0), n.centerOffset_y === void 0 && (n.centerOffset_y = 0), n.from === void 0 && (n.from = "top"), n.levelDistance === void 0 && (n.levelDistance = ""), (n.from === "top" || n.from === "bottom") && (n.layoutDirection = "v", u("set layoutDirection=v"), u("set defaultJunctionPoint=tb"), n.min_per_width === void 0 && (n.min_per_width = 100), n.max_per_width === void 0 && (n.max_per_width = 500), n.min_per_height === void 0 && (n.min_per_height = 300), n.max_per_height === void 0 && (n.max_per_height = 500)), (n.from === "left" || n.from === "right") && (n.layoutDirection = "h", u("set defaultJunctionPoint=lr"), n.min_per_width === void 0 && (n.min_per_width = 300), n.max_per_width === void 0 && (n.max_per_width = 500), n.min_per_height === void 0 && (n.min_per_height = 100), n.max_per_height === void 0 && (n.max_per_height = 500));
  } else
    (i.layoutName === "fixed" || i.layoutName === "force") && (i.layoutDirection = void 0);
}, Dt = {
  createLayout: Me,
  appendDefaultOptions4Layout: Se
}, Tt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createLayout: Me,
  appendDefaultOptions4Layout: Se,
  default: Dt
}, Symbol.toStringTag, { value: "Module" })), We = {
  id: "rg-newNodeTemplate",
  x: 0,
  y: 0,
  text: "",
  styleClass: ""
};
let $t = 0;
const He = (i) => {
  !i.backgroundImage && (i.backgroundImage = i.backgrounImage), !i.backgroundImageNoRepeat && (i.backgroundImageNoRepeat = i.backgrounImageNoRepeat), typeof i.graphOffset_x == "string" && (i.graphOffset_x = parseInt(i.graphOffset_x)), typeof i.graphOffset_y == "string" && (i.graphOffset_y = parseInt(i.graphOffset_y));
  const n = {
    instanceId: "",
    debug: !0,
    graphLoading: !1,
    graphLoadingText: "",
    showMaskWhenLayouting: !1,
    instanceDestroyed: !1,
    useHorizontalView: !1,
    oldVueVersion: !1,
    ovUseNodeSlot: !1,
    ovUseLineSlot: !1,
    ovUseToolbarSlot: !1,
    ovUseNodeExpandHolderSlot: !1,
    showDebugPanel: !1,
    backgroundColor: void 0,
    backgroundImage: void 0,
    backgroundImageNoRepeat: void 0,
    downloadImageFileName: "",
    disableZoom: !1,
    disableDragNode: !1,
    disableDragLine: !0,
    moveToCenterWhenRefresh: !0,
    zoomToFitWhenRefresh: !0,
    useAnimationWhenRefresh: !1,
    defaultFocusRootNode: !0,
    disableNodeClickEffect: !1,
    disableLineClickEffect: !1,
    allowShowFullscreenMenu: !0,
    allowShowZoomMenu: !0,
    allowAutoLayoutIfSupport: !0,
    allowShowRefreshButton: !0,
    allowShowDownloadButton: !0,
    backgrounImageNoRepeat: !1,
    allowShowMiniToolBar: !0,
    toolBarVersion: "v2",
    toolBarDirection: "v",
    toolBarPositionH: "right",
    toolBarPositionV: "center",
    allowSwitchLineShape: !1,
    allowSwitchJunctionPoint: !1,
    isMoveByParentNode: !1,
    defaultExpandHolderPosition: "hide",
    defaultExpandHolderColor: void 0,
    defaultNodeBorderWidth: void 0,
    defaultNodeColor: "#409EFF",
    defaultNodeBorderColor: "#0c7ff6",
    defaultNodeFontColor: "#ffffff",
    defaultLineColor: "#cccccc",
    checkedLineColor: "#FD8B37",
    defaultLineFontColor: void 0,
    defaultLineWidth: 1,
    defaultLineShape: void 0,
    defaultLineTextOffset_x: void 0,
    defaultLineTextOffset_y: void 0,
    defaultNodeShape: void 0,
    defaultNodeWidth: void 0,
    defaultNodeHeight: void 0,
    defaultShowLineLabel: !0,
    hideNodeContentByZoom: !1,
    defaultJunctionPoint: void 0,
    defaultPloyLineRadius: void 0,
    disableDragCanvas: !1,
    placeSingleNode: !0,
    placeOtherGroup: !1,
    lineUseTextPath: !1,
    graphOffset_x: 0,
    graphOffset_y: 0,
    viewSize: { width: 300, height: 300 },
    viewELSize: { width: 1300, height: 800, left: 0, top: 100 },
    viewNVInfo: { width: 1300, height: 800, x: 0, y: 100 },
    canvasNVInfo: { width: 1300, height: 800, x: 0, y: 100 },
    defaultLineMarker: {
      markerWidth: 12,
      markerHeight: 12,
      refX: 10,
      refY: 6,
      color: void 0,
      data: "M2,2 L10,6 L2,10 L6,6 L2,2"
    },
    allowShowMiniView: !1,
    allowShowSettingPanel: !1,
    allowShowMiniNameFilter: !0,
    fullscreen: !1,
    checkedNodeId: "",
    checkedLineId: "",
    checkedLinkId: "",
    layouts: [],
    layoutLabel: "",
    layoutName: "tree",
    layoutClassName: "",
    layoutDirection: "h",
    useAnimationWhenExpanded: !1,
    reLayoutWhenExpandedOrCollapsed: !1,
    autoLayouting: !1,
    layouter: void 0,
    isNeedShowAutoLayoutButton: !1,
    canvasZoom: 100,
    showSingleNode: !0,
    showNodeLabel: !0,
    showNodeShortLabel: !0,
    canvasSize: {
      width: 2e3,
      height: 2e3
    },
    canvasOffset: {
      x: 25,
      y: 27,
      zoom_buff_x: 0,
      zoom_buff_y: 0
    },
    creatingSelection: !1,
    selectionView: {
      x: 25,
      y: 27,
      width: 0,
      height: 0
    },
    creatingNodePlot: !1,
    showTemplateNode: !0,
    newNodeTemplate: Ce(JSON.parse(JSON.stringify(We))),
    creatingLinePlot: !1,
    newLineTemplate: {
      from: "newRelationTemplate-from",
      to: "newRelationTemplate-to",
      color: "",
      text: "new line"
    },
    newLinkTemplate: {
      fromNode: null,
      toNodeObject: null,
      toNode: {
        nothing: !0,
        x: 400,
        y: 400,
        el: {
          offsetWidth: 30,
          offsetHeight: 30
        }
      },
      relations: [{}]
    },
    data: {}
  };
  if (n.newLineTemplate = Le(n.newLineTemplate), i.layout && i.layouts)
    throw new Error("Graph options cannot have both layout and layouts properties !");
  const e = i.debug === !0;
  e && u("RGOptions:user instance options:", i), window && (window.relationGraphDebug = e);
  const t = Object.keys(n);
  i && Object.keys(i).forEach((s) => {
    if (s === "layouts" || s === "layout")
      return;
    const a = i[s];
    if (!t.includes(s)) {
      u("RGOptions: unknow option key:", s);
      return;
    }
    if (typeof a == "object") {
      u("RGOptions:user setting object:", s, a);
      const c = n[s];
      if (c && !Array.isArray(c) && a)
        Object.keys(c).forEach((l) => {
          c[l] = a[l];
        });
      else if (Array.isArray(c)) {
        const l = [];
        a.forEach((r) => {
          r && typeof r == "object" ? l.push(JSON.parse(JSON.stringify(r))) : l.push(r);
        }), n[s] = l;
      } else
        n[s] = a;
    } else
      n[s] = a;
  });
  let o = [];
  return !i.layouts || !Array.isArray(i.layouts) || i.layouts.length === 0 ? i.layout ? o = [i.layout] : o = [{
    label: "\u4E2D\u5FC3",
    layoutName: "center",
    layoutDirection: "v"
  }] : o = i.layouts, u("final layouts:", o), n.layouts = o.map((s) => JSON.parse(JSON.stringify(s))), n.disableNodeClickEffect && (n.defaultFocusRootNode = !1), Se(n.layouts[0]), Ee(n.layouts[0], n), n;
}, Ee = (i, n) => {
  u("applyDefaultOptionsByLayout", i.layoutName, n), i.layoutName === "SeeksCenterLayouter" || i.layoutName === "center" ? (n.defaultNodeShape === void 0 && (n.defaultNodeShape = 0), n.defaultLineShape === void 0 && (n.defaultLineShape = 1), n.defaultJunctionPoint === void 0 && (n.defaultJunctionPoint = "border")) : i.layoutName === "SeeksBidirectionalTreeLayouter" || i.layoutName.includes("tree") ? (n.defaultNodeBorderWidth === void 0 && (n.defaultNodeBorderWidth = 0), n.defaultNodeShape === void 0 && (n.defaultNodeShape = 1), n.defaultLineShape === void 0 && (n.defaultLineShape = 4), (i.from === "top" || i.from === "bottom") && (n.layoutDirection = "v", u("set layoutDirection=v"), n.defaultLineShape === 4 && (n.defaultJunctionPoint === void 0 && (n.defaultJunctionPoint = "tb"), u("set defaultJunctionPoint=tb"))), (i.from === "left" || i.from === "right") && (n.layoutDirection = "h", u("set layoutDirection=h"), n.defaultLineShape === 4 && (n.defaultJunctionPoint === void 0 && (n.defaultJunctionPoint = "lr"), u("set defaultJunctionPoint=lr")))) : (i.layoutName === "fixed" || i.layoutName === "force") && (n.moveToCenterWhenRefresh = !1, n.zoomToFitWhenRefresh = !1), n.defaultNodeShape === void 0 && (n.defaultNodeShape = 0), n.defaultLineShape === void 0 && (n.defaultLineShape = 1), n.defaultJunctionPoint === void 0 && (n.defaultJunctionPoint = "border");
}, Oe = (i) => {
  const n = He(i);
  return u("RGOptions:new RGOptions:by:", i), u("RGOptions:new RGOptions:", n), n.instanceId || (n.instanceId = `RGIns-${$t++}`), n;
}, Wt = {
  newInstanceOptions: Oe,
  createDefaultConfig: He,
  applyDefaultOptionsByLayout: Ee
}, Ht = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  newNodeTemplate: We,
  createDefaultConfig: He,
  applyDefaultOptionsByLayout: Ee,
  newInstanceOptions: Oe,
  default: Wt
}, Symbol.toStringTag, { value: "Module" }));
class It {
  constructor(n, e) {
    x(this, "options");
    x(this, "listeners");
    x(this, "isReact", !1);
    x(this, "updateViewHook", () => {
    });
    this.listeners = e, this.options = Oe(n), u("new RelationGraph:", this);
  }
  enableDebugLog(n) {
    this.options.debug = n, window && (window.relationGraphDebug = n);
  }
  setUpdateViewHook(n) {
    this.isReact = !0, this.updateViewHook = n;
  }
  _dataUpdated() {
    this.updateViewHook();
  }
}
class Ft extends It {
  constructor(e, t) {
    super(e, t);
    x(this, "$dom");
    x(this, "$canvasDom");
  }
  setDom(e) {
    this.$dom = e;
  }
  setCanvasDom(e) {
    this.$canvasDom = e;
  }
  getBoundingClientRect() {
    return this.$dom.getBoundingClientRect();
  }
}
class Rt extends Ft {
  constructor(e, t) {
    super(e, t);
    x(this, "graphData", {
      rootNode: void 0,
      nodes: [],
      links: [],
      elementLines: []
    });
    x(this, "seeksNodeIdIndex", 0);
    x(this, "allLineColors", []);
    x(this, "userLayouerClass");
    x(this, "layouter");
    x(this, "reactiveData");
    x(this, "disableNextLayoutAnimation", !1);
    x(this, "elLineUpdating", !1);
  }
  setReactiveData(e, t) {
    this.graphData = e, this.allLineColors = t.allLineColors, t.options = this.options, this.reactiveData = t;
  }
  setReactiveDataVue3(e, t) {
    this.graphData = e, this.allLineColors = t.allLineColors, t.options = this.options, this.reactiveData = t;
  }
  _setOptions(e) {
    const t = Oe(e);
    this.reactiveData.options = t, this.options = this.reactiveData.options;
  }
  _initLayoutByLayoutOptions(e) {
    this.options.layoutClassName = e.layoutClassName, this.options.layoutLabel = e.label, this.options.layoutName = e.layoutName, this.options.layoutDirection = e.layoutDirection, this.layouter = Me(e, this.options);
  }
  initLayouter() {
    if (this.userLayouerClass)
      u("Use user layouter:", this.userLayouerClass), this.layouter = this.userLayouerClass;
    else if (this.options.layouts && this.options.layouts.length > 0) {
      const e = this.options.layouts[0];
      u("[change layout]Create default layouter\uFF1A", this.options.layoutName), this._initLayoutByLayoutOptions(e);
    } else
      u("Not set option: layout/layouts\uFF01");
    u("Layouter instance:", this.layouter);
  }
  async _setJsonData(e, t = !1) {
    await this.clearGraph(), u("set jsonData:", e), this.loadGraphJsonData(e);
  }
  async clearGraph() {
    this.graphData.nodes = [], this.graphData.links = [], this.graphData.elementLines = [], this.graphData.rootNode = void 0;
  }
  async clearElementLines() {
    this.graphData.elementLines = [];
  }
  generateNewNodeId(e = 1) {
    const t = "N" + (this.graphData.nodes.length + e);
    return this.getNodeById(t) ? this.generateNewNodeId(e + 1) : (u("generateNewNodeId:", e, t), t);
  }
  loadNodes(e) {
    e.forEach((t) => {
      let o = this.graphData.nodes.find((s) => s.id === t.id);
      o || (o = Ce(t), o && (o.seeks_id = this.seeksNodeIdIndex++, this.graphData.nodes.push(o)));
    });
  }
  loadLines(e) {
    e.forEach((t) => {
      let o = !1, s, a;
      if (typeof t.from == "object" ? s = t.from : s = this.graphData.nodes.find((y) => y.id === t.from), typeof t.to == "object" ? a = t.to : a = this.graphData.nodes.find((y) => y.id === t.to), !s) {
        console.error("Can not found from node:", t);
        return;
      }
      if (!a) {
        console.error("Can not found to node:", t);
        return;
      }
      const c = `${s.seeks_id}-${a.seeks_id}`, l = `${a.seeks_id}-${s.seeks_id}`, r = Le(t);
      let h = this.graphData.links.find((y) => y.seeks_id === c), f = !1;
      h || (h = this.graphData.links.find((y) => y.seeks_id === l), h ? f = !0 : (o = !0, h = {
        seeks_id: c,
        fromNode: s,
        toNode: a,
        appended: !1,
        forDisplayOnly: !0,
        relations: []
      }));
      let d = r.arrow;
      r.isHideArrow || (d = this.getLineArrow(r.color)), s.targetNodes || (s.targetNodes = []), a.targetNodes || (a.targetNodes = []), r.forDisplayOnly ? h.forDisplayOnly = !1 : (s.targetNodes.includes(a) || s.targetNodes.push(a), a.targetNodes.includes(s) || a.targetNodes.push(s), s.targetTo.includes(a) || s.targetTo.push(a), a.targetFrom.includes(s) || a.targetFrom.push(s));
      let m = !1;
      for (let y = 0; y < h.relations.length; y++)
        if ((h.relations[y].id || r.id) && h.relations[y].id === r.id) {
          m = !0;
          break;
        }
      m === !1 && (r.id || (r.id = `${h.seeks_id}-${h.relations.length}`), r.isReverse = f, r.arrow = d, h.relations.push(r)), o && (this.graphData.links.push(h), h.appended = !1);
    });
  }
  flatNodeData(e, t, o, s) {
    e.forEach((a) => {
      o.push(a), t && s.push({
        from: t.id,
        to: a.id
      });
      const c = a.childs || a.children;
      c && c.length > 0 && this.flatNodeData(c, a, o, s);
    });
  }
  loadGraphJsonData(e) {
    e.lines || (e.lines = e.relations, console.warn("[relation-graph] For compatibility with older versionsm, Use jsonData.relations as jsonData.lines, It is recommended that you define your data using")), e.lines || (e.lines = e.links, console.warn("[relation-graph] For compatibility with older versionsm, Use jsonData.links as jsonData.lines, It is recommended that you define your data using"));
    const t = e.nodes, o = [], s = [];
    this.flatNodeData(t, null, o, s), e.lines.forEach((a) => {
      s.push(a);
    }), this.loadNodes(o), u("Nodes is initialized"), this.loadLines(s), this._dataUpdated(), setTimeout(() => {
      e.elementLines && this.addElementLines(e.elementLines);
    }, 500);
  }
  getLineArrow(e, t = !1, o = !1) {
    const s = t ? "start-" : "";
    if (o)
      return `${this.options.instanceId}-${s}arrow-checked`;
    if (e) {
      const a = gt(e);
      return this.allLineColors.map((c) => c.id).includes(a) || this.allLineColors.push({ id: a, color: e }), `${this.options.instanceId}-${s}arrow-${a}`;
    } else
      return `${this.options.instanceId}-${s}arrow-default`;
  }
  getNodes() {
    return this.graphData.nodes;
  }
  getLinks() {
    return this.graphData.links;
  }
  getGraphJsonData() {
    const e = [], t = [];
    return this.graphData.nodes.forEach((o) => {
      const s = Te(o);
      s && e.push(s);
    }), this.graphData.links.forEach((o) => {
      $e(o, t);
    }), {
      rootId: this.graphData.rootNode ? this.graphData.rootNode.id : "",
      nodes: e,
      lines: t
    };
  }
  getGraphJsonOptions() {
    const e = {}, t = [
      "layouter",
      "autoLayouting",
      "canvasNVInfo",
      "canvasOffset",
      "canvasZoom",
      "fullscreen",
      "instanceId",
      "layoutClassName",
      "layoutDirection",
      "layoutLabel",
      "layoutName",
      "resetViewSize",
      "viewELSize",
      "viewNVInfo",
      "viewSize",
      "canvasSize",
      "newLinkTemplate",
      "newLineTemplate",
      "newNodeTemplate"
    ];
    return Object.keys(this.options).forEach((o) => {
      t.includes(o) || (e[o] = this.options[o]);
    }), e;
  }
  printGraphJsonData() {
    u("graph options:", JSON.stringify(this.getGraphJsonOptions())), u("graph json data:", JSON.stringify(this.getGraphJsonData()));
  }
  getNodeById(e) {
    for (let t = 0; t < this.graphData.nodes.length; t++)
      if (this.graphData.nodes[t].id === e)
        return this.graphData.nodes[t];
  }
  getLinkById(e) {
    for (let t = 0; t < this.graphData.links.length; t++)
      if (this.graphData.links[t].seeks_id === e)
        return this.graphData.links[t];
  }
  getLinkByLineId(e) {
    for (let t = 0; t < this.graphData.links.length; t++)
      if (this.graphData.links[t].relations.findIndex((o) => o.id === e) !== -1)
        return this.graphData.links[t];
  }
  addNodes(e) {
    u("addNodes:", e), this.loadNodes(e);
  }
  addLines(e) {
    u("addLines:", e), this.loadLines(e);
  }
  addElementLines(e) {
    u("addElementLines:", e), e.forEach((t) => {
      const o = document.getElementById(t.from), s = document.getElementById(t.to);
      if (!o) {
        console.error("Can not found from HTMLElement: #" + t.from);
        return;
      }
      if (!s) {
        console.error("Can not found toHTMLElement: #" + t.to);
        return;
      }
      const a = Le(t);
      let c = a.arrow;
      a.isHideArrow || (c = this.getLineArrow(a.color)), a.forDisplayOnly = !0;
      let l = !1;
      for (const r of this.graphData.elementLines)
        if (r.relations[0].from === a.from && r.relations[0].to === a.to || r.relations[0].from === a.to && r.relations[0].to === a.from) {
          l = !0;
          break;
        }
      if (!l) {
        a.id || (a.id = `rg-ell-${a.from}-${a.to}`), a.arrow = c;
        const r = {
          type: "el",
          nodeShape: 1,
          junctionPoint: "lr",
          x: 0,
          y: 0,
          el: {
            offsetWidth: 10,
            offsetHeight: 10
          }
        }, h = {
          type: "el",
          nodeShape: 1,
          junctionPoint: "lr",
          x: 0,
          y: 0,
          el: {
            offsetWidth: 10,
            offsetHeight: 10
          }
        }, f = {
          seeks_id: "ell-" + this.graphData.elementLines.length,
          fromNode: r,
          toNode: h,
          relations: [a],
          appended: !0,
          forDisplayOnly: !0
        };
        this._updateElementLinePosition(o, f.fromNode), this._updateElementLinePosition(s, f.toNode), this.graphData.elementLines.push(f);
      }
    }), this.updateElementLines(), this._dataUpdated();
  }
  getElementLineById(e) {
    for (const t of this.graphData.elementLines)
      if (t.seeks_id === e)
        return t;
  }
  getElementLines() {
    return this.graphData.elementLines.map((e) => e.relations[0]);
  }
  removeElementLine(e) {
    u("removeElementLine:", e), this.removeELementLineById(e.relations[0].id);
  }
  removeELementLineById(e) {
    u("removeELementLineById:", e);
    for (let t = 0; t < this.graphData.elementLines.length; t++)
      this.graphData.elementLines[t].relations[0].id === e && (this.graphData.elementLines.splice(t, 1), t--);
  }
  updateElementLines() {
    u("updateElementLines:", this.graphData.elementLines.length), !this.elLineUpdating && (this.elLineUpdating = !0, setTimeout(() => {
      this.elLineUpdating = !1, this._updateElementLines();
    }, 50));
  }
  _updateElementLines() {
    this.graphData.elementLines.forEach((e) => {
      const t = document.getElementById(e.relations[0].from), o = document.getElementById(e.relations[0].to);
      if (!t) {
        e.relations[0].isHide = !0;
        return;
      }
      if (!o) {
        e.relations[0].isHide = !0;
        return;
      }
      if (this._updateElementLinePosition(t, e.fromNode), this._updateElementLinePosition(o, e.toNode), e.fromNode.el.offsetWidth === 0 && e.fromNode.el.offsetHeight === 0) {
        e.relations[0].isHide = !0;
        return;
      }
      if (e.toNode.el.offsetWidth === 0 && e.toNode.el.offsetHeight === 0) {
        e.relations[0].isHide = !0;
        return;
      }
      e.relations[0].isHide = !1;
    }), this._dataUpdated();
  }
  _updateElementLinePosition(e, t) {
    const o = e.getBoundingClientRect(), s = this.$canvasDom.getBoundingClientRect();
    t.x = (o.x - s.x) / (this.options.canvasZoom / 100), t.y = (o.y - s.y) / (this.options.canvasZoom / 100), t.el.offsetWidth = o.width / (this.options.canvasZoom / 100), t.el.offsetHeight = o.height / (this.options.canvasZoom / 100);
  }
  removeNodeById(e) {
    let t = 0;
    for (let s = 0; s < this.graphData.links.length; s++) {
      const a = this.graphData.links[s];
      (a.fromNode.id === e || a.toNode.id === e) && (this.removeLink(a), s--, t++);
    }
    u("Removed link\uFF1A", e, t);
    let o = 0;
    for (let s = 0; s < this.graphData.nodes.length; s++)
      if (this.graphData.nodes[s].id === e) {
        this.graphData.nodes.splice(s, 1), o++;
        break;
      }
    u("Removed node\uFF1A", e, o);
  }
  removeNode(e) {
    this.removeNodeById(e.id);
  }
  removeLinkByTwoNode(e, t) {
    for (const o of this.getLinks())
      if (o.fromNode.id === e && o.toNode.id === t || o.fromNode.id === e && o.toNode.id === t) {
        this.removeLink(o);
        break;
      }
  }
  getGroupByNode(e, t = []) {
    t.includes(e) || t.push(e);
    for (const o of e.targetNodes)
      t.includes(o) || this.getGroupByNode(o, t);
    return t;
  }
  _clearItem(e, t) {
    for (let o = 0; o < e.length; o++)
      e[o] === t && (e.splice(o, 1), o--);
  }
  removeNodeRef(e, t) {
    e && (e.targetNodes && this._clearItem(e.targetNodes, t), e.targetFrom && this._clearItem(e.targetFrom, t), e.targetTo && this._clearItem(e.targetTo, t));
  }
  removeLinkById(e) {
    u("removeLinkById:", e);
    for (let t = 0; t < this.graphData.links.length; t++) {
      const o = this.graphData.links[t];
      o.seeks_id === e && (this.removeNodeRef(o.fromNode, o.toNode), this.removeNodeRef(o.toNode, o.fromNode), this.graphData.links.splice(t, 1), t--);
    }
  }
  removeLink(e) {
    u("removeLink:", e), this.removeLinkById(e.seeks_id);
  }
  removeLine(e, t) {
    u("removeLine:", e, t);
    for (let o = 0; o < e.relations.length; o++)
      e.relations[o] === t && e.relations.splice(o, 1);
    e.relations.length === 0 && this.removeLink(e);
  }
  setNodePosition(e, t, o) {
    e.x = t, e.y = o;
  }
  getGraphOffet() {
    const e = this.options.graphOffset_x || 0, t = this.options.graphOffset_y || 0;
    return {
      offset_x: e,
      offset_y: t
    };
  }
  setCanvasCenter(e, t) {
    const o = this.options.viewSize.width / 2, s = this.options.viewSize.height / 2, a = this.getGraphOffet();
    this.setCanvasOffset(o - e + a.offset_x, s - t + a.offset_y);
  }
  setCanvasOffset(e, t) {
    this.options.canvasOffset.x = e, this.options.canvasOffset.y = t;
  }
  findGroupNodes(e, t) {
    t.push(e), e.targetNodes.forEach((o) => {
      t.includes(o) || this.findGroupNodes(o, t);
    });
  }
  resetViewSize() {
    !this.options || (u("resetViewSize"), this.options.viewSize.width = this.$dom.getBoundingClientRect().width, this.options.viewSize.height = this.$dom.getBoundingClientRect().height, this.options.canvasZoom = 100, this.setCanvasCenter(0, 0), this.refreshNVAnalysisInfo());
  }
  refreshNVAnalysisInfo() {
    if (!this.$dom) {
      console.error("cannot get view size !");
      return;
    }
    const e = {
      NMCanvasCenter: { x: 0, y: 0 }
    }, t = this.$dom.getBoundingClientRect();
    this.options.viewNVInfo.x = t.left, this.options.viewNVInfo.y = t.top, this.options.viewNVInfo.width = t.width, this.options.viewNVInfo.height = t.height;
    const o = this.options.canvasSize.width * (this.options.canvasZoom / 100), s = this.options.canvasSize.height * (this.options.canvasZoom / 100);
    e.NMCanvasCenter.x = this.options.canvasOffset.x + this.options.canvasSize.width / 2, e.NMCanvasCenter.y = this.options.canvasOffset.y + this.options.canvasSize.height / 2, this.options.canvasNVInfo.x = e.NMCanvasCenter.x - o / 2, this.options.canvasNVInfo.y = e.NMCanvasCenter.y - s / 2, this.options.canvasNVInfo.width = o, this.options.canvasNVInfo.height = s, this.options.viewELSize.width = t.width, this.options.viewELSize.height = t.height, this.options.viewELSize.left = t.left, this.options.viewELSize.top = t.top;
  }
  getStuffSize(e) {
    const t = e || this.graphData.nodes;
    let o = 9999999, s = 9999999, a = 0, c = 0;
    t.forEach((f) => {
      le.isAllowShowNode(f) && (f.x < o && (o = f.x), f.x > a && (a = f.x + f.el.offsetWidth), f.y < s && (s = f.y), f.y > c && (c = f.y + f.el.offsetHeight));
    });
    const l = 100, r = a - o + l, h = c - s + l;
    return {
      width: r,
      height: h,
      minX: o,
      maxX: a,
      minY: s,
      maxY: c
    };
  }
  getNodesCenter() {
    const e = this.getStuffSize();
    u("getStuffSize:", e);
    const t = e.minX + (e.width - 100) / 2, o = e.minY + (e.height - 100) / 2;
    return {
      x: t,
      y: o
    };
  }
  querySearchAsync(e) {
    if (u("fetch-suggestions", e), e = e.trim(), e === "")
      return;
    const t = [];
    return this.graphData.nodes.forEach((o) => {
      u("fetch:", o.text), o.text.includes(e) && t.push(o);
    }), u("fetched:", t.length), t;
  }
  printOptions() {
    const e = this.getGraphJsonOptions();
    console.log("options:", e), console.log("options-json-string:"), console.log(JSON.stringify(e));
  }
  printData() {
    const e = this.getGraphJsonData();
    console.log("data:", e), console.log("data-json-string:"), console.log(JSON.stringify(e));
  }
  loading(e = "") {
    this.options.graphLoading = !0, this.options.graphLoadingText = e;
  }
  clearLoading() {
    this.options.graphLoading = !1, this.options.graphLoadingText = "";
  }
}
class Gt extends Rt {
  constructor(n, e) {
    super(n, e);
  }
  dataURLToBlob(n) {
    const e = n.split(","), t = e[0], o = t && t.match(/:(.*?);/)[1], s = atob(e[1]);
    let a = s.length;
    const c = new Uint8Array(a);
    for (; a--; )
      c[a] = s.charCodeAt(a);
    return new Blob([c], { type: o });
  }
  async createGraphCanvas(n = "png") {
    return new Promise((e, t) => {
      const o = this.options.canvasZoom, s = this.$canvasDom.clientWidth, a = this.$canvasDom.clientHeight, c = this.options.canvasOffset.x, l = this.options.canvasOffset.y;
      this.options.checkedNodeId = "", this.options.canvasZoom = 100;
      const r = this.$canvasDom;
      let h = 999999, f = 999999, d = 0, m = 0;
      const y = 200;
      this.loading("Generating..."), this.graphData.nodes.forEach((w) => {
        w.x < h && (h = w.x), w.x > d && (d = w.x + w.el.offsetWidth), w.y < f && (f = w.y), w.y > m && (m = w.y + w.el.offsetHeight);
      });
      const v = h - y, g = f - y;
      this.graphData.nodes.forEach((w) => {
        w.x = w.x - v, w.y = w.y - g;
      }), this.$canvasDom.querySelectorAll(".rel-canvas-slot").forEach((w) => {
        const z = w;
        z.style.left = -g + "px", z.style.top = -g + "px";
      }), this.updateElementLines(), this.$canvasDom.querySelectorAll(".rel-lines-svg-el-lines").forEach((w) => {
        const z = w;
        z.style.width = "4000px", z.style.height = "4000px";
      }), this.options.canvasOffset.x = y * -1, this.options.canvasOffset.y = y * -1;
      const S = d - h + 200 + y * 2, P = m - f + 100 + y * 2, $ = window.devicePixelRatio;
      this.options.canvasSize.width = S * $, this.options.canvasSize.height = P * $, window.scrollTo(0, 0);
      const A = document.createElement("canvas");
      A.width = S * $, A.height = P * $, A.style.backgroundColor = getComputedStyle(r.parentElement, null).backgroundColor, u("canvas.style.backgroundColor:", A.style.backgroundColor), A.style.width = `${S * $}px`, A.style.height = `${P * $}px`, A.getContext("2d").scale(1, 1);
      const D = {
        backgroundColor: A.style.backgroundColor,
        scale: $,
        canvas: A,
        logging: !0,
        width: S,
        height: P,
        useCORS: !0
      };
      setTimeout(() => {
        this.createImage(r, D, n, "", (w) => {
          this.options.canvasSize.width = s, this.options.canvasSize.height = a, this.options.canvasOffset.x = c, this.options.canvasOffset.y = l, this.options.canvasZoom = o, this.$canvasDom.querySelectorAll(".rel-canvas-slot").forEach((F) => {
            const Y = F;
            Y.style.left = "0px", Y.style.top = "0px";
          }), this.graphData.nodes.forEach((F) => {
            F.x = F.x + v, F.y = F.y + g;
          }), this.$canvasDom.querySelectorAll(".rel-lines-svg-el-lines").forEach((F) => {
            const Y = F;
            Y.style.width = "1px", Y.style.height = "1px";
          }), this.updateElementLines(), this.clearLoading(), e(w);
        });
      }, 1e3);
    });
  }
  createImage(n, e, t, o, s) {
    u("createImage:", e), pt(n, e).then((a) => {
      s && s(a);
    });
  }
  async getImageBase64(n = "png") {
    const e = await this.createGraphCanvas(n), t = document.body.appendChild(e);
    t.style.display = "none";
    const o = t.toDataURL(`image/${n}`);
    return document.body.removeChild(t), o;
  }
  async downloadAsImage(n = "png", e) {
    if (this.listeners.onImageDownload && this.listeners.onImageDownload(this.$canvasDom, n) === !1)
      return;
    if (this.graphData.nodes.length === 0)
      throw new Error("No nodes, no content to export!");
    e || (e = this.options.downloadImageFileName), e || (e = `relation-graph-${(Math.random() * 1e5).toFixed(0)}`);
    const t = await this.createGraphCanvas(n);
    u("downloadImageAsFile:", n, e);
    let o = !0;
    this.listeners.onImageSaveAsFile && this.listeners.onImageSaveAsFile(
      t,
      n,
      e
    ) === !1 && (o = !1), o && await this.downloadImageAsFile(t, n, e);
  }
  async downloadImageAsFile(n, e, t) {
    const o = document.body.appendChild(n);
    o.style.display = "none";
    const s = this.dataURLToBlob(o.toDataURL(`image/${e}`));
    document.body.removeChild(o);
    const a = document.createElement("a");
    a.style.display = "none";
    try {
      window.navigator.msSaveOrOpenBlob ? window.navigator.msSaveOrOpenBlob(s, `${t}.${e}`) : (a.setAttribute("href", URL.createObjectURL(s)), a.setAttribute("download", `${t}.${e}`), document.body.appendChild(a), a.click(), u("click ok!"), URL.revokeObjectURL(await s.text()), u("revokeObjectURL ok!"), document.body.removeChild(a), u("removeChild ok!"));
    } catch (c) {
      u("[SEEKS Graph]Create and download image error:", c);
    }
  }
}
class Vt extends Gt {
  constructor(n, e) {
    super(n, e);
  }
  createReturnValue(n, e) {
    return { path: n, textPosition: e };
  }
  createLinePath(n, e, t) {
    let o = n.fromNode;
    o || (o = {
      x: 0,
      y: 0,
      el: {
        offsetWidth: 10,
        offsetHeight: 10
      }
    });
    const s = n.toNode, a = n.relations.length;
    return t || (t = 0), this.createLinePathByTwoNode(o, s, e, t, a);
  }
  _getJunctionPoint(n, e) {
    return n === se.border ? Z.getBorderPoint4MultiLine(...e) : n === se.ltrb ? Z.getRectJoinPoint(...e) : n === se.tb ? Z.getRectVJoinPoint(...e) : n === se.lr ? Z.getRectHJoinPoint(...e) : n === se.left ? Z.getRectLeftJoinPoint(...e) : n === se.right ? Z.getRectRightJoinPoint(...e) : n === se.top ? Z.getRectTopJoinPoint(...e) : n === se.bottom ? Z.getRectBottomJoinPoint(...e) : Z.getBorderPoint4MultiLine(...e);
  }
  createLinePathByTwoNode(n, e, t, o = 0, s = 1) {
    const a = t.lineShape || this.options.defaultLineShape || 1, c = t.lineDirection || this.options.layoutDirection || "h";
    let l = n.x, r = n.y, h = e.x, f = e.y;
    const d = { x: 0, y: 0, rotate: 0 };
    if (Number.isNaN(l) || Number.isNaN(r))
      return u("error start node:", n.text, n.x, n.y), d.x = 50, d.y = 50, d.rotate = 0, this.createReturnValue("M 0 0 L 100 100", d);
    if (Number.isNaN(h) || Number.isNaN(f))
      return u("error end point:", e.text, e.x, e.y), d.x = 50, d.y = 50, d.rotate = 0, this.createReturnValue("M 0 0 L 100 100", d);
    let m = n.el.offsetWidth || n.width || 60, y = n.el.offsetHeight || n.height || 60;
    if (Number.isNaN(m) || Number.isNaN(y))
      return d.x = 50, d.y = 50, d.rotate = 0, this.createReturnValue("M 0 0 L 100 100", d);
    let v = e.el.offsetWidth || e.width || 60, g = e.el.offsetHeight || e.height || 60;
    if (Number.isNaN(v) || Number.isNaN(g))
      return d.x = 50, d.y = 50, d.rotate = 0, this.createReturnValue("M 0 0 L 100 100", d);
    t.isReverse && ([l, r, h, f, m, y, v, g] = [
      h,
      f,
      l,
      r,
      v,
      g,
      m,
      y
    ]);
    const M = [
      l,
      r,
      h,
      f,
      m,
      y,
      v,
      g,
      n.nodeShape || this.options.defaultNodeShape,
      t.isReverse,
      s,
      o
    ], N = [
      h,
      f,
      l,
      r,
      v,
      g,
      m,
      y,
      e.nodeShape || this.options.defaultNodeShape,
      !t.isReverse,
      s,
      o
    ], S = this.options.defaultJunctionPoint || se.border, P = t.fromJunctionPoint || n.junctionPoint || S, $ = t.toJunctionPoint || e.junctionPoint || S, A = this._getJunctionPoint(P, M), D = this._getJunctionPoint($, N);
    if (!A || !D)
      return this.createReturnValue(
        "Unable to calculate the starting point and ending point of the line.",
        d
      );
    const w = A.x, z = A.y, I = D.x, F = D.y;
    if (n === e) {
      const ce = l + m / 2, b = r + y / 2, ee = Math.atan2(z - b, w - ce), R = Math.sin(ee + Math.PI) * 5, V = Math.cos(ee + Math.PI) * 5, te = { x: w - R, y: z - V }, Ie = { x: w + R, y: z + V }, ot = w - V * 5, nt = z - R * 5, it = w - V * 5, st = z - R * 5, at = `M${te.x},${te.y} C${ot},${nt} ${it},${st} ${Ie.x},${Ie.y}`;
      return d.x = w - V / (V + R) * 20, d.y = z + R / (V + R) * 20, d.rotate = 0, this.createReturnValue(at, d);
    }
    if (Number.isNaN(w) || Number.isNaN(z))
      return console.error("error start point:", n), d.x = 50, d.y = 50, d.rotate = 0, this.createReturnValue("M 0 0 L 100 100", d);
    if (Number.isNaN(I) || Number.isNaN(F))
      return console.error("error end point:", e), d.x = 50, d.y = 50, d.rotate = 0, this.createReturnValue("M 0 0 L 100 100", d);
    const Y = l + m / 2, ne = r + y / 2, E = h + v / 2, O = f + g / 2, ve = this.createLinePathData(
      t,
      d,
      s,
      o,
      c,
      a,
      w,
      z,
      Y,
      ne,
      m,
      y,
      I,
      F,
      E,
      O,
      v,
      g
    );
    return this.createReturnValue(ve, d);
  }
  createLinePathData(n, e, t, o, s, a, c, l, r, h, f, d, m, y, v, g, M, N) {
    let S = m - c, P = y - l, $ = m > c ? 1 : -1, A = y > l ? 1 : -1, D = s === "v" ? A : $, w = "";
    if (a === 4) {
      const z = c - r, I = l - h, F = m - v, Y = y - g;
      let ne = this.options.defaultPloyLineRadius || 0;
      const E = Math.min(ne, Math.abs(S)) * (c < m ? 1 : -1), O = Math.min(ne, Math.abs(P)) * (l < y ? 1 : -1), ve = Math.abs(z) >= f / 2 ? "h" : "v", ce = Math.abs(F) >= M / 2 ? "h" : "v", b = [];
      if (ve === "v") {
        const ee = Math.min(50, Math.abs(y - l) / 2), R = I > 0 ? ee : -ee;
        if (e.x = m, e.y = l + R + (I > 0 ? 20 : -5), b.push(`M ${c} ${l}`), b.push(`v${R - O}`), ce === "v")
          b.push(`c${0},${O},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`h${m - c - E}`), b.push(`c${E},${0},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`v${y - l - R - O}`);
        else {
          b.push(`c${0},${O},`), b.push(`${E},${O},`), b.push(`${E},${O}`);
          const V = Math.min(30, Math.abs(m - c) / 2), te = F > 0 ? -V : V;
          b.push(`h${m - c + te - E}`), b.push(`c${E},${0},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`v${y - l - R - O}`), b.push(`h${te - E}`);
        }
      } else {
        const ee = Math.min(30, Math.abs(m - c) / 2), R = z > 0 ? ee : -ee;
        if (e.x = c + R + (z > 0 ? 20 : -50), e.y = y - 5, b.push(`M ${c} ${l}`), b.push(`h${R - E}`), ce === "v") {
          const V = Math.min(30, Math.abs(y - l) / 2), te = Y > 0 ? -V : V;
          b.push(`c${E},${0},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`v${y - l + te - O}`), b.push(`h${m - c - R - E}`), b.push(`c${0},${O},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`v${te - O}`);
        } else
          b.push(`c${E},${0},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`v${y - l - O * 2}`), b.push(`c${0},${O},`), b.push(`${E},${O},`), b.push(`${E},${O}`), b.push(`h${m - c - R - E}`);
      }
      w = b.join(" ");
    } else if (a === 2 || a === 3 || a === 5 || a === 6 || a === 7) {
      const z = c - r, I = l - h, F = m - v, Y = y - g, ne = 1 / (t + 1) * (o + 1);
      let E, O;
      if (a === 2)
        E = s === "v" ? { x: 0, y: D * 30 } : { x: D * 30, y: 0 }, O = s === "v" ? { x: S * ne, y: D * -10 } : { x: D * -10, y: P * ne };
      else if (a === 3)
        E = s === "v" ? { x: 0, y: P * ne } : { x: D * 30, y: 0 }, O = s === "v" ? { x: 0, y: 0 } : { x: D * -10, y: P * ne };
      else if (a === 5)
        E = s === "v" ? { x: 0, y: 0 } : { x: 0, y: 0 }, O = s === "v" ? { x: 0, y: P * ne } : { x: S * ne, y: 0 };
      else if (a === 6) {
        const ce = Math.min(200, Math.max(100, Math.abs(S / 2))), b = Math.min(200, Math.max(100, Math.abs(P / 2))), ee = z / (Math.abs(z) + Math.abs(I)) * ce, R = I / (Math.abs(z) + Math.abs(I)) * b;
        E = { x: ee, y: R };
        const V = F / (Math.abs(F) + Math.abs(Y)) * ce + S, te = Y / (Math.abs(F) + Math.abs(Y)) * b + P;
        O = { x: V, y: te };
      } else if (a === 7) {
        const ee = z / (Math.abs(z) + Math.abs(I)) * 30, R = I / (Math.abs(z) + Math.abs(I)) * 30;
        E = { x: ee, y: R };
        const V = F / (Math.abs(F) + Math.abs(Y)) * 30 + S, te = Y / (Math.abs(F) + Math.abs(Y)) * 30 + P;
        O = { x: V, y: te };
      }
      const ve = this.calcCurveCenter(
        { x: c, y: l },
        { x: c + E.x, y: l + E.y },
        { x: c + O.x, y: l + O.y },
        { x: c + S, y: l + P },
        a < 6 ? 0.8 : 0.5
      );
      e.x = ve.x, e.y = ve.y, w = `M${c},${l} c${E.x},${E.y} ${O.x},${O.y} ${S},${P}`;
    } else
      e.rotate = Z.getTextAngle(c, l, m, y), e.x = Math.round(c + (m - c) / 2), e.y = Math.round(l + (y - l) / 2), Number.isNaN(e.rotate) && (e.rotate = 0), w = `M ${c} ${l} L ${m} ${y}`;
    return w;
  }
  calcCurveCenter(n, e, t, o, s = 0.5) {
    const a = { x: (1 - s) * n.x + s * e.x, y: (1 - s) * n.y + s * e.y }, c = { x: (1 - s) * e.x + s * t.x, y: (1 - s) * e.y + s * t.y }, l = { x: (1 - s) * t.x + s * o.x, y: (1 - s) * t.y + s * o.y }, r = { x: (1 - s) * a.x + s * c.x, y: (1 - s) * a.y + s * c.y }, h = { x: (1 - s) * c.x + s * l.x, y: (1 - s) * c.y + s * l.y };
    return { x: (1 - s) * r.x + s * h.x, y: (1 - s) * r.y + s * h.y };
  }
  createCheckedLinePath() {
    const n = this.options.checkedLineId;
    if (!!n)
      try {
        const e = this.getElementLineById(this.options.checkedLinkId);
        if (e) {
          const { path: c } = this.createLinePath(
            e,
            e.relations[0],
            0
          );
          return c;
        }
        const t = this.getLinkByLineId(n);
        if (!t) {
          u("Can not find link by checkedLineId:", n);
          return;
        }
        if (!le.isAllowShowNode(t.fromNode)) {
          u("from hide:", n);
          return;
        }
        if (!le.isAllowShowNode(t.toNode)) {
          u("to hide:", n);
          return;
        }
        const o = t.relations.findIndex((c) => c.id === n);
        if (o === -1) {
          u("Can not find checkedLineId:", n);
          return;
        }
        const s = t.relations[o], { path: a } = this.createLinePath(
          t,
          s,
          o
        );
        return a;
      } catch (e) {
        u(e);
      }
  }
  createCheckedLineStrokeWidth() {
    const n = this.options.checkedLineId;
    if (!n)
      return this.options.defaultLineWidth + 8;
    try {
      const e = this.getLinkByLineId(n);
      if (!e)
        return this.options.defaultLineWidth + 8;
      const t = e.relations.findIndex((s) => s.id === n);
      if (t === -1)
        return this.options.defaultLineWidth + 8;
      const o = e.relations[t];
      return o.lineWidth ? o.lineWidth + 8 : this.options.defaultLineWidth + 8;
    } catch (e) {
      u(e);
    }
  }
  getTextTransform(n, e, t, o) {
    if (Number.isNaN(e) || Number.isNaN(t))
      return "translate(0,0)";
    const s = n.lineShape === void 0 ? this.options.defaultLineShape : n.lineShape;
    return s === 1 || s === 4 ? `translate(${e},${t})rotate(${o || 0})` : `translate(${e},${t})`;
  }
  getArrow(n, e, t = !1) {
    return n.isHideArrow ? "none" : `url('#${this.getLineArrow(
      n.color,
      t,
      !1
    )}')`;
  }
}
class Yt extends Vt {
  constructor(e, t) {
    super(e, t);
    x(this, "zoomCenter_of_newSize", { x: 0, y: 0 });
  }
  zoom(e, t) {
    this.options.canvasZoom + e < 10 && (u("zoom:reset zoom=10"), e = 10 - this.options.canvasZoom);
    const o = this.options.canvasZoom + e, s = this.showZoomCenter(t, e);
    this.options.canvasOffset.x += s.buff_x, this.options.canvasOffset.y += s.buff_y, this.options.canvasZoom = o, this.refreshNVAnalysisInfo();
  }
  setZoom(e, t) {
    const o = Math.floor(e - this.options.canvasZoom);
    this.zoom(o, t);
  }
  getCanvasCoordinateByClientCoordinate(e) {
    const t = this.options.canvasZoom / 100, { NMCanvasStart: o, NMZoomCenter: s } = this.analysisByZoom(t, e), a = {
      x: s.x - o.x,
      y: s.y - o.y
    };
    return {
      x: a.x / t,
      y: a.y / t
    };
  }
  getClientCoordinateByCanvasCoordinate(e) {
    const t = this.options.canvasZoom / 100, { NMCanvasStart: o } = this.analysisByZoom(t), s = {
      x: e.x * t + o.x,
      y: e.y * t + o.y
    };
    return {
      x: s.x + this.options.canvasOffset.x,
      y: s.y + this.options.canvasOffset.y
    };
  }
  analysisByZoom(e, t) {
    const o = {
      NMViewPosition: { x: 0, y: 0 },
      NMViewCenter: { x: 0, y: 0 },
      NMCanvasCenter: { x: 0, y: 0 },
      NMCanvasStart: { x: 0, y: 0 },
      NMCanvasEnd: { x: 0, y: 0 },
      NMZoomCenter: { x: 0, y: 0 },
      NMViewBuff: { x: 0, y: 0 },
      NMCanvasOffsetBuff: { x: 0, y: 0 },
      NMCanvasSize: { width: 0, height: 0 }
    }, s = this.$dom.getBoundingClientRect();
    o.NMViewPosition.x = s.left, o.NMViewPosition.y = s.top, o.NMViewCenter.x = s.width / 2, o.NMViewCenter.y = s.height / 2;
    const a = this.options.canvasSize.width * e, c = this.options.canvasSize.height * e;
    o.NMCanvasCenter.x = this.options.canvasOffset.x + this.options.canvasSize.width / 2, o.NMCanvasCenter.y = this.options.canvasOffset.y + this.options.canvasSize.height / 2, o.NMCanvasStart.x = o.NMCanvasCenter.x - a / 2, o.NMCanvasStart.y = o.NMCanvasCenter.y - c / 2, o.NMCanvasEnd.x = o.NMCanvasCenter.x + a / 2, o.NMCanvasEnd.y = o.NMCanvasCenter.y + c / 2, o.NMZoomCenter.x = o.NMViewCenter.x, o.NMZoomCenter.y = o.NMViewCenter.y, t && (o.NMZoomCenter.x = t.x - o.NMViewPosition.x, o.NMZoomCenter.y = t.y - o.NMViewPosition.y);
    let l = o.NMViewCenter.x - o.NMCanvasCenter.x, r = o.NMViewCenter.y - o.NMCanvasCenter.y;
    return t && (l = o.NMZoomCenter.x - o.NMCanvasCenter.x, r = o.NMZoomCenter.y - o.NMCanvasCenter.y), o.NMViewBuff.x = l, o.NMViewBuff.y = r, o.NMCanvasSize.width = a, o.NMCanvasSize.height = c, o;
  }
  showZoomCenter(e, t) {
    if (!this.$dom)
      return { buff_x: 0, buff_y: 0 };
    const o = this.options.canvasZoom / 100, s = this.analysisByZoom(o, e), a = (this.options.canvasZoom + t) / 100, c = this.analysisByZoom(a, e), l = a / o, r = 0, h = 0, f = a / o, d = 0, m = 0;
    this.zoomCenter_of_newSize.x = l * s.NMViewBuff.x + h * s.NMViewBuff.y + d, this.zoomCenter_of_newSize.y = r * s.NMViewBuff.x + f * s.NMViewBuff.y + m;
    const y = s.NMViewBuff.x - this.zoomCenter_of_newSize.x, v = s.NMViewBuff.y - this.zoomCenter_of_newSize.y;
    this.zoomCenter_of_newSize.x += s.NMCanvasCenter.x, this.zoomCenter_of_newSize.y += s.NMCanvasCenter.y;
    let g = s.NMCanvasStart.x - s.NMCanvasCenter.x, M = s.NMCanvasStart.y - s.NMCanvasCenter.y, N = l * g + h * M + d, S = r * g + f * M + m;
    return c.NMCanvasStart.x = y + s.NMCanvasCenter.x + N, c.NMCanvasStart.y = y + s.NMCanvasCenter.y + S, g = s.NMCanvasEnd.x - s.NMCanvasCenter.x, M = s.NMCanvasEnd.y - s.NMCanvasCenter.y, N = l * g + h * M + d, S = r * g + f * M + m, c.NMCanvasEnd.x = y + s.NMCanvasCenter.x + N, c.NMCanvasEnd.y = y + s.NMCanvasCenter.y + S, s.NMCanvasOffsetBuff.x = y, s.NMCanvasOffsetBuff.y = v, {
      buff_x: y,
      buff_y: v
    };
  }
}
class Xt extends Yt {
  constructor(n, e) {
    super(n, e);
  }
  async doLayout() {
    if (!this.layouter) {
      u("no layouter");
      return;
    }
    if (!this.graphData.rootNode) {
      u("Cant find rootNode!");
      return;
    }
    this.options.showMaskWhenLayouting && this.loading(), await vt(200), this.options.showMaskWhenLayouting && this.clearLoading(), u("node size\uFF1A", this.graphData.nodes.length);
    const n = this.options.useAnimationWhenExpanded;
    this.disableNextLayoutAnimation && (this.options.useAnimationWhenExpanded = !1), this.layouter.requireLinks && this.layouter.setLinks(this.getLinks()), await this.layouter.placeNodes(this.graphData.nodes, this.graphData.rootNode), this.options.useAnimationWhenExpanded = n, this.disableNextLayoutAnimation = !1, this.updateElementLines(), this._dataUpdated();
  }
  async refresh(n = !0) {
    this.resetViewSize(), this.disableNextLayoutAnimation = !0, this._dataUpdated(), n && await this.doLayout(), u("placeOtherNodes"), await this.placeOtherNodes(), u("placeOtherNodes ok!"), await this.playShowEffect(), this.updateElementLines(), this._dataUpdated();
  }
  async playShowEffect() {
    if (this.graphData.nodes.length === 0) {
      u("relation-graph:move to center: data not ready!");
      return;
    }
    if (u("playShowEffect:", this.options.moveToCenterWhenRefresh, this.options.zoomToFitWhenRefresh), this.graphData.rootNode && Number.isNaN(this.graphData.rootNode.x)) {
      u("rootNode.x is NaN, graph is currently hidden?");
      return;
    }
    this.options.moveToCenterWhenRefresh ? await this.moveToCenter() : (this.setCanvasCenter(0, 0), this._dataUpdated()), await this.zoomToFitWhenRefresh();
  }
  async moveToCenter() {
    if (this.options.useAnimationWhenRefresh) {
      const n = this.getNodesCenter();
      u("center:", n.x, n.y);
      const e = this.getGraphOffet();
      u("centerOffset:", e.offset_x, e.offset_y);
      const t = this.options.viewSize.width / 2 - n.x + e.offset_x, o = this.options.viewSize.height / 2 - n.y + e.offset_y;
      await this.animateGoto(t, o, 500), this._dataUpdated();
    } else {
      const n = this.getNodesCenter();
      this.setCanvasCenter(n.x, n.y), this._dataUpdated();
    }
  }
  async zoomToFitWhenRefresh() {
    this.options.zoomToFitWhenRefresh && await this.zoomToFit();
  }
  async placeOtherNodes() {
    const n = [];
    this.graphData.rootNode && this.findGroupNodes(this.graphData.rootNode, n);
    const e = [], t = [];
    this.graphData.nodes.forEach((o) => {
      n.includes(o) || (this.options.placeSingleNode && (!o.targetNodes || o.targetNodes.length === 0) && o.fixed !== !0 ? (o.x = Math.floor(Math.random() * 200) - 100, o.y = Math.floor(Math.random() * 200) - 100, o.lot || (o.lot = { childs: [] }), o.lot.placed = !0, o.singleNode = !0, t.push(o)) : e.push(o));
    }), this.options.placeSingleNode && this.options.layoutName !== "fixed" && this.placeSingleNodes(t), this.options.placeOtherGroup && this.options.layoutName !== "fixed" && (await this.placeOtherGroup(e, n), this._dataUpdated());
  }
  placeSingleNodes(n) {
    if (n.length > 0) {
      u("sigle nodes:", n.length);
      const e = new _e({ layoutName: "force" }, this.options);
      e.allNodes = this.graphData.nodes, e.fastStart = !0, e.justLayoutSingleNode = !0, e.maxLayoutTimes = 100, e.byLine = !1, e.autoLayout(!0);
    }
  }
  async placeOtherGroup(n, e) {
    if (n.length > 0) {
      u("[placeOtherGroup]notPlacedNodes nodes:", n.length);
      const t = JSON.parse(JSON.stringify(this.layouter.layoutOptions)), o = Me(t, this.options);
      o.isMainLayouer = !1;
      const s = n[0], a = this.getStuffSize(e);
      u("[placeOtherGroup]placeOtherGroup:", o.layoutOptions.layoutName, "root:", s.text);
      let c = o.layoutOptions.layoutName.includes("tree") ? 300 : 600;
      if (o.layoutOptions.layoutName === "force") {
        const h = o;
        h.force_node_repulsion = 0.2, h.force_line_elastic = 1.5, c = 100;
      }
      s.x = a.maxX + c, s.y = 0, o.layoutOptions.fixedRootNode = !0;
      const l = [];
      this.findGroupNodes(s, l), u("[placeOtherGroup]thisGroupNodes:", n.length), this.layouter.requireLinks && this.layouter.setLinks(this.getLinks()), await o.placeNodes(l, s), e.push(...l);
      const r = [];
      n.forEach((h) => {
        e.includes(h) || r.push(h);
      }), await this.placeOtherGroup(r, e), this._dataUpdated();
    }
  }
  async zoomToFit(n) {
    const e = this.getStuffSize(), t = this.options.viewSize.width / e.width, o = this.options.viewSize.height / e.height, s = Math.min(t, o, 1);
    u("zoomToFit:", { stuffSize: e, zoomPercent: s, zoomPercentX: t, zoomPercentY: o, viewSize: this.options.viewSize }), this.options.useAnimationWhenRefresh ? (await this.animateToZoom(s * 100, 300), this._dataUpdated(), n && n()) : (this.setZoom(s * 100), this._dataUpdated(), n && n());
  }
  async animateGoto(n, e, t) {
    return new Promise((o, s) => {
      u("animateGoto:", n, e);
      const a = n - this.options.canvasOffset.x, c = e - this.options.canvasOffset.y, l = t, r = 5, h = Math.round(a / r), f = Math.round(c / r), d = l / r;
      this.animateStepAction(0, d, r, () => {
        this.options.canvasOffset.x += h, this.options.canvasOffset.y += f, this._dataUpdated();
      }, () => {
        o();
      });
    });
  }
  async animateToZoom(n, e) {
    return new Promise((t, o) => {
      const s = n - this.options.canvasZoom, a = e, c = 5, l = Math.round(s / c), r = a / c;
      u("animateToZoom:", s, l), this.animateStepAction(0, r, c, () => {
        this.zoom(l), this._dataUpdated();
      }, () => {
        this.setZoom(n), this._dataUpdated(), t();
      });
    });
  }
  animateStepAction(n, e, t, o, s) {
    n < t ? (o(n, t), setTimeout(() => {
      this.animateStepAction(n + 1, e, t, o, s);
    }, e)) : s();
  }
  toggleAutoLayout() {
    this.options.autoLayouting = !this.options.autoLayouting, u("toggleAutoLayout:to:", this.options.autoLayouting), this.options.autoLayouting ? this.startAutoLayout() : this.stopAutoLayout();
  }
  startAutoLayout() {
    this.options.autoLayouting = !0, this.layouter.autoLayout ? this.layouter.autoLayout(!0, this.isReact && (() => {
      this._dataUpdated();
    })) : u("Current layout not support stop()");
  }
  stopAutoLayout() {
    this.options.autoLayouting = !1, this.layouter.stop ? this.layouter.stop() : u("Current layout not support stop()");
  }
}
let ye = { x: 0, y: 0 };
const me = { x: 0, y: 0 }, ge = { x: 0, y: 0 };
let Pe, Be;
const Ve = (i) => {
  const n = {
    clientX: 0,
    clientY: 0
  };
  if (ue(i)) {
    const e = i.touches || i.targetTouches;
    if (!e)
      throw new Error("error targetTouches");
    n.clientX = e[0].clientX, n.clientY = e[0].clientY;
  } else
    n.clientX = i.clientX, n.clientY = i.clientY;
  return n;
}, q = {
  startDrag(i, n, e, t) {
    t ? Pe = (o, s, a) => {
      const c = o - ge.x, l = s - ge.y;
      t(c, l, me, ge, a);
    } : Pe = (o, s) => {
      ye.x = me.x + (o - ge.x), ye.y = me.y + (s - ge.y);
    }, Be = e, ye = n, me.x = ye.x, me.y = ye.y, u("[canvas]onDragStart...", ue(i), i);
    try {
      const o = Ve(i);
      ge.x = o.clientX, ge.y = o.clientY, ue(i) ? (document.body.addEventListener("touchmove", q.onNodeMove), document.body.addEventListener("touchend", q.onNodeDragend), i.preventDefault()) : (document.body.addEventListener("mousemove", q.onNodeMove), document.body.addEventListener("mouseup", q.onNodeDragend));
    } catch (o) {
      console.error(o.message);
    }
  },
  onNodeMove(i) {
    const n = Ve(i);
    Pe(n.clientX, n.clientY, i);
  },
  onNodeDragend(i) {
    ue(i) ? (document.body.removeEventListener("touchmove", q.onNodeMove), document.body.removeEventListener("touchend", q.onNodeDragend)) : (document.body.removeEventListener("mousemove", q.onNodeMove), document.body.removeEventListener("mouseup", q.onNodeDragend)), u("[canvas]onDragend...", ue(i), i), Be && Be(
      ye.x - me.x,
      ye.y - me.y,
      i
    );
  }
}, jt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: q
}, Symbol.toStringTag, { value: "Module" }));
class Ut extends Xt {
  constructor(e, t) {
    super(e, t);
    x(this, "prevClickTime", 0);
    x(this, "movingListener");
    x(this, "step1EventTime", 0);
    x(this, "onCreateLineCallback");
  }
  setDefaultLineShape(e) {
    this.options.defaultLineShape = e;
  }
  setDefaultJunctionPoint(e) {
    this.options.defaultJunctionPoint = e;
  }
  setCheckedNode(e) {
    this.options.checkedNodeId = e;
  }
  setCheckedLinkAndLine(e, t) {
    this.options.checkedLinkId = e.seeks_id, this.options.checkedLineId = t ? t.id : "";
  }
  clearChecked() {
    this.options.checkedNodeId = "", this.options.checkedLineId = "", this.options.checkedLinkId = "";
  }
  selectNode(e, t) {
    e.selected = t;
  }
  flashNode(e, t) {
    e.flashing = t;
  }
  updateNodeOffsetSize(e, t, o) {
    e.el.offsetWidth = t, e.el.offsetHeight = o;
  }
  onNodeClick(e, t) {
    if (Date.now() - this.prevClickTime < 200) {
      u("[node]click abort : time < 200");
      return;
    }
    u("[node]node click", e.text), this.prevClickTime = Date.now(), !t.shiftKey && this.options.disableNodeClickEffect !== !0 && e.disableDefaultClickEffect !== !0 && (this.options.checkedLinkId = "", this.options.checkedLineId = "", this.setCheckedNode(e.id)), this.options.creatingLinePlot && this.onNodeClickWhenCreatingLinePlot(e), this.listeners.onNodeClick && this.listeners.onNodeClick(e, t);
  }
  onLineClick(e, t, o) {
    u("onLineClick:", "line:", e, "link:", t), this.options.disableLineClickEffect !== !0 && e.disableDefaultClickEffect !== !0 && (this.setCheckedNode(""), this.setCheckedLinkAndLine(t, e)), this.listeners.onLineClick && this.listeners.onLineClick(e, t, o);
  }
  async expandOrCollapseNode(e, t) {
    e.expanded === !1 ? await this.expandNode(e, t) : await this.collapseNode(e, t);
  }
  setChildsFromPosition(e, t) {
    e.lot.childs.forEach((o) => {
      o.x = t.x, o.y = t.y, this.setChildsFromPosition(o, t);
    });
  }
  async expandNode(e, t) {
    u("onNodeExpand:", e), e.expanded = !0, this.options.useAnimationWhenExpanded && (await this.layouter.snapshotBeforeAnimation(), this.setChildsFromPosition(e, e), await this.layouter.animationLayout(!1)), u("relayout check:", this.options.reLayoutWhenExpandedOrCollapsed), this.options.reLayoutWhenExpandedOrCollapsed && (u("relayout..."), await this.layouter.snapshotBeforeAnimation(), await this.doLayout()), this.updateElementLines(), this._dataUpdated(), this.listeners.onNodeExpand && this.listeners.onNodeExpand(e, t);
  }
  setChildsToPosition(e, t) {
    e.lot.childs.forEach((o) => {
      o.lot.from_x = o.x, o.lot.from_y = o.y, o.lot.to_x = t.x, o.lot.to_y = t.y, this.setChildsToPosition(o, t);
    });
  }
  async collapseNode(e, t) {
    u("onNodeCollapse:", e), this.options.useAnimationWhenExpanded && (await this.layouter.snapshotBeforeAnimation(), this.setChildsToPosition(e, e), await this.layouter.animationLayout(!1)), e.expanded = !1, u("relayout check:", this.options.reLayoutWhenExpandedOrCollapsed), this.options.reLayoutWhenExpandedOrCollapsed && (u("relayout..."), await this.layouter.snapshotBeforeAnimation(), await this.doLayout()), this.updateElementLines(), this._dataUpdated(), this.listeners.onNodeCollapse && this.listeners.onNodeCollapse(e, t);
  }
  onNodeDragEnd(e, t) {
    this.updateElementLines(), this.listeners.onNodeDragEnd && this.listeners.onNodeDragEnd(e, t);
  }
  onCanvasDragEnd(e) {
    this.listeners.onCanvasDragEnd && this.listeners.onCanvasDragEnd(e);
  }
  onCanvasClick(e) {
    this.options.creatingLinePlot && this.onCanvasClickWhenCreatingLinePlot(e), this.listeners.onCanvasClick && this.listeners.onCanvasClick(e);
  }
  clickGraphMask(e) {
    this.clearLoading();
  }
  onCanvasSelectionEnd(e, t) {
    this.listeners.onCanvasSelectionEnd && this.listeners.onCanvasSelectionEnd(e, t);
  }
  startCreatingNodePlot(e, t) {
    this.options.newNodeTemplate = Ce(JSON.parse(JSON.stringify(We))), this.options.creatingNodePlot = !0;
    const o = ue(e);
    this.options.showTemplateNode = !o, console.log("is touch event:", o);
    let s = (y, v) => {
      this.options.newNodeTemplate.x = y, this.options.newNodeTemplate.y = v, this._dataUpdated();
    }, a = (y, v) => {
      const g = "s-" + Date.now();
      this.addNodes([{
        id: g,
        text: this.options.newNodeTemplate.text,
        x: y,
        y: v
      }]);
    };
    t && t.templateText && (this.options.newNodeTemplate.text = t.templateText), t && t.templateStyleClass && (this.options.newNodeTemplate.styleClass = t.templateStyleClass), t && t.templateNode && Object.keys(t.templateNode).forEach((y) => {
      this.options.newNodeTemplate[y] = t.templateNode[y];
    }), t && t.templateMove && (s = t.templateMove), t && t.onCreateNode && (a = t.onCreateNode);
    const c = this.$dom.getBoundingClientRect();
    u("[CreatingNodePlot]startCreatingNodePlot:");
    const l = ze(e), r = l.clientX - c.x + 10, h = l.clientY - c.y + 10;
    o || s(r, h);
    const f = (y) => {
      const v = this.$dom.getBoundingClientRect();
      u("[CreatingNodePlot]objectTemplateMove");
      const g = y.clientX - v.x + 10, M = y.clientY - v.y + 10;
      s(g, M);
    }, d = (y) => {
      u("[CreatingNodePlot]user abort!"), this.$dom.removeEventListener("mousemove", f), this.$dom.removeEventListener("click", m), this.$dom.removeEventListener("contextmenu", d), this.options.creatingNodePlot = !1;
    }, m = (y) => {
      let v = !1;
      if (this.options.creatingNodePlot || (v = !0), this.$dom.removeEventListener("mousemove", f), this.$dom.removeEventListener("click", m), this.$dom.removeEventListener("contextmenu", d), this.options.creatingNodePlot = !1, v) {
        u("[CreatingNodePlot]action be abort!");
        return;
      }
      const g = ze(y), M = g.clientX - c.x + 10, N = g.clientY - c.y + 10;
      if (t && t.disableClickCreate && Math.abs(r - M) < 5 && Math.abs(h - N) < 5) {
        u("[CreatingNodePlot]create node be abort!");
        return;
      }
      const S = this.getCanvasCoordinateByClientCoordinate({ x: g.clientX, y: g.clientY });
      u("[CreatingNodePlot]objectBePlaced:", S), a(S.x, S.y), this._dataUpdated();
    };
    setTimeout(() => {
      this.$dom.addEventListener("click", m), this.$dom.addEventListener("contextmenu", d);
    }, 300), o || this.$dom.addEventListener("mousemove", f);
  }
  startCreatingLinePlot(e, t) {
    const o = ue(e);
    t && t.onCreateLine && (this.onCreateLineCallback = t.onCreateLine), t && t.template && Object.assign(this.options.newLineTemplate, t.template), this.options.newLinkTemplate.fromNode = null, t && t.fromNode && (this.options.newLinkTemplate.toNode.x = t.fromNode.x + 50, this.options.newLinkTemplate.toNode.y = t.fromNode.y + 50, this.options.newLinkTemplate.fromNode = t.fromNode, this.step1EventTime = Date.now()), this.options.creatingLinePlot = !0, this.options.newLinkTemplate.toNodeObject = null, u("[CreatingLinePlot]startCreatingLinePlot:", o), o || (u("[CreatingLinePlot]Listener move"), this.movingListener = this.onMovingWhenCreatingLinePlot.bind(this), this.$dom.addEventListener("mousemove", this.movingListener));
  }
  stopCreatingLinePlot() {
    u("[CreatingLinePlot]stop CreatingLinePlot!"), this.options.creatingLinePlot = !1, this.options.newLinkTemplate.fromNode = null, this.options.newLinkTemplate.toNodeObject = null, this.onCreateLineCallback = void 0, this.$dom.removeEventListener("mousemove", this.movingListener), this._dataUpdated();
  }
  onMovingWhenCreatingLinePlot(e) {
    if (u("[CreatingLinePlot]mousemove"), this.options.newLinkTemplate.fromNode) {
      const t = this.getCanvasCoordinateByClientCoordinate({
        x: e.clientX,
        y: e.clientY
      });
      this.options.newLinkTemplate.toNode.x = t.x, this.options.newLinkTemplate.toNode.y = t.y, this._dataUpdated();
    }
  }
  onCanvasClickWhenCreatingLinePlot(e) {
    if (Date.now() - this.step1EventTime < 500) {
      u("[CreatingLinePlot]step1EventTime:", this.step1EventTime);
      return;
    }
    if (!this.options.newLinkTemplate.fromNode) {
      u("[CreatingLinePlot]CreatingLinePlot:fromNode not set!");
      return;
    }
    if (!this.options.newLinkTemplate.toNodeObject) {
      u("[CreatingLinePlot]CreatingLinePlot:toNodeObject not set!");
      const t = ze(e), o = this.getCanvasCoordinateByClientCoordinate({ x: t.clientX, y: t.clientY });
      this.onCreateLine(this.options.newLinkTemplate.fromNode, o);
    }
    this.stopCreatingLinePlot();
  }
  onNodeClickWhenCreatingLinePlot(e) {
    this.options.newLinkTemplate.fromNode ? (u("[CreatingLinePlot]step 2: set toNodeObjecct:", this.options.newLinkTemplate.fromNode, e), this.options.newLinkTemplate.toNodeObject = e, this.onCreateLine(this.options.newLinkTemplate.fromNode, e), this.stopCreatingLinePlot()) : (u("[CreatingLinePlot]step 1: set fromNode:", e), this.options.newLinkTemplate.fromNode = e, this.options.newLinkTemplate.toNode.x = e.x + 50, this.options.newLinkTemplate.toNode.y = e.y + 50, this.step1EventTime = Date.now());
  }
  onCreateLine(e, t) {
    u("[CreatingLinePlot][fire-event]onCreateLine:", e, t), this.onCreateLineCallback && this.onCreateLineCallback(e, t, this.options.newLineTemplate);
  }
  isNode(e) {
    const t = Ae(e, "rel-node-peel", "rel-map");
    return t ? this.getNodeById(t.dataset.id) : void 0;
  }
  isLink(e) {
    const t = Ae(e, "rel-link-peel", "rel-map");
    return t ? this.getLinkById(t.dataset.id) : void 0;
  }
  onContextmenu(e) {
    let t = "canvas", o = this.isNode(e.target);
    o ? t = "node" : (o = this.isLink(e.target), o && (t = "link")), u("contextmenu:objectType", t, o), this.listeners.onContextmenu && this.listeners.onContextmenu(e, t, o);
  }
  fullscreen(e) {
    e === void 0 ? (this.options.fullscreen = !this.options.fullscreen, de.toggle(this.$dom).then(() => {
      setTimeout(() => {
        this.refreshNVAnalysisInfo();
      }, 1e3);
    })) : (this.options.fullscreen = e, setTimeout(() => {
      this.refreshNVAnalysisInfo();
    }, 1e3));
  }
  async focusNodeById(e) {
    let t;
    this.graphData.nodes.forEach((o) => {
      o.id === e && (t = o);
    }), t && await this.handleSelect(t);
  }
  async focusRootNode() {
    u("relation-graph:focusRootNode"), this.graphData.rootNode && await this.handleSelect(this.graphData.rootNode);
  }
  async handleSelect(e) {
    u("checked:", e), scrollTo({
      top: this.$dom.offsetTop
    }), await this.animateToZoom(100, 300);
    const t = e.width || 50, o = e.height || 50, s = e.x * -1 + this.options.viewSize.width / 2 - t / 2, a = e.y * -1 + this.options.viewSize.height / 2 - o / 2;
    await this.animateGoto(s, a, 500), this.options.checkedNodeId = e.id, this.refreshNVAnalysisInfo();
  }
  onMouseWheel(e) {
    if (this.options.disableZoom)
      return e.cancelBubble = !1, !0;
    try {
      e.cancelBubble = !0, e.preventDefault(), e.stopPropagation();
    } catch {
    }
    const t = {
      x: e.clientX,
      y: e.clientY
    };
    let o = e.deltaY;
    o === void 0 && (o = e.wheelDelta);
    const s = -1;
    o > 0 ? this.zoom(5 * s, t) : this.zoom(-5 * s, t);
  }
  onLineDragStart(e, t) {
    u("onLineDragStart...");
    const o = { x: e.fromNode.x, y: e.fromNode.y }, s = { x: e.toNode.x, y: e.toNode.y }, a = (c, l, r, h, f) => {
      e.fromNode.x = o.x + c / (this.options.canvasZoom / 100), e.fromNode.y = o.y + l / (this.options.canvasZoom / 100), e.toNode.x = s.x + c / (this.options.canvasZoom / 100), e.toNode.y = s.y + l / (this.options.canvasZoom / 100), this._dataUpdated();
    };
    q.startDrag(t, { x: 0, y: 0 }, (...c) => {
      this.onLineDragEnd(...c);
    }, a);
  }
  onLineDragEnd(e, t, o) {
    u("onLineDragEnd"), this.updateElementLines();
  }
  onCanvasDragStart(e) {
    if (u("[canvas]onCanvasDragStart..."), this.options.disableDragCanvas || e.shiftKey) {
      this.startCreateSelection(e);
      return;
    }
    if (!this.options.disableDragLine) {
      const o = this.isLink(e.target);
      if (o) {
        this.onLineDragStart(o, e);
        return;
      }
    }
    let t;
    if (ue(e)) {
      let o, s = 1;
      t = (a, c, l, r, h) => {
        const f = h.touches || h.targetTouches, d = f[0];
        if (f && f.length > 1) {
          h.preventDefault();
          const m = f[1];
          o || (o = { x: m.clientX, y: m.clientY }, s = this.options.canvasZoom);
          const y = { x: d.clientX, y: d.clientY }, v = { x: m.clientX, y: m.clientY }, g = Math.hypot(o.x - r.x, o.y - r.y), N = Math.hypot(v.x - y.x, v.y - y.y) / g, S = s * N;
          this.setZoom(S), this._dataUpdated();
        } else {
          const m = d.clientX, y = d.clientY;
          let v = l.x + (m - r.x), g = l.y + (y - r.y);
          this.options.useHorizontalView ? (v = l.x + (y - r.y), g = l.y - (m - r.x), this.setCanvasOffset(v, g)) : this.setCanvasOffset(v, g), this._dataUpdated();
        }
      };
    } else
      t = (o, s, a, c, l) => {
        const r = a.x + o, h = a.y + s;
        this.setCanvasOffset(r, h), this._dataUpdated();
      };
    q.startDrag(e, this.options.canvasOffset, (...o) => {
      this.onCanvasDragStop(...o);
    }, t);
  }
  onCanvasDragStop(e, t, o) {
    if (u("[canvas]onCanvasDragStop..."), this.options.creatingSelection) {
      console.log("creatingSelection end"), this.options.creatingSelection = !1, this._dataUpdated(), this.onCanvasSelectionEnd(this.options.selectionView, o);
      return;
    }
    if (e === 0 && t === 0) {
      u("[canvas]click2"), this._dataUpdated(), this.onCanvasClick(o);
      return;
    }
    Math.abs(e) + Math.abs(t) > 6 ? setTimeout(() => {
      u("[canvas]onDragEnd1"), this._dataUpdated(), this.onCanvasDragEnd(o);
    }, 100) : (u("[canvas]onDragEnd2"), this._dataUpdated(), this.onCanvasDragEnd(o));
  }
  startCreateSelection(e) {
    let t = !1;
    const o = (s, a, c, l, r) => {
      if (!t && Math.abs(s) + Math.abs(a) > 6 && (t = !0, this.options.creatingSelection = !0, this.options.selectionView.x = l.x, this.options.selectionView.y = l.y), t) {
        const h = this.getBoundingClientRect();
        s < 0 ? (this.options.selectionView.x = l.x + s - h.x, this.options.selectionView.width = Math.abs(s)) : (this.options.selectionView.x = l.x - h.x, this.options.selectionView.width = s), a < 0 ? (this.options.selectionView.y = l.y + a - h.y, this.options.selectionView.height = Math.abs(a)) : (this.options.selectionView.y = l.y - h.y, this.options.selectionView.height = a);
      }
      this._dataUpdated();
    };
    q.startDrag(e, { x: 0, y: 0 }, (...s) => {
      this.onCanvasDragStop(...s);
    }, o);
  }
  onNodeDragStart(e, t) {
    if (this.options.disableDragNode || e.disableDrag)
      return;
    isNaN(e.x) && (e.x = 0), isNaN(e.y) && (e.y = 0), e.dragging = !0, this.listeners.onNodeDragStart && this.listeners.onNodeDragStart(e, t);
    const o = (s, a, c) => {
      e.dragging = !1, this.onNodeDraged(e, s, a, c), this._dataUpdated();
    };
    q.startDrag(t, e, o, (s, a, c) => {
      let l = s / (this.options.canvasZoom / 100) + c.x, r = a / (this.options.canvasZoom / 100) + c.y;
      if (this.listeners.onNodeDragging) {
        const h = this.listeners.onNodeDragging(e, l, r, t);
        h && (typeof h.x == "number" && (l = h.x), typeof h.y == "number" && (r = h.y));
      }
      this.setNodePosition(e, l, r), this.options.useHorizontalView ? (l = a / (this.options.canvasZoom / 100) + c.x, r = -s / (this.options.canvasZoom / 100) + c.y, this.setNodePosition(e, l, r)) : this.setNodePosition(e, l, r), this.updateElementLines(), this._dataUpdated();
    });
  }
  onNodeDraged(e, t, o, s) {
    if (t === 0 && o === 0) {
      u("[node]node click by drag"), this.onNodeClick(e, s);
      return;
    }
    this.options.isMoveByParentNode && e.lot.childs.forEach((a) => {
      a.x += t, a.y += o;
    }), Math.abs(t) + Math.abs(o) > 6 ? (this.prevClickTime = Date.now(), setTimeout(() => {
      u("[node]onDragEnd2"), this.onNodeDragEnd(e, s);
    }, 100)) : (u("[node]onDragEnd1"), this.onNodeDragEnd(e, s));
  }
}
class Zt extends Ut {
  constructor(n, e) {
    super(n, e);
  }
  dataUpdated() {
    this.isReact ? this._dataUpdated() : (this.zoom(1), this.zoom(-1));
  }
  async setOptions(n, e = !1) {
    if (this.disableNextLayoutAnimation = !0, this._setOptions(n), e === !0) {
      u("setOptions:justUpdateOptionsValue");
      return;
    }
    this.initLayouter(), this.resetViewSize(), await this.doLayout(), this.resetViewSize();
  }
  setLayouter(n) {
    u("setLayouterClass::", n), this.userLayouerClass = n, this.layouter = this.userLayouerClass;
  }
  async switchLayout(n, e = !0, t = !1) {
    this.listeners.beforeChangeLayout && this.listeners.beforeChangeLayout(n) === !1 && (e = !1);
    const o = this.layouter ? this.layouter.allNodes : [], s = this.layouter && this.layouter.rootNode;
    u("[change layout]switchLayout"), this.stopAutoLayout(), Ee(n, this.options), this._initLayoutByLayoutOptions(n), this.layouter.allNodes = o, this.layouter.rootNode = s, e ? await this.refresh() : (t || (this.disableNextLayoutAnimation = !0), await this.doLayout());
  }
  async setJsonData(n, e = !1) {
    await this._setJsonData(n);
    const t = n.rootId;
    if (t && (this.graphData.rootNode = this.graphData.nodes.find((o) => o.id === t)), !this.graphData.rootNode && this.graphData.nodes.length > 0 && (this.graphData.rootNode = this.graphData.nodes[0]), this.graphData.rootNode)
      this.options.defaultFocusRootNode && this.setCheckedNode(this.graphData.rootNode.id);
    else
      throw new Error("The root node [rootId] is not set! Or cannot get the root node:" + n.rootId + ", If you don't have any nodes to display, you can simply set an invisible node: {id:'root', opacity:0}");
    e && (u("resetViewSize:", e), this.resetViewSize()), this.disableNextLayoutAnimation = !0, await this.doLayout();
  }
  async appendJsonData(n, e = !0) {
    u("appendData:", n), this.loadGraphJsonData(n), e && (this.disableNextLayoutAnimation = !0, await this.doLayout());
  }
}
class et extends Zt {
  constructor(n, e) {
    super(n, e);
  }
  ready() {
    this.initLayouter(), this.resetViewSize(), this.refreshNVAnalysisInfo();
  }
}
const Jt = /* @__PURE__ */ J({
  __name: "RGNodeExpandHolder",
  props: {
    nodeProps: null,
    expandButtonClass: null,
    expandOrCollapseNode: { type: Function },
    expandHolderPosition: null,
    color: null
  },
  setup(i) {
    return (n, e) => (L(), k("div", {
      class: U([["c-expand-positon-" + i.expandHolderPosition], "c-btn-open-close"])
    }, [
      C("span", {
        class: U(i.expandButtonClass),
        style: j({ "background-color": i.color }),
        onClick: e[0] || (e[0] = ae(
          (...t) => i.expandOrCollapseNode && i.expandOrCollapseNode(...t),
          ["stop"]
        )),
        onTouchend: e[1] || (e[1] = ae(
          (...t) => i.expandOrCollapseNode && i.expandOrCollapseNode(...t),
          ["stop"]
        ))
      }, null, 38)
    ], 2));
  }
}), qt = ["data-id"], Kt = ["innerHTML"], Qt = ["innerHTML"], eo = ["innerHTML"], tt = /* @__PURE__ */ J({
  __name: "RGNode",
  props: {
    nodeProps: null
  },
  setup(i) {
    const n = i, e = pe(), t = W(ie), o = W(Q), s = B(() => o.options), a = B(() => {
      const g = n.nodeProps.borderWidth === void 0 ? s.value.defaultNodeBorderWidth : n.nodeProps.borderWidth;
      return (n.nodeProps.borderColor || s.value.defaultNodeBorderColor) + " solid " + g + "px";
    }), c = B(() => {
      if (n.nodeProps.width === 0)
        return;
      const g = n.nodeProps.width || s.value.defaultNodeWidth;
      if (!!g)
        return g + "px";
    }), l = B(() => {
      if (n.nodeProps.height === 0)
        return;
      const g = n.nodeProps.height || s.value.defaultNodeHeight;
      if (!!g)
        return g + "px";
    }), r = B(() => n.nodeProps.expandHolderPosition && n.nodeProps.expandHolderPosition !== "hide" || s.value.defaultExpandHolderPosition && s.value.defaultExpandHolderPosition !== "hide" && n.nodeProps.lot.childs && n.nodeProps.lot.childs.length > 0), h = B(() => n.nodeProps.expanded === !1 ? "c-expanded" : "c-collapsed"), f = (g) => {
      t == null || t.value.expandOrCollapseNode(n.nodeProps, g);
    }, d = () => {
      e.value.offsetWidth === 0 && e.value.offsetHeight === 0 || (n.nodeProps.el.offsetWidth !== e.value.offsetWidth || n.nodeProps.el.offsetHeight !== e.value.offsetHeight) && (t == null || t.value.updateNodeOffsetSize(
        n.nodeProps,
        e.value.offsetWidth,
        e.value.offsetHeight
      ));
    }, m = (g) => {
      t == null || t.value.onNodeDragStart(n.nodeProps, g);
    }, y = (g) => {
      t == null || t.value.onNodeClick(n.nodeProps, g);
    }, v = (g) => le.isAllowShowNode(g);
    return we(() => {
      d();
    }), ct(() => {
      d();
    }), Ye(() => {
      e.value.remove();
    }), (g, M) => ht((L(), k("div", {
      ref_key: "seeksRGNode$",
      ref: e,
      style: j({
        left: i.nodeProps.x + "px",
        top: i.nodeProps.y + "px",
        opacity: i.nodeProps.opacity > 1 ? i.nodeProps.opacity / 100 : i.nodeProps.opacity
      }),
      class: U(["rel-node-peel", [i.nodeProps.selected && "rel-node-selected", i.nodeProps.dragging && "rel-node-dragging", i.nodeProps.id === p(s).checkedNodeId && "rel-node-peel-checked", i.nodeProps.className]]),
      "data-id": i.nodeProps.id
    }, [
      p(r) ? G(g.$slots, "node-expand-holder", {
        key: 0,
        nodeProps: i.nodeProps,
        expandButtonClass: p(h),
        expandOrCollapseNode: f,
        expandHolderPosition: i.nodeProps.expandHolderPosition || p(s).defaultExpandHolderPosition,
        color: p(s).defaultExpandHolderColor || i.nodeProps.color || p(s).defaultNodeColor
      }, () => [
        fe(Jt, {
          nodeProps: i.nodeProps,
          expandButtonClass: p(h),
          expandOrCollapseNode: f,
          expandHolderPosition: i.nodeProps.expandHolderPosition || p(s).defaultExpandHolderPosition,
          color: p(s).defaultExpandHolderColor || i.nodeProps.color || p(s).defaultNodeColor
        }, null, 8, ["nodeProps", "expandButtonClass", "expandHolderPosition", "color"])
      ]) : T("", !0),
      i.nodeProps.html ? (L(), k("div", {
        key: 1,
        innerHTML: i.nodeProps.html,
        onClick: M[0] || (M[0] = (N) => y(N)),
        onMousedown: M[1] || (M[1] = ae((N) => m(N), ["left", "stop"])),
        onTouchstart: M[2] || (M[2] = ae((N) => m(N), ["stop"]))
      }, null, 40, Kt)) : (L(), k("div", {
        key: 2,
        class: U([["rel-node-shape-" + (i.nodeProps.nodeShape === void 0 ? p(s).defaultNodeShape : i.nodeProps.nodeShape), "rel-node-type-" + i.nodeProps.type, i.nodeProps.id === p(s).checkedNodeId ? "rel-node-checked" : "", i.nodeProps.flashing ? "rel-node-flashing" : "", i.nodeProps.styleClass, i.nodeProps.innerHTML ? "rel-diy-node" : ""], "rel-node"]),
        style: j({ "background-color": i.nodeProps.color === void 0 ? p(s).defaultNodeColor : i.nodeProps.color, color: i.nodeProps.fontColor === void 0 ? p(s).defaultNodeFontColor : i.nodeProps.fontColor, border: p(a), width: p(c), height: p(l) }),
        onClick: M[3] || (M[3] = (N) => y(N)),
        onMousedown: M[4] || (M[4] = ae((N) => m(N), ["left", "stop"])),
        onTouchstart: M[5] || (M[5] = ae((N) => m(N), ["stop"]))
      }, [
        p(s).hideNodeContentByZoom === !0 && p(s).canvasZoom < 40 ? T("", !0) : G(g.$slots, "node", {
          key: 0,
          node: i.nodeProps
        }, () => [
          i.nodeProps.innerHTML ? (L(), k("div", {
            key: 1,
            innerHTML: i.nodeProps.innerHTML
          }, null, 8, eo)) : (L(), k("div", {
            key: 0,
            style: j({ color: i.nodeProps.fontColor || p(s).defaultNodeFontColor }),
            class: "c-node-text"
          }, [
            C("span", {
              innerHTML: i.nodeProps.text
            }, null, 8, Qt)
          ], 4))
        ])
      ], 38))
    ], 14, qt)), [
      [dt, v(i.nodeProps)]
    ]);
  }
}), to = ["xlink:href"], oo = ["transform"], no = ["xlink:href", "startOffset", "text-anchor"], io = /* @__PURE__ */ J({
  __name: "RGLineTextByPath",
  props: {
    link: null,
    relation: null,
    relationIndex: null
  },
  setup(i) {
    const n = i, e = W(ie), t = W(Q), o = B(() => t.options), s = B(() => n.relation.id === (e == null ? void 0 : e.value.options.checkedLineId)), a = B(() => {
      const f = n.relation.textOffset_x || o.value.defaultLineTextOffset_x || 0, d = n.relation.textOffset_y || o.value.defaultLineTextOffset_y || -8;
      return `translate(${f},${d})`;
    }), c = B(() => "#" + o.value.instanceId + "-" + n.link.seeks_id + "-" + n.relationIndex), l = B(() => n.relation.lineShape === 4 || o.value.defaultLineShape === 4 ? "start" : "middle"), r = B(() => {
      if (n.relation.lineShape === 4 || o.value.defaultLineShape === 4)
        if (o.value.layoutDirection === "v") {
          const f = n.link.fromNode.x, d = n.link.toNode.x;
          return Math.abs(d - f) + 43;
        } else {
          const f = n.link.fromNode.y, d = n.link.toNode.y;
          return Math.abs(d - f) + 43;
        }
      return "50%";
    }), h = (f, d) => {
      e == null || e.value.onLineClick(f, n.link, d);
    };
    return (f, d) => (L(), k("g", null, [
      C("use", {
        "xlink:href": p(c),
        class: U(["c-rg-line", [
          i.relation.styleClass,
          i.relation.dashType ? "rg-line-dashtype-" + i.relation.dashType : void 0,
          i.relation.animation ? "rg-line-anm-" + i.relation.animation : void 0,
          p(s) ? "c-rg-line-checked" : void 0
        ]]),
        onTouchstart: d[0] || (d[0] = (m) => h(i.relation, m)),
        onClick: d[1] || (d[1] = (m) => h(i.relation, m))
      }, null, 42, to),
      C("g", { transform: p(a) }, [
        C("text", {
          class: U(["c-rg-line-text", { "c-rg-line-text-checked": p(s) }]),
          style: j({
            opacity: i.relation.opacity,
            fill: i.relation.fontColor ? i.relation.fontColor : p(o).defaultLineFontColor ? p(o).defaultLineFontColor : i.relation.color ? i.relation.color : p(o).defaultLineColor
          }),
          onTouchstart: d[2] || (d[2] = (m) => h(i.relation, m)),
          onClick: d[3] || (d[3] = (m) => h(i.relation, m))
        }, [
          C("textPath", {
            "xlink:href": p(c),
            startOffset: p(r),
            "text-anchor": p(l),
            method: "align",
            spacing: "auto"
          }, xe(i.relation.text), 9, no)
        ], 38)
      ], 8, oo)
    ]));
  }
}), so = ["d", "stroke", "marker-start", "marker-end"], ao = ["transform"], lo = ["x", "y"], De = /* @__PURE__ */ J({
  __name: "RGLineSmart",
  props: {
    link: null,
    relation: null,
    relationIndex: null
  },
  setup(i) {
    const n = i, e = W(ie), t = W(Q), o = B(() => t.options), s = B(() => n.relation.id === o.value.checkedLineId), a = B(() => n.relation.showStartArrow && (e == null ? void 0 : e.value.getArrow(n.relation, n.link, !0))), c = B(() => n.relation.showEndArrow && (e == null ? void 0 : e.value.getArrow(n.relation, n.link, !1))), l = B(() => {
      try {
        const { path: h, textPosition: f } = e == null ? void 0 : e.value.createLinePath(
          n.link,
          n.relation,
          n.relationIndex
        );
        let d = {};
        try {
          d = e == null ? void 0 : e.value.getTextTransform(
            n.relation,
            f.x,
            f.y,
            f.rotate
          );
        } catch (m) {
          u(m);
        }
        return {
          path: h,
          textTransform: d
        };
      } catch (h) {
        u(h);
      }
      return { path: null, textTransform: null };
    }), r = (h, f) => {
      e == null || e.value.onLineClick(h, n.link, f);
    };
    return (h, f) => (L(), k("g", null, [
      C("path", {
        d: p(l).path,
        class: U(["c-rg-line", [
          i.relation.styleClass,
          i.relation.dashType ? "rg-line-dashtype-" + i.relation.dashType : void 0,
          i.relation.animation ? "rg-line-anm-" + i.relation.animation : void 0,
          p(s) ? "c-rg-line-checked" : void 0
        ]]),
        stroke: i.relation.color ? i.relation.color : p(o).defaultLineColor,
        style: j({
          opacity: i.relation.opacity,
          "stroke-width": (i.relation.lineWidth ? i.relation.lineWidth : p(o).defaultLineWidth) + "px"
        }),
        "marker-start": p(a),
        "marker-end": p(c),
        fill: "none",
        onTouchstart: f[0] || (f[0] = (d) => r(i.relation, d)),
        onClick: f[1] || (f[1] = (d) => r(i.relation, d))
      }, null, 46, so),
      p(o).defaultShowLineLabel && p(o).canvasZoom > 40 ? (L(), k("g", {
        key: 0,
        transform: p(l).textTransform
      }, [
        (L(), k("text", {
          key: "t-" + i.relation.seeks_id,
          x: i.relation.textOffset_x || p(o).defaultLineTextOffset_x || 0,
          y: i.relation.textOffset_y || p(o).defaultLineTextOffset_y || 10,
          style: j({
            opacity: i.relation.opacity,
            fill: i.relation.fontColor ? i.relation.fontColor : p(o).defaultLineFontColor ? p(o).defaultLineFontColor : i.relation.color ? i.relation.color : p(o).defaultLineColor
          }),
          "text-anchor": "middle",
          class: U(["c-rg-line-text", { "c-rg-line-text-checked": p(s) }]),
          onTouchstart: f[2] || (f[2] = (d) => r(i.relation, d)),
          onClick: f[3] || (f[3] = (d) => r(i.relation, d))
        }, xe(i.relation.text), 47, lo))
      ], 8, ao)) : T("", !0)
    ]));
  }
}), ro = ["data-id"], co = /* @__PURE__ */ J({
  __name: "RGLink",
  props: {
    linkProps: null
  },
  setup(i) {
    W(ie);
    const n = W(Q), e = B(() => n.options), t = (o) => le.isAllowShowNode(o);
    return (o, s) => i.linkProps.isHide !== !0 && t(i.linkProps.fromNode) && t(i.linkProps.toNode) ? (L(), k("g", {
      key: 0,
      class: U([[p(e).checkedLinkId == i.linkProps.seeks_id ? "c-rg-link-checked" : ""], "rel-link-peel"]),
      ref: "seeksRGLink",
      transform: "translate(0,0)",
      "data-id": i.linkProps.seeks_id
    }, [
      (L(!0), k(oe, null, he(i.linkProps.relations, (a, c) => G(o.$slots, "line", {
        line: a,
        relationIndex: c
      }, () => [
        (p(e).lineUseTextPath || a.useTextPath) && a.isHide === !1 ? (L(), re(io, {
          key: "l-" + a.id,
          link: i.linkProps,
          relation: a,
          "relation-index": c
        }, null, 8, ["link", "relation", "relation-index"])) : a.isHide === !1 ? (L(), re(De, {
          key: "l-" + a.id,
          link: i.linkProps,
          relation: a,
          "relation-index": c
        }, null, 8, ["link", "relation", "relation-index"])) : T("", !0)
      ])), 256))
    ], 10, ro)) : T("", !0);
  }
}), ho = ["id", "d", "stroke", "marker-start", "marker-end"], fo = /* @__PURE__ */ J({
  __name: "RGLinePath",
  props: {
    link: null,
    relation: null,
    relationIndex: null
  },
  setup(i) {
    const n = i, e = W(ie), t = W(Q), o = B(() => t.options), s = B(() => n.relation.id === o.value.checkedLineId), a = B(() => {
      const { path: c, textPosition: l } = e == null ? void 0 : e.value.createLinePath(
        n.link,
        n.relation,
        n.relationIndex
      );
      return c;
    });
    return (c, l) => (L(), k("path", {
      id: p(o).instanceId + "-" + i.link.seeks_id + "-" + i.relationIndex,
      d: p(a),
      stroke: i.relation.color ? i.relation.color : p(o).defaultLineColor,
      style: j({ opacity: i.relation.opacity, "stroke-width": (i.relation.lineWidth ? i.relation.lineWidth : p(o).defaultLineWidth) + "px" }),
      "marker-start": i.relation.showStartArrow && c.relationGraph.getArrow(i.relation, i.link, !0),
      "marker-end": i.relation.showEndArrow && c.relationGraph.getArrow(i.relation, i.link, !1),
      class: U(["c-rg-line-path", i.relation.styleClass, p(s) ? "c-rg-line-checked" : ""]),
      fill: "none"
    }, null, 14, ho));
  }
}), uo = ["d", "stroke-width"], po = /* @__PURE__ */ J({
  __name: "RGLineChecked",
  setup(i) {
    const n = W(ie), e = W(Q);
    B(() => e.options);
    const t = B(() => n == null ? void 0 : n.value.createCheckedLinePath()), o = B(() => n == null ? void 0 : n.value.createCheckedLineStrokeWidth());
    return (s, a) => (L(), k("g", null, [
      p(t) ? (L(), k("path", {
        key: 0,
        d: p(t),
        fill: "none",
        stroke: "red",
        "stroke-width": p(o),
        class: "c-rg-line-checked-bg"
      }, null, 8, uo)) : T("", !0)
    ]));
  }
}), yo = {
  class: "rel-single-graph",
  style: { overflow: "visible" }
}, mo = /* @__PURE__ */ C("linearGradient", {
  id: "my-lineStyle",
  gradientUnits: "objectBoundingBox",
  cx: "0.5",
  cy: "0.5"
}, [
  /* @__PURE__ */ C("stop", {
    offset: "0%",
    "stop-color": "#e52c5c",
    "stop-opacity": "1"
  }),
  /* @__PURE__ */ C("stop", {
    offset: "100%",
    "stop-color": "#FD8B37",
    "stop-opacity": "0"
  })
], -1), go = ["id", "markerWidth", "markerHeight", "refX", "refY"], vo = ["d"], _o = ["id", "markerWidth", "markerHeight", "refX", "refY"], xo = ["d"], Lo = ["id", "markerWidth", "markerHeight", "refX", "refY"], wo = ["d"], Co = ["id", "markerWidth", "markerHeight", "refX", "refY"], ko = ["d"], bo = ["id", "markerWidth", "markerHeight", "refX", "refY"], Mo = ["fill", "d"], So = ["id", "markerWidth", "markerHeight", "refX", "refY"], Eo = ["fill", "d"], Oo = { class: "rel-nodediv rel-nodediv-for-webkit" }, No = { class: "rel-linediv rel-linediv-el-lines" }, zo = {
  class: "rel-lines-svg rel-lines-svg-el-lines",
  xmlns: "http://www.w3.org/2000/svg"
}, Po = /* @__PURE__ */ J({
  __name: "RGGraph",
  setup(i) {
    const n = pe(), e = W(Ue), t = W(Q), o = B(() => t.options), s = B(() => t.allLineColors), a = () => {
      n.value.style.setProperty(
        "--stroke",
        `url('#${o.value.instanceId}-lineStyle')`
      ), n.value.style.setProperty(
        "--markerEnd",
        `url('#${o.value.instanceId}-start-arrow-default')`
      ), n.value.style.setProperty(
        "--markerStart",
        `url('#${o.value.instanceId}-arrow-default')`
      ), n.value.style.setProperty(
        "--markerEndChecked",
        `url('#${o.value.instanceId}-arrow-checked')`
      ), n.value.style.setProperty(
        "--markerStartChecked",
        `url('#${o.value.instanceId}-start-arrow-checked')`
      );
    };
    return we(() => {
      u("[RGCanvas mounted]"), a();
    }), (c, l) => (L(), k("div", yo, [
      C("div", {
        ref_key: "rgCanvas$",
        ref: n,
        class: "rel-linediv",
        style: { overflow: "visible" }
      }, [
        (L(), k("svg", {
          class: "rel-lines-svg",
          style: j({ width: p(o).canvasSize.width + "px", height: p(o).canvasSize.height + "px" }),
          xmlns: "http://www.w3.org/2000/svg"
        }, [
          C("defs", null, [
            mo,
            C("marker", {
              id: p(o).instanceId + "-arrow-default",
              markerWidth: p(o).defaultLineMarker.markerWidth,
              markerHeight: p(o).defaultLineMarker.markerHeight,
              refX: p(o).defaultLineMarker.refX,
              refY: p(o).defaultLineMarker.refY,
              "marker-units": "strokeWidth",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              C("path", {
                style: j({ fill: p(o).defaultLineColor }),
                d: p(o).defaultLineMarker.data
              }, null, 12, vo)
            ], 8, go),
            C("marker", {
              id: p(o).instanceId + "-start-arrow-default",
              markerWidth: p(o).defaultLineMarker.markerWidth,
              markerHeight: p(o).defaultLineMarker.markerHeight,
              refX: p(o).defaultLineMarker.refX,
              refY: p(o).defaultLineMarker.refY,
              "marker-units": "strokeWidth",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              C("path", {
                style: j({ fill: p(o).defaultLineColor }),
                d: p(o).defaultLineMarker.data,
                transform: "translate(12,12)rotate(180)"
              }, null, 12, xo)
            ], 8, _o),
            C("marker", {
              id: p(o).instanceId + "-arrow-checked",
              markerWidth: p(o).defaultLineMarker.markerWidth,
              markerHeight: p(o).defaultLineMarker.markerHeight,
              refX: p(o).defaultLineMarker.refX,
              refY: p(o).defaultLineMarker.refY,
              "marker-units": "strokeWidth",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              C("path", {
                style: j({ fill: p(o).checkedLineColor }),
                d: p(o).defaultLineMarker.data
              }, null, 12, wo)
            ], 8, Lo),
            C("marker", {
              id: p(o).instanceId + "-start-arrow-checked",
              markerWidth: p(o).defaultLineMarker.markerWidth,
              markerHeight: p(o).defaultLineMarker.markerHeight,
              refX: p(o).defaultLineMarker.refX,
              refY: p(o).defaultLineMarker.refY,
              "marker-units": "strokeWidth",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              C("path", {
                style: j({ fill: p(o).checkedLineColor }),
                d: p(o).defaultLineMarker.data,
                transform: "translate(12,12)rotate(180)"
              }, null, 12, ko)
            ], 8, Co),
            (L(!0), k(oe, null, he(p(s), (r) => (L(), k("marker", {
              id: p(o).instanceId + "-arrow-" + r.id,
              key: r.id,
              markerWidth: p(o).defaultLineMarker.markerWidth,
              markerHeight: p(o).defaultLineMarker.markerHeight,
              refX: p(o).defaultLineMarker.refX,
              refY: p(o).defaultLineMarker.refY,
              "marker-units": "strokeWidth",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              C("path", {
                fill: p(o).defaultLineMarker.color || r.color,
                d: p(o).defaultLineMarker.data
              }, null, 8, Mo)
            ], 8, bo))), 128)),
            (L(!0), k(oe, null, he(p(s), (r) => (L(), k("marker", {
              id: p(o).instanceId + "-start-arrow-" + r.id,
              key: "start-" + r.id,
              markerWidth: p(o).defaultLineMarker.markerWidth,
              markerHeight: p(o).defaultLineMarker.markerHeight,
              refX: p(o).defaultLineMarker.refX,
              refY: p(o).defaultLineMarker.refY,
              "marker-units": "strokeWidth",
              orient: "auto",
              viewBox: "0 0 12 12"
            }, [
              C("path", {
                fill: p(o).defaultLineMarker.color || r.color,
                d: p(o).defaultLineMarker.data,
                transform: "translate(12,12)rotate(180)"
              }, null, 8, Eo)
            ], 8, So))), 128)),
            (L(!0), k(oe, null, he(p(e).links, (r) => (L(), k(oe, null, [
              (L(!0), k(oe, null, he(r.relations, (h, f) => (L(), k(oe, null, [
                p(o).lineUseTextPath || h.useTextPath ? (L(), re(fo, {
                  key: h.id,
                  link: r,
                  relation: h,
                  "relation-index": f
                }, null, 8, ["link", "relation", "relation-index"])) : T("", !0)
              ], 64))), 256))
            ], 64))), 256))
          ]),
          fe(po),
          (L(!0), k(oe, null, he(p(e).links, (r) => (L(), re(co, {
            key: r.seeks_id,
            "link-props": r
          }, {
            line: K(({ line: h }) => [
              G(c.$slots, "line", {
                line: h,
                link: r
              })
            ]),
            _: 2
          }, 1032, ["link-props"]))), 128)),
          p(o).creatingLinePlot && p(o).newLinkTemplate.fromNode ? (L(), re(De, {
            key: "s-line-template",
            link: p(o).newLinkTemplate,
            relation: p(o).newLineTemplate,
            "relation-index": 0
          }, null, 8, ["link", "relation"])) : T("", !0)
        ], 4))
      ], 512),
      C("div", Oo, [
        (L(!0), k(oe, null, he(p(e).nodes, (r) => (L(), re(tt, {
          key: r.seeks_id,
          "node-props": r
        }, {
          node: K(({ node: h }) => [
            G(c.$slots, "node", { node: h })
          ]),
          "node-expand-holder": K(({ nodeProps: h, expandHolderPosition: f, expandButtonClass: d, color: m, expandOrCollapseNode: y }) => [
            G(c.$slots, "node-expand-holder", {
              nodeProps: h,
              expandHolderPosition: f,
              expandButtonClass: d,
              color: m,
              expandOrCollapseNode: y
            })
          ]),
          _: 2
        }, 1032, ["node-props"]))), 128))
      ]),
      C("div", No, [
        (L(), k("svg", zo, [
          (L(!0), k(oe, null, he(p(e).elementLines, (r) => (L(), k(oe, null, [
            r.relations[0].isHide === !1 ? (L(), re(De, {
              key: "ell-" + r.relations[0].id,
              link: r,
              relation: r.relations[0],
              "relation-index": 0
            }, null, 8, ["link", "relation"])) : T("", !0)
          ], 64))), 256))
        ]))
      ])
    ]));
  }
}), Bo = ["onWheel"], Ao = { class: "rel-canvas-slot rel-canvas-slot-behind" }, Do = { class: "rel-canvas-slot rel-canvas-slot-above" }, To = /* @__PURE__ */ J({
  __name: "RGCanvas",
  setup(i) {
    const n = pe(), e = W(ie), t = W(Q), o = B(() => t.options), s = (r) => {
      e == null || e.value.onMouseWheel(r);
    }, a = (r) => {
      e == null || e.value.onCanvasDragStart(r);
    }, c = (r) => {
      e == null || e.value.onContextmenu(r);
    }, l = B(() => ({
      width: `${o.value.canvasSize.width}px`,
      height: `${o.value.canvasSize.height}px`,
      "margin-left": `${o.value.canvasOffset.x}px`,
      "margin-top": `${o.value.canvasOffset.y}px`,
      "background-color": "transparent",
      transform: `scale(${o.value.canvasZoom / 100},${o.value.canvasZoom / 100})`
    }));
    return we(() => {
      u("[RGCanvas mounted]"), e == null || e.value.setCanvasDom(n.value);
    }), (r, h) => (L(), k("div", {
      style: j({ width: "100%", height: "100%", "background-color": p(o).backgroundColor || void 0, "background-image": p(o).backgroundImage ? "url(" + p(o).backgroundImage + ")" : void 0 }),
      class: U([[p(o).layoutClassName, p(o).backgroundImageNoRepeat ? "rel-map-background-norepeat" : ""], "rel-map"]),
      onContextmenu: h[0] || (h[0] = ae((f) => c(f), ["prevent"])),
      onMousedown: h[1] || (h[1] = ae((f) => a(f), ["left", "stop"])),
      onTouchstart: h[2] || (h[2] = ae((f) => a(f), ["stop"])),
      onWheel: ae(s, ["stop"])
    }, [
      C("div", {
        ref_key: "seeksRGCanvas",
        ref: n,
        style: j(p(l)),
        class: "rel-map-canvas"
      }, [
        C("div", Ao, [
          G(r.$slots, "canvas-plug")
        ]),
        fe(Po, null, {
          node: K(({ node: f }) => [
            G(r.$slots, "node", { node: f })
          ]),
          line: K(({ line: f, link: d }) => [
            G(r.$slots, "line", {
              line: f,
              link: d
            })
          ]),
          "node-expand-holder": K(({ nodeProps: f, expandHolderPosition: d, expandButtonClass: m, color: y, expandOrCollapseNode: v }) => [
            G(r.$slots, "node-expand-holder", {
              nodeProps: f,
              expandHolderPosition: d,
              expandButtonClass: m,
              color: y,
              expandOrCollapseNode: v
            })
          ]),
          _: 3
        }),
        C("div", Do, [
          G(r.$slots, "canvas-plug-above")
        ])
      ], 4)
    ], 46, Bo));
  }
}), $o = { class: "c-debug-tools-row" }, Wo = /* @__PURE__ */ J({
  __name: "GraphDebugPanel",
  setup(i) {
    const n = W(ie), e = W(Q), t = B(() => e.options), o = pe(!1), s = () => {
      o.value = !o.value;
    }, a = () => {
      n == null || n.value.printOptions();
    }, c = () => {
      n == null || n.value.printData();
    }, l = () => {
      n == null || n.value.enableDebugLog(!t.value.debug), u("debugLog:", n == null ? void 0 : n.value.options.debug);
    };
    return (r, h) => (L(), k("div", null, [
      C("div", {
        class: U([[], "c-setting-panel-button"]),
        onClick: s
      }, " Debug "),
      o.value ? (L(), k("div", {
        key: 0,
        class: U([[], "c-setting-panel"])
      }, [
        C("div", { class: "c-debug-tools-row" }, [
          C("button", { onClick: a }, "print options in console")
        ]),
        C("div", { class: "c-debug-tools-row" }, [
          C("button", { onClick: c }, "print json data in console")
        ]),
        C("div", $o, [
          Xe("debug log status: " + xe(p(t).debug), 1),
          C("button", { onClick: l }, xe(p(t).debug ? "disable" : "enable") + " debug log", 1)
        ])
      ])) : T("", !0)
    ]));
  }
}), Ho = {
  ref: "miniView",
  class: "c-mini-graph"
}, Io = /* @__PURE__ */ J({
  __name: "GraphMiniView",
  setup(i) {
    return pe(100), pe(0), (n, e) => (L(), k("div", Ho, null, 512));
  }
}), Fo = /* @__PURE__ */ C("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ C("use", { "xlink:href": "#icon-resize-" })
], -1), Ro = [
  Fo
], Go = /* @__PURE__ */ C("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ C("use", { "xlink:href": "#icon-fangda" })
], -1), Vo = [
  Go
], Yo = /* @__PURE__ */ C("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ C("use", { "xlink:href": "#icon-suoxiao" })
], -1), Xo = [
  Yo
], jo = ["title"], Uo = {
  key: 0,
  class: "rg-icon",
  "aria-hidden": "true"
}, Zo = /* @__PURE__ */ C("use", { "xlink:href": "#icon-zidong" }, null, -1), Jo = [
  Zo
], qo = {
  key: 1,
  class: "c-loading-icon rg-icon",
  "aria-hidden": "true"
}, Ko = /* @__PURE__ */ C("use", { "xlink:href": "#icon-lianjiezhong" }, null, -1), Qo = [
  Ko
], en = /* @__PURE__ */ C("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ C("use", { "xlink:href": "#icon-ico_reset" })
], -1), tn = [
  en
], on = /* @__PURE__ */ C("svg", {
  class: "rg-icon",
  "aria-hidden": "true"
}, [
  /* @__PURE__ */ C("use", { "xlink:href": "#icon-tupian" })
], -1), nn = [
  on
], sn = /* @__PURE__ */ C("div", { style: { clear: "both" } }, null, -1), an = /* @__PURE__ */ J({
  __name: "GraphMiniToolBar",
  setup(i) {
    const n = W(ie), e = W(Q), t = B(() => e.options);
    we(() => {
    });
    const o = () => {
      n == null || n.value.refresh();
    }, s = () => {
      n == null || n.value.toggleAutoLayout();
    }, a = () => {
      n == null || n.value.downloadAsImage("png");
    }, c = async () => {
      const h = n == null ? void 0 : n.value;
      await h.setZoom(100), await h.moveToCenter(), await h.zoomToFit();
    }, l = (h) => {
      n == null || n.value.zoom(h);
    }, r = () => {
      n == null || n.value.fullscreen();
    };
    return (h, f) => (L(), k("div", {
      class: U(["rel-toolbar", ["rel-toolbar-h-" + p(t).toolBarPositionH, "rel-toolbar-v-" + p(t).toolBarPositionV, "rel-toolbar-" + p(t).toolBarDirection]])
    }, [
      p(t).allowShowFullscreenMenu ? (L(), k("div", {
        key: 0,
        title: "\u5168\u5C4F/\u9000\u51FA\u5168\u5C4F",
        class: "c-mb-button",
        style: { "margin-top": "0px" },
        onClick: f[0] || (f[0] = (d) => r())
      }, Ro)) : T("", !0),
      p(t).allowShowZoomMenu ? (L(), k("div", {
        key: 1,
        title: "\u653E\u5927",
        class: "c-mb-button",
        onClick: f[1] || (f[1] = (d) => l(20))
      }, Vo)) : T("", !0),
      p(t).allowShowZoomMenu ? (L(), k("div", {
        key: 2,
        class: "c-current-zoom",
        onDblclick: c
      }, xe(p(t).canvasZoom) + "%", 33)) : T("", !0),
      p(t).allowShowZoomMenu ? (L(), k("div", {
        key: 3,
        title: "\u7F29\u5C0F",
        class: "c-mb-button",
        style: { "margin-top": "0px" },
        onClick: f[2] || (f[2] = (d) => l(-20))
      }, Xo)) : T("", !0),
      p(t).allowAutoLayoutIfSupport && p(t).isNeedShowAutoLayoutButton ? (L(), k("div", {
        key: 4,
        title: p(t).autoLayouting ? "\u70B9\u51FB\u505C\u6B62\u81EA\u52A8\u5E03\u5C40" : "\u70B9\u51FB\u5F00\u59CB\u81EA\u52A8\u8C03\u6574\u5E03\u5C40",
        class: U([{ "c-mb-button-on": p(t).autoLayouting }, "c-mb-button"]),
        onClick: s
      }, [
        p(t).autoLayouting ? (L(), k("svg", qo, Qo)) : (L(), k("svg", Uo, Jo))
      ], 10, jo)) : T("", !0),
      p(t).allowShowRefreshButton ? (L(), k("div", {
        key: 5,
        title: "\u5237\u65B0",
        class: "c-mb-button",
        onClick: o
      }, tn)) : T("", !0),
      p(t).allowShowDownloadButton ? (L(), k("div", {
        key: 6,
        title: "\u4E0B\u8F7D\u56FE\u7247",
        class: "c-mb-button",
        onClick: a
      }, nn)) : T("", !0),
      sn
    ], 2));
  }
}), ln = {
  key: 0,
  class: "rel-operate"
}, rn = { style: { position: "relative" } }, cn = /* @__PURE__ */ J({
  __name: "GraphOperateStuff",
  setup(i) {
    const n = W(Q), e = B(() => n.options);
    return (t, o) => p(e) && (p(e).creatingNodePlot || p(e).creatingSelection) ? (L(), k("div", ln, [
      C("div", rn, [
        p(e).creatingNodePlot && p(e).showTemplateNode ? (L(), re(tt, {
          key: 0,
          "node-props": p(e).newNodeTemplate
        }, {
          node: K(() => [
            G(t.$slots, "node-template", {
              node: p(e).newNodeTemplate
            })
          ]),
          _: 3
        }, 8, ["node-props"])) : T("", !0),
        p(e).creatingSelection ? (L(), k("div", {
          key: 1,
          class: "rel-selection",
          style: j({
            left: p(e).selectionView.x + "px",
            top: p(e).selectionView.y + "px",
            width: p(e).selectionView.width + "px",
            height: p(e).selectionView.height + "px"
          })
        }, null, 4)) : T("", !0)
      ])
    ])) : T("", !0);
  }
}), hn = /* @__PURE__ */ C("div", { class: "rel-graph-loading-message" }, [
  /* @__PURE__ */ C("svg", {
    class: "c-graph-loading-icon",
    "aria-hidden": "true"
  }, [
    /* @__PURE__ */ C("use", { "xlink:href": "#icon-lianjiezhong" })
  ]),
  /* @__PURE__ */ Xe(" Loading... ")
], -1), dn = [
  hn
], fn = /* @__PURE__ */ J({
  __name: "GraphLoading",
  setup(i) {
    const n = W(ie), e = W(Q), t = B(() => e.options), o = (s) => {
      n == null || n.value.clickGraphMask(s);
    };
    return (s, a) => (L(), k("div", {
      class: U(["rel-graph-loading", { "rel-graph-loading-hide": !p(t).graphLoading }]),
      onClick: o
    }, dn, 2));
  }
}), be = /* @__PURE__ */ J({
  __name: "index",
  props: {
    options: null,
    relationGraphCore: null,
    onNodeClick: { type: Function },
    onNodeExpand: { type: Function },
    onNodeCollapse: { type: Function },
    onLineClick: { type: Function },
    onImageDownload: { type: Function },
    onImageSaveAsFile: { type: Function },
    beforeChangeLayout: { type: Function },
    onNodeDragEnd: { type: Function },
    onNodeDragging: { type: Function },
    onCanvasDragEnd: { type: Function },
    onContextmenu: { type: Function },
    onCanvasClick: { type: Function },
    onCanvasSelectionEnd: { type: Function }
  },
  emits: [
    "on-node-click",
    "on-node-expand",
    "on-node-collapse",
    "on-line-click",
    "on-download-excel",
    "on-image-download",
    "on-image-save-as-file"
  ],
  setup(i, { expose: n }) {
    const e = i;
    u("appendIconSvg:", mt);
    const t = pe(), o = pe(), s = Fe({
      rootNode: void 0,
      nodes: [],
      links: [],
      elementLines: []
    }), a = Fe({
      options: void 0,
      allLineColors: []
    });
    Ne(ie, o), Ne(Ue, s), Ne(Q, a), u("---------------------------graph mounted---------------------------"), we(() => {
      _t("vue3"), u("---------------------------graph mounted---------------------------");
      const l = e.relationGraphCore ? new e.relationGraphCore(e.options, Re(e)) : new et(e.options, Re(e));
      l.setReactiveDataVue3(s, a), l.setDom(t.value), l.ready(), o.value = l, de && de.on && de.on("change", c);
    }), Ye(() => {
      de && de.off && de.off("change", c);
    });
    const c = () => {
      o.value.fullscreen(de.isFullscreen);
    };
    return n({
      onFullscreen() {
        c();
      },
      getInstance() {
        return o.value;
      },
      async setOptions(l, r = !1) {
        await o.value.setOptions(l, r);
      },
      async setJsonData(l, r, h) {
        arguments.length === 2 && typeof r == "function" && (h = r, r = !0), await o.value.setJsonData(l, !0), await o.value.refresh(!1), h && h(o.value);
      },
      async appendJsonData(l, r, h) {
        arguments.length === 2 && typeof r == "function" && (h = r, r = !0), await o.value.appendJsonData(l, !0), h && h(o.value);
      },
      setLayouter(l) {
        o.value.setLayouter(l);
      },
      onGraphResize() {
        o.value.refreshNVAnalysisInfo();
      },
      refresh() {
        o.value.refresh();
      },
      focusRootNode() {
        o.value.focusRootNode();
      },
      focusNodeById(l) {
        return o.value.focusNodeById(l);
      },
      getNodeById(l) {
        return o.value.getNodeById(l);
      },
      removeNodeById(l) {
        return o.value.removeNodeById(l);
      },
      getNodes() {
        return o.value.getNodes();
      },
      getLinks() {
        return o.value.getLinks();
      },
      getGraphJsonData() {
        return o.value.getGraphJsonData();
      },
      getGraphJsonOptions() {
        return o.value.getGraphJsonOptions();
      }
    }), (l, r) => (L(), k("div", {
      ref_key: "seeksRelationGraph$",
      ref: t,
      class: "relation-graph",
      style: { width: "100%", height: "100%" }
    }, [
      o.value && a.options ? (L(), k(oe, { key: 0 }, [
        a.options.showDebugPanel ? (L(), re(Wo, { key: 0 })) : T("", !0),
        a.options.allowShowMiniToolBar === !0 ? G(l.$slots, "tool-bar", { key: 1 }, () => [
          fe(an)
        ]) : T("", !0),
        a.options.allowShowMiniView === !0 ? G(l.$slots, "mini-view", { key: 2 }, () => [
          fe(Io)
        ]) : T("", !0),
        G(l.$slots, "graph-plug"),
        fe(To, null, {
          node: K(({ node: h }) => [
            G(l.$slots, "node", { node: h })
          ]),
          line: K(({ line: h, link: f }) => [
            G(l.$slots, "line", {
              line: h,
              link: f
            })
          ]),
          "canvas-plug": K(() => [
            G(l.$slots, "canvas-plug")
          ]),
          "canvas-plug-above": K(() => [
            G(l.$slots, "default")
          ]),
          "node-expand-holder": K(({ nodeProps: h, expandHolderPosition: f, expandButtonClass: d, color: m, expandOrCollapseNode: y }) => [
            G(l.$slots, "node-expand-holder", {
              nodeProps: h,
              expandHolderPosition: f,
              expandButtonClass: d,
              color: m,
              expandOrCollapseNode: y
            })
          ]),
          _: 3
        }),
        fe(cn, null, {
          "node-template": K(({ node: h }) => [
            G(l.$slots, "node-template", { node: h })
          ]),
          _: 3
        }),
        fe(fn)
      ], 64)) : T("", !0)
    ], 512));
  }
});
const vn = et, _n = {
  BaseLayouter: ke,
  BidirectionalTreeLayouter: Ze,
  CenterLayouter: qe,
  CircleLayouter: Ke,
  FixedLayouter: Qe,
  ForceLayouter: _e
}, xn = Tt, Ln = Ht, wn = bt, Cn = wt, kn = Je, bn = Mt, Mn = jt;
be.install = (i) => {
  i.component("RelationGraph", be), i.component("SeeksRelationGraph", be);
};
const Sn = be, En = je;
export {
  gn as INSTALLED_KEY,
  _n as Layout,
  Mn as RGEffectUtils,
  kn as RGGraphMath,
  xn as RGLayouterUtils,
  wn as RGLinkUtils,
  Cn as RGNodeUtils,
  bn as RGNodesAnalyticUtils,
  Ln as RGOptionsUtils,
  Sn as RelationGraph,
  vn as RelationGraphCore,
  be as default,
  Ue as graphDataKey,
  ie as graphInstanceKey,
  Q as graphKey,
  En as version
};
