{
  "version": 3,
  "sources": ["../../prismjs/components/prism-markup-templating.js"],
  "sourcesContent": ["(function (Prism) {\r\n\r\n\t/**\r\n\t * Returns the placeholder for the given language id and index.\r\n\t *\r\n\t * @param {string} language\r\n\t * @param {string|number} index\r\n\t * @returns {string}\r\n\t */\r\n\tfunction getPlaceholder(language, index) {\r\n\t\treturn '___' + language.toUpperCase() + index + '___';\r\n\t}\r\n\r\n\tObject.defineProperties(Prism.languages['markup-templating'] = {}, {\r\n\t\tbuildPlaceholders: {\r\n\t\t\t/**\r\n\t\t\t * Tokenize all inline templating expressions matching `placeholderPattern`.\r\n\t\t\t *\r\n\t\t\t * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\r\n\t\t\t * `true` will be replaced.\r\n\t\t\t *\r\n\t\t\t * @param {object} env The environment of the `before-tokenize` hook.\r\n\t\t\t * @param {string} language The language id.\r\n\t\t\t * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\r\n\t\t\t * @param {(match: string) => boolean} [replaceFilter]\r\n\t\t\t */\r\n\t\t\tvalue: function (env, language, placeholderPattern, replaceFilter) {\r\n\t\t\t\tif (env.language !== language) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tokenStack = env.tokenStack = [];\r\n\r\n\t\t\t\tenv.code = env.code.replace(placeholderPattern, function (match) {\r\n\t\t\t\t\tif (typeof replaceFilter === 'function' && !replaceFilter(match)) {\r\n\t\t\t\t\t\treturn match;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar i = tokenStack.length;\r\n\t\t\t\t\tvar placeholder;\r\n\r\n\t\t\t\t\t// Check for existing strings\r\n\t\t\t\t\twhile (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\r\n\t\t\t\t\t\t++i;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Create a sparse array\r\n\t\t\t\t\ttokenStack[i] = match;\r\n\r\n\t\t\t\t\treturn placeholder;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Switch the grammar to markup\r\n\t\t\t\tenv.grammar = Prism.languages.markup;\r\n\t\t\t}\r\n\t\t},\r\n\t\ttokenizePlaceholders: {\r\n\t\t\t/**\r\n\t\t\t * Replace placeholders with proper tokens after tokenizing.\r\n\t\t\t *\r\n\t\t\t * @param {object} env The environment of the `after-tokenize` hook.\r\n\t\t\t * @param {string} language The language id.\r\n\t\t\t */\r\n\t\t\tvalue: function (env, language) {\r\n\t\t\t\tif (env.language !== language || !env.tokenStack) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Switch the grammar back\r\n\t\t\t\tenv.grammar = Prism.languages[language];\r\n\r\n\t\t\t\tvar j = 0;\r\n\t\t\t\tvar keys = Object.keys(env.tokenStack);\r\n\r\n\t\t\t\tfunction walkTokens(tokens) {\r\n\t\t\t\t\tfor (var i = 0; i < tokens.length; i++) {\r\n\t\t\t\t\t\t// all placeholders are replaced already\r\n\t\t\t\t\t\tif (j >= keys.length) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar token = tokens[i];\r\n\t\t\t\t\t\tif (typeof token === 'string' || (token.content && typeof token.content === 'string')) {\r\n\t\t\t\t\t\t\tvar k = keys[j];\r\n\t\t\t\t\t\t\tvar t = env.tokenStack[k];\r\n\t\t\t\t\t\t\tvar s = typeof token === 'string' ? token : token.content;\r\n\t\t\t\t\t\t\tvar placeholder = getPlaceholder(language, k);\r\n\r\n\t\t\t\t\t\t\tvar index = s.indexOf(placeholder);\r\n\t\t\t\t\t\t\tif (index > -1) {\r\n\t\t\t\t\t\t\t\t++j;\r\n\r\n\t\t\t\t\t\t\t\tvar before = s.substring(0, index);\r\n\t\t\t\t\t\t\t\tvar middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\r\n\t\t\t\t\t\t\t\tvar after = s.substring(index + placeholder.length);\r\n\r\n\t\t\t\t\t\t\t\tvar replacement = [];\r\n\t\t\t\t\t\t\t\tif (before) {\r\n\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([before]));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treplacement.push(middle);\r\n\t\t\t\t\t\t\t\tif (after) {\r\n\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([after]));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (typeof token === 'string') {\r\n\t\t\t\t\t\t\t\t\ttokens.splice.apply(tokens, [i, 1].concat(replacement));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\ttoken.content = replacement;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (token.content /* && typeof token.content !== 'string' */) {\r\n\t\t\t\t\t\t\twalkTokens(token.content);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn tokens;\r\n\t\t\t\t}\r\n\r\n\t\t\t\twalkTokens(env.tokens);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n}(Prism));\r\n"],
  "mappings": ";CAAC,SAAUA,QAAO;AASjB,WAAS,eAAe,UAAU,OAAO;AACxC,WAAO,QAAQ,SAAS,YAAY,IAAI,QAAQ;AAAA,EACjD;AAEA,SAAO,iBAAiBA,OAAM,UAAU,mBAAmB,IAAI,CAAC,GAAG;AAAA,IAClE,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYlB,OAAO,SAAU,KAAK,UAAU,oBAAoB,eAAe;AAClE,YAAI,IAAI,aAAa,UAAU;AAC9B;AAAA,QACD;AAEA,YAAI,aAAa,IAAI,aAAa,CAAC;AAEnC,YAAI,OAAO,IAAI,KAAK,QAAQ,oBAAoB,SAAU,OAAO;AAChE,cAAI,OAAO,kBAAkB,cAAc,CAAC,cAAc,KAAK,GAAG;AACjE,mBAAO;AAAA,UACR;AACA,cAAI,IAAI,WAAW;AACnB,cAAI;AAGJ,iBAAO,IAAI,KAAK,QAAQ,cAAc,eAAe,UAAU,CAAC,CAAC,MAAM,IAAI;AAC1E,cAAE;AAAA,UACH;AAGA,qBAAW,CAAC,IAAI;AAEhB,iBAAO;AAAA,QACR,CAAC;AAGD,YAAI,UAAUA,OAAM,UAAU;AAAA,MAC/B;AAAA,IACD;AAAA,IACA,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOrB,OAAO,SAAU,KAAK,UAAU;AAC/B,YAAI,IAAI,aAAa,YAAY,CAAC,IAAI,YAAY;AACjD;AAAA,QACD;AAGA,YAAI,UAAUA,OAAM,UAAU,QAAQ;AAEtC,YAAI,IAAI;AACR,YAAI,OAAO,OAAO,KAAK,IAAI,UAAU;AAErC,iBAAS,WAAW,QAAQ;AAC3B,mBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAEvC,gBAAI,KAAK,KAAK,QAAQ;AACrB;AAAA,YACD;AAEA,gBAAI,QAAQ,OAAO,CAAC;AACpB,gBAAI,OAAO,UAAU,YAAa,MAAM,WAAW,OAAO,MAAM,YAAY,UAAW;AACtF,kBAAI,IAAI,KAAK,CAAC;AACd,kBAAI,IAAI,IAAI,WAAW,CAAC;AACxB,kBAAI,IAAI,OAAO,UAAU,WAAW,QAAQ,MAAM;AAClD,kBAAI,cAAc,eAAe,UAAU,CAAC;AAE5C,kBAAI,QAAQ,EAAE,QAAQ,WAAW;AACjC,kBAAI,QAAQ,IAAI;AACf,kBAAE;AAEF,oBAAI,SAAS,EAAE,UAAU,GAAG,KAAK;AACjC,oBAAI,SAAS,IAAIA,OAAM,MAAM,UAAUA,OAAM,SAAS,GAAG,IAAI,OAAO,GAAG,cAAc,UAAU,CAAC;AAChG,oBAAI,QAAQ,EAAE,UAAU,QAAQ,YAAY,MAAM;AAElD,oBAAI,cAAc,CAAC;AACnB,oBAAI,QAAQ;AACX,8BAAY,KAAK,MAAM,aAAa,WAAW,CAAC,MAAM,CAAC,CAAC;AAAA,gBACzD;AACA,4BAAY,KAAK,MAAM;AACvB,oBAAI,OAAO;AACV,8BAAY,KAAK,MAAM,aAAa,WAAW,CAAC,KAAK,CAAC,CAAC;AAAA,gBACxD;AAEA,oBAAI,OAAO,UAAU,UAAU;AAC9B,yBAAO,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,EAAE,OAAO,WAAW,CAAC;AAAA,gBACvD,OAAO;AACN,wBAAM,UAAU;AAAA,gBACjB;AAAA,cACD;AAAA,YACD,WAAW,MAAM,SAAoD;AACpE,yBAAW,MAAM,OAAO;AAAA,YACzB;AAAA,UACD;AAEA,iBAAO;AAAA,QACR;AAEA,mBAAW,IAAI,MAAM;AAAA,MACtB;AAAA,IACD;AAAA,EACD,CAAC;AAEF,GAAE,KAAK;",
  "names": ["Prism"]
}
